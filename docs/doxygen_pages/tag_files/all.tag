<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.8">
  <compound kind="file">
    <name>conv2d.cpp</name>
    <path>examples/Benchmark/BLAS/</path>
    <filename>conv2d_8cpp.html</filename>
    <includes id="conv2d_8hpp" name="conv2d.hpp" local="no" import="no" module="no" objc="no">shark/LinAlg/BLAS/kernels/conv2d.hpp</includes>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
  </compound>
  <compound kind="file">
    <name>gemm.cpp</name>
    <path>examples/Benchmark/BLAS/</path>
    <filename>gemm_8cpp.html</filename>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
  </compound>
  <compound kind="file">
    <name>potrf.cpp</name>
    <path>examples/Benchmark/BLAS/</path>
    <filename>potrf_8cpp.html</filename>
    <includes id="potrf_8hpp" name="potrf.hpp" local="no" import="no" module="no" objc="no">shark/LinAlg/BLAS/kernels/potrf.hpp</includes>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
  </compound>
  <compound kind="file">
    <name>syrk.cpp</name>
    <path>examples/Benchmark/BLAS/</path>
    <filename>syrk_8cpp.html</filename>
    <includes id="syrk_8hpp" name="syrk.hpp" local="no" import="no" module="no" objc="no">shark/LinAlg/BLAS/kernels/syrk.hpp</includes>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
  </compound>
  <compound kind="file">
    <name>trmm.cpp</name>
    <path>examples/Benchmark/BLAS/</path>
    <filename>trmm_8cpp.html</filename>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
  </compound>
  <compound kind="file">
    <name>hypervolume_algorithms.cpp</name>
    <path>examples/Benchmark/shark/</path>
    <filename>hypervolume__algorithms_8cpp.html</filename>
    <includes id="_hypervolume_calculator_m_d_w_f_g_8h" name="HypervolumeCalculatorMDWFG.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Hypervolume/HypervolumeCalculatorMDWFG.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>kernel_csvm.cpp</name>
    <path>examples/Benchmark/shark/</path>
    <filename>kernel__csvm_8cpp.html</filename>
    <includes id="_sparse_data_8h" name="SparseData.h" local="no" import="no" module="no" objc="no">shark/Data/SparseData.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_c_svm_trainer_8h" name="CSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/CSvmTrainer.h</includes>
    <includes id="_gaussian_rbf_kernel_8h" name="GaussianRbfKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/GaussianRbfKernel.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
  </compound>
  <compound kind="file">
    <name>linear_csvm.cpp</name>
    <path>examples/Benchmark/shark/</path>
    <filename>linear__csvm_8cpp.html</filename>
    <includes id="_sparse_data_8h" name="SparseData.h" local="no" import="no" module="no" objc="no">shark/Data/SparseData.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_c_svm_trainer_8h" name="CSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/CSvmTrainer.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
  </compound>
  <compound kind="file">
    <name>linear_regression.cpp</name>
    <path>examples/Benchmark/shark/</path>
    <filename>linear__regression_8cpp.html</filename>
    <includes id="_csv_8h" name="Csv.h" local="no" import="no" module="no" objc="no">shark/Data/Csv.h</includes>
    <includes id="_linear_regression_8h" name="LinearRegression.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/LinearRegression.h</includes>
    <includes id="_squared_loss_8h" name="SquaredLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/SquaredLoss.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
  </compound>
  <compound kind="file">
    <name>logistic_regression_LBFGS.cpp</name>
    <path>examples/Benchmark/shark/</path>
    <filename>logistic__regression___l_b_f_g_s_8cpp.html</filename>
    <includes id="_sparse_data_8h" name="SparseData.h" local="no" import="no" module="no" objc="no">shark/Data/SparseData.h</includes>
    <includes id="_cross_entropy_8h" name="CrossEntropy.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/CrossEntropy.h</includes>
    <includes id="_regularizer_8h" name="Regularizer.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Regularizer.h</includes>
    <includes id="_l_b_f_g_s_8h" name="LBFGS.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/LBFGS.h</includes>
    <includes id="_error_function_8h" name="ErrorFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/ErrorFunction.h</includes>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
  </compound>
  <compound kind="file">
    <name>logistic_regression_SAG.cpp</name>
    <path>examples/Benchmark/shark/</path>
    <filename>logistic__regression___s_a_g_8cpp.html</filename>
    <includes id="_sparse_data_8h" name="SparseData.h" local="no" import="no" module="no" objc="no">shark/Data/SparseData.h</includes>
    <includes id="_cross_entropy_8h" name="CrossEntropy.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/CrossEntropy.h</includes>
    <includes id="_linear_s_a_g_trainer_8h" name="LinearSAGTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/LinearSAGTrainer.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
  </compound>
  <compound kind="file">
    <name>nearest_neighbours.cpp</name>
    <path>examples/Benchmark/shark/</path>
    <filename>nearest__neighbours_8cpp.html</filename>
    <includes id="_sparse_data_8h" name="SparseData.h" local="no" import="no" module="no" objc="no">shark/Data/SparseData.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_tree_nearest_neighbors_8h" name="TreeNearestNeighbors.h" local="no" import="no" module="no" objc="no">shark/Algorithms/NearestNeighbors/TreeNearestNeighbors.h</includes>
    <includes id="_simple_nearest_neighbors_8h" name="SimpleNearestNeighbors.h" local="no" import="no" module="no" objc="no">shark/Algorithms/NearestNeighbors/SimpleNearestNeighbors.h</includes>
    <includes id="_k_d_tree_8h" name="KDTree.h" local="no" import="no" module="no" objc="no">shark/Models/Trees/KDTree.h</includes>
    <includes id="_linear_kernel_8h" name="LinearKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/LinearKernel.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
  </compound>
  <compound kind="file">
    <name>random_forrest.cpp</name>
    <path>examples/Benchmark/shark/</path>
    <filename>random__forrest_8cpp.html</filename>
    <includes id="_sparse_data_8h" name="SparseData.h" local="no" import="no" module="no" objc="no">shark/Data/SparseData.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_squared_loss_8h" name="SquaredLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/SquaredLoss.h</includes>
    <includes id="_r_f_trainer_8h" name="RFTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/RFTrainer.h</includes>
    <includes id="_gaussian_rbf_kernel_8h" name="GaussianRbfKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/GaussianRbfKernel.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
  </compound>
  <compound kind="file">
    <name>ridge_regression.cpp</name>
    <path>examples/Benchmark/shark/</path>
    <filename>ridge__regression_8cpp.html</filename>
    <includes id="_csv_8h" name="Csv.h" local="no" import="no" module="no" objc="no">shark/Data/Csv.h</includes>
    <includes id="_linear_regression_8h" name="LinearRegression.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/LinearRegression.h</includes>
    <includes id="_squared_loss_8h" name="SquaredLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/SquaredLoss.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
  </compound>
  <compound kind="file">
    <name>Datasets.cpp</name>
    <path>examples/Data/</path>
    <filename>_datasets_8cpp.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
  </compound>
  <compound kind="file">
    <name>Import.cpp</name>
    <path>examples/Data/</path>
    <filename>_import_8cpp.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
    <includes id="_csv_8h" name="Csv.h" local="no" import="no" module="no" objc="no">shark/Data/Csv.h</includes>
    <includes id="_sparse_data_8h" name="SparseData.h" local="no" import="no" module="no" objc="no">shark/Data/SparseData.h</includes>
    <includes id="_download_8h" name="Download.h" local="no" import="no" module="no" objc="no">shark/Data/Download.h</includes>
  </compound>
  <compound kind="file">
    <name>Normalization.cpp</name>
    <path>examples/Data/</path>
    <filename>_normalization_8cpp.html</filename>
    <includes id="_csv_8h" name="Csv.h" local="no" import="no" module="no" objc="no">shark/Data/Csv.h</includes>
    <includes id="_normalizer_8h" name="Normalizer.h" local="no" import="no" module="no" objc="no">shark/Models/Normalizer.h</includes>
    <includes id="_normalize_components_unit_variance_8h" name="NormalizeComponentsUnitVariance.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/NormalizeComponentsUnitVariance.h</includes>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_normalize_components_whitening_8h" name="NormalizeComponentsWhitening.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/NormalizeComponentsWhitening.h</includes>
  </compound>
  <compound kind="file">
    <name>Subsets.cpp</name>
    <path>examples/Data/</path>
    <filename>_subsets_8cpp.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_c_v_dataset_tools_8h" name="CVDatasetTools.h" local="no" import="no" module="no" objc="no">shark/Data/CVDatasetTools.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
  </compound>
  <compound kind="file">
    <name>MOCMAApproximated.cpp</name>
    <path>examples/EA/MOO/</path>
    <filename>_m_o_c_m_a_approximated_8cpp.html</filename>
    <includes id="_m_o_c_m_a_8h" name="MOCMA.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/MOCMA.h</includes>
    <includes id="_benchmarks_8h" name="Benchmarks.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Benchmarks.h</includes>
  </compound>
  <compound kind="file">
    <name>MOCMAExperiment.cpp</name>
    <path>examples/EA/MOO/</path>
    <filename>_m_o_c_m_a_experiment_8cpp.html</filename>
    <includes id="_m_o_c_m_a_8h" name="MOCMA.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/MOCMA.h</includes>
    <includes id="_z_d_t1_8h" name="ZDT1.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/ZDT1.h</includes>
    <includes id="_z_d_t2_8h" name="ZDT2.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/ZDT2.h</includes>
    <includes id="_z_d_t3_8h" name="ZDT3.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/ZDT3.h</includes>
    <includes id="_z_d_t6_8h" name="ZDT6.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/ZDT6.h</includes>
  </compound>
  <compound kind="file">
    <name>MOCMASimple.cpp</name>
    <path>examples/EA/MOO/</path>
    <filename>_m_o_c_m_a_simple_8cpp.html</filename>
    <includes id="_m_o_c_m_a_8h" name="MOCMA.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/MOCMA.h</includes>
    <includes id="_benchmarks_8h" name="Benchmarks.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Benchmarks.h</includes>
  </compound>
  <compound kind="file">
    <name>AckleyES.cpp</name>
    <path>examples/EA/SOO/</path>
    <filename>_ackley_e_s_8cpp.html</filename>
    <includes id="_individual_8h" name="Individual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Individual.h</includes>
    <includes id="_uniform_crossover_8h" name="UniformCrossover.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Recombination/UniformCrossover.h</includes>
    <includes id="_simulated_binary_crossover_8h" name="SimulatedBinaryCrossover.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Recombination/SimulatedBinaryCrossover.h</includes>
    <includes id="_ackley_8h" name="Ackley.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Ackley.h</includes>
    <includes id="_multi_variate_normal_distribution_8h" name="MultiVariateNormalDistribution.h" local="no" import="no" module="no" objc="no">shark/Statistics/Distributions/MultiVariateNormalDistribution.h</includes>
  </compound>
  <compound kind="file">
    <name>Archive.cpp</name>
    <path>examples/EA/SOO/</path>
    <filename>_archive_8cpp.html</filename>
    <includes id="_c_m_a_8h" name="CMA.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/CMA.h</includes>
    <includes id="_benchmarks_8h" name="Benchmarks.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Benchmarks.h</includes>
    <includes id="_evaluation_archive_8h" name="EvaluationArchive.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/EvaluationArchive.h</includes>
  </compound>
  <compound kind="file">
    <name>CMAExperiment.cpp</name>
    <path>examples/EA/SOO/</path>
    <filename>_c_m_a_experiment_8cpp.html</filename>
    <includes id="_c_m_a_8h" name="CMA.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/CMA.h</includes>
    <includes id="_rosenbrock_8h" name="Rosenbrock.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Rosenbrock.h</includes>
    <includes id="_cigar_8h" name="Cigar.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Cigar.h</includes>
    <includes id="_discus_8h" name="Discus.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Discus.h</includes>
    <includes id="_ellipsoid_8h" name="Ellipsoid.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Ellipsoid.h</includes>
  </compound>
  <compound kind="file">
    <name>CMAPlot.cpp</name>
    <path>examples/EA/SOO/</path>
    <filename>_c_m_a_plot_8cpp.html</filename>
    <includes id="_c_m_a_8h" name="CMA.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/CMA.h</includes>
    <includes id="_benchmarks_8h" name="Benchmarks.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Benchmarks.h</includes>
  </compound>
  <compound kind="file">
    <name>CMASimple.cpp</name>
    <path>examples/EA/SOO/</path>
    <filename>_c_m_a_simple_8cpp.html</filename>
    <includes id="_c_m_a_8h" name="CMA.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/CMA.h</includes>
    <includes id="_benchmarks_8h" name="Benchmarks.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Benchmarks.h</includes>
  </compound>
  <compound kind="file">
    <name>ElitistCMASimple.cpp</name>
    <path>examples/EA/SOO/</path>
    <filename>_elitist_c_m_a_simple_8cpp.html</filename>
    <includes id="_elitist_c_m_a_8h" name="ElitistCMA.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/ElitistCMA.h</includes>
    <includes id="_sphere_8h" name="Sphere.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Sphere.h</includes>
  </compound>
  <compound kind="file">
    <name>TSP.cpp</name>
    <path>examples/EA/SOO/</path>
    <filename>_t_s_p_8cpp.html</filename>
    <includes id="_partially_mapped_crossover_8h" name="PartiallyMappedCrossover.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Recombination/PartiallyMappedCrossover.h</includes>
    <includes id="_roulette_wheel_selection_8h" name="RouletteWheelSelection.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Selection/RouletteWheelSelection.h</includes>
    <includes id="_individual_8h" name="Individual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Individual.h</includes>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>HelloWorld.cpp</name>
    <path>examples/ExampleProject/</path>
    <filename>_hello_world_8cpp.html</filename>
    <includes id="_shark_8h" name="Shark.h" local="no" import="no" module="no" objc="no">shark/Core/Shark.h</includes>
  </compound>
  <compound kind="file">
    <name>Statistics.cpp</name>
    <path>examples/Statistics/</path>
    <filename>_statistics_8cpp.html</filename>
    <includes id="_statistics_2_statistics_8h" name="Statistics.h" local="no" import="no" module="no" objc="no">shark/Statistics/Statistics.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>CSvmGridSearchTutorial.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_c_svm_grid_search_tutorial_8cpp.html</filename>
    <includes id="_gaussian_rbf_kernel_8h" name="GaussianRbfKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/GaussianRbfKernel.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_c_svm_trainer_8h" name="CSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/CSvmTrainer.h</includes>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
    <includes id="_cross_validation_error_8h" name="CrossValidationError.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/CrossValidationError.h</includes>
    <includes id="_grid_search_8h" name="GridSearch.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/GridSearch.h</includes>
    <includes id="_jaakkola_heuristic_8h" name="JaakkolaHeuristic.h" local="no" import="no" module="no" objc="no">shark/Algorithms/JaakkolaHeuristic.h</includes>
  </compound>
  <compound kind="file">
    <name>CSvmLinear.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_c_svm_linear_8cpp.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_c_svm_trainer_8h" name="CSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/CSvmTrainer.h</includes>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
  </compound>
  <compound kind="file">
    <name>CSvmMaxLikelihoodMS.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_c_svm_max_likelihood_m_s_8cpp.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_c_v_dataset_tools_8h" name="CVDatasetTools.h" local="no" import="no" module="no" objc="no">shark/Data/CVDatasetTools.h</includes>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
    <includes id="_data_2_statistics_8h" name="Statistics.h" local="no" import="no" module="no" objc="no">shark/Data/Statistics.h</includes>
    <includes id="_ard_kernel_8h" name="ArdKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/ArdKernel.h</includes>
    <includes id="_quadratic_program_8h" name="QuadraticProgram.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/QuadraticProgram.h</includes>
    <includes id="_c_svm_trainer_8h" name="CSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/CSvmTrainer.h</includes>
    <includes id="_rprop_8h" name="Rprop.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/Rprop.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_svm_logistic_interpretation_8h" name="SvmLogisticInterpretation.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/SvmLogisticInterpretation.h</includes>
    <includes id="_normalize_components_unit_variance_8h" name="NormalizeComponentsUnitVariance.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/NormalizeComponentsUnitVariance.h</includes>
  </compound>
  <compound kind="file">
    <name>CSvmTutorial.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_c_svm_tutorial_8cpp.html</filename>
    <includes id="_c_svm_trainer_8h" name="CSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/CSvmTrainer.h</includes>
    <includes id="_gaussian_rbf_kernel_8h" name="GaussianRbfKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/GaussianRbfKernel.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
  </compound>
  <compound kind="file">
    <name>CVFolds.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_c_v_folds_8cpp.html</filename>
    <includes id="_c_v_dataset_tools_8h" name="CVDatasetTools.h" local="no" import="no" module="no" objc="no">shark/Data/CVDatasetTools.h</includes>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_concatenated_model_8h" name="ConcatenatedModel.h" local="no" import="no" module="no" objc="no">shark/Models/ConcatenatedModel.h</includes>
    <includes id="_error_function_8h" name="ErrorFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/ErrorFunction.h</includes>
    <includes id="_squared_loss_8h" name="SquaredLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/SquaredLoss.h</includes>
    <includes id="_regularizer_8h" name="Regularizer.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Regularizer.h</includes>
    <includes id="_rprop_8h" name="Rprop.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/Rprop.h</includes>
  </compound>
  <compound kind="file">
    <name>DeepNetworkTrainingRBM.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_deep_network_training_r_b_m_8cpp.html</filename>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_concatenated_model_8h" name="ConcatenatedModel.h" local="no" import="no" module="no" objc="no">shark/Models/ConcatenatedModel.h</includes>
    <includes id="_binary_r_b_m_8h" name="BinaryRBM.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/BinaryRBM.h</includes>
    <includes id="_error_function_8h" name="ErrorFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/ErrorFunction.h</includes>
    <includes id="_squared_loss_8h" name="SquaredLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/SquaredLoss.h</includes>
    <includes id="_cross_entropy_8h" name="CrossEntropy.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/CrossEntropy.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_regularizer_8h" name="Regularizer.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Regularizer.h</includes>
    <includes id="_steepest_descent_8h" name="SteepestDescent.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/SteepestDescent.h</includes>
    <includes id="_rprop_8h" name="Rprop.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/Rprop.h</includes>
  </compound>
  <compound kind="file">
    <name>FFNNBasicTutorial.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_f_f_n_n_basic_tutorial_8cpp.html</filename>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_concatenated_model_8h" name="ConcatenatedModel.h" local="no" import="no" module="no" objc="no">shark/Models/ConcatenatedModel.h</includes>
    <includes id="_error_function_8h" name="ErrorFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/ErrorFunction.h</includes>
    <includes id="_cross_entropy_8h" name="CrossEntropy.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/CrossEntropy.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_adam_8h" name="Adam.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/Adam.h</includes>
    <includes id="_sparse_data_8h" name="SparseData.h" local="no" import="no" module="no" objc="no">shark/Data/SparseData.h</includes>
  </compound>
  <compound kind="file">
    <name>KernelBudgetedSGDTutorial.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_kernel_budgeted_s_g_d_tutorial_8cpp.html</filename>
    <includes id="_kernel_budgeted_s_g_d_trainer_8h" name="KernelBudgetedSGDTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/Budgeted/KernelBudgetedSGDTrainer.h</includes>
    <includes id="_merge_budget_maintenance_strategy_8h" name="MergeBudgetMaintenanceStrategy.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/Budgeted/MergeBudgetMaintenanceStrategy.h</includes>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
    <includes id="_gaussian_rbf_kernel_8h" name="GaussianRbfKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/GaussianRbfKernel.h</includes>
    <includes id="_hinge_loss_8h" name="HingeLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/HingeLoss.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>KernelLogisticRegression.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_kernel_logistic_regression_8cpp.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
    <includes id="_kernel_expansion_8h" name="KernelExpansion.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelExpansion.h</includes>
    <includes id="_gaussian_rbf_kernel_8h" name="GaussianRbfKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/GaussianRbfKernel.h</includes>
    <includes id="_kernel_s_g_d_trainer_8h" name="KernelSGDTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/KernelSGDTrainer.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_cross_entropy_8h" name="CrossEntropy.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/CrossEntropy.h</includes>
  </compound>
  <compound kind="file">
    <name>KernelRegression.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_kernel_regression_8cpp.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_gaussian_rbf_kernel_8h" name="GaussianRbfKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/GaussianRbfKernel.h</includes>
    <includes id="_epsilon_svm_trainer_8h" name="EpsilonSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/EpsilonSvmTrainer.h</includes>
    <includes id="_regularization_network_trainer_8h" name="RegularizationNetworkTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/RegularizationNetworkTrainer.h</includes>
    <includes id="_squared_loss_8h" name="SquaredLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/SquaredLoss.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
  </compound>
  <compound kind="file">
    <name>KernelSelection.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_kernel_selection_8cpp.html</filename>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
    <includes id="_gaussian_rbf_kernel_8h" name="GaussianRbfKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/GaussianRbfKernel.h</includes>
    <includes id="_radius_margin_quotient_8h" name="RadiusMarginQuotient.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/RadiusMarginQuotient.h</includes>
    <includes id="_rprop_8h" name="Rprop.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/Rprop.h</includes>
  </compound>
  <compound kind="file">
    <name>KNNCrossValidationTutorial.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_k_n_n_cross_validation_tutorial_8cpp.html</filename>
    <includes id="_csv_8h" name="Csv.h" local="no" import="no" module="no" objc="no">shark/Data/Csv.h</includes>
    <includes id="_nearest_neighbor_model_8h" name="NearestNeighborModel.h" local="no" import="no" module="no" objc="no">shark/Models/NearestNeighborModel.h</includes>
    <includes id="_simple_nearest_neighbors_8h" name="SimpleNearestNeighbors.h" local="no" import="no" module="no" objc="no">shark/Algorithms/NearestNeighbors/SimpleNearestNeighbors.h</includes>
    <includes id="_linear_kernel_8h" name="LinearKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/LinearKernel.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_c_v_dataset_tools_8h" name="CVDatasetTools.h" local="no" import="no" module="no" objc="no">shark/Data/CVDatasetTools.h</includes>
  </compound>
  <compound kind="file">
    <name>KNNTutorial.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_k_n_n_tutorial_8cpp.html</filename>
    <includes id="_csv_8h" name="Csv.h" local="no" import="no" module="no" objc="no">shark/Data/Csv.h</includes>
    <includes id="_nearest_neighbor_model_8h" name="NearestNeighborModel.h" local="no" import="no" module="no" objc="no">shark/Models/NearestNeighborModel.h</includes>
    <includes id="_tree_nearest_neighbors_8h" name="TreeNearestNeighbors.h" local="no" import="no" module="no" objc="no">shark/Algorithms/NearestNeighbors/TreeNearestNeighbors.h</includes>
    <includes id="_k_d_tree_8h" name="KDTree.h" local="no" import="no" module="no" objc="no">shark/Models/Trees/KDTree.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
  </compound>
  <compound kind="file">
    <name>KTA-tutorial.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_k_t_a-tutorial_8cpp.html</filename>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
    <includes id="_gaussian_rbf_kernel_8h" name="GaussianRbfKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/GaussianRbfKernel.h</includes>
    <includes id="_kernel_target_alignment_8h" name="KernelTargetAlignment.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/KernelTargetAlignment.h</includes>
    <includes id="_rprop_8h" name="Rprop.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/Rprop.h</includes>
  </compound>
  <compound kind="file">
    <name>LassoRegression.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_lasso_regression_8cpp.html</filename>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
    <includes id="_squared_loss_8h" name="SquaredLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/SquaredLoss.h</includes>
    <includes id="_lasso_regression_8h" name="LassoRegression.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/LassoRegression.h</includes>
  </compound>
  <compound kind="file">
    <name>LDATutorial.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_l_d_a_tutorial_8cpp.html</filename>
    <includes id="_csv_8h" name="Csv.h" local="no" import="no" module="no" objc="no">shark/Data/Csv.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_l_d_a_8h" name="LDA.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/LDA.h</includes>
  </compound>
  <compound kind="file">
    <name>linearRegressionTutorial.cpp</name>
    <path>examples/Supervised/</path>
    <filename>linear_regression_tutorial_8cpp.html</filename>
    <includes id="_csv_8h" name="Csv.h" local="no" import="no" module="no" objc="no">shark/Data/Csv.h</includes>
    <includes id="_squared_loss_8h" name="SquaredLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/SquaredLoss.h</includes>
    <includes id="_linear_regression_8h" name="LinearRegression.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/LinearRegression.h</includes>
  </compound>
  <compound kind="file">
    <name>McSvm.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_mc_svm_8cpp.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
    <includes id="_gaussian_rbf_kernel_8h" name="GaussianRbfKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/GaussianRbfKernel.h</includes>
    <includes id="_c_svm_trainer_8h" name="CSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/CSvmTrainer.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>McSvmLinear.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_mc_svm_linear_8cpp.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_c_svm_trainer_8h" name="CSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/CSvmTrainer.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
  </compound>
  <compound kind="file">
    <name>MklKernelTutorial.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_mkl_kernel_tutorial_8cpp.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_normalize_kernel_unit_variance_8h" name="NormalizeKernelUnitVariance.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/NormalizeKernelUnitVariance.h</includes>
    <includes id="_gaussian_rbf_kernel_8h" name="GaussianRbfKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/GaussianRbfKernel.h</includes>
    <includes id="_weighted_sum_kernel_8h" name="WeightedSumKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/WeightedSumKernel.h</includes>
    <includes id="_subrange_kernel_8h" name="SubrangeKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/SubrangeKernel.h</includes>
    <includes id="_mkl_kernel_8h" name="MklKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/MklKernel.h</includes>
    <includes id="_linear_kernel_8h" name="LinearKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/LinearKernel.h</includes>
    <includes id="_discrete_kernel_8h" name="DiscreteKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/DiscreteKernel.h</includes>
    <includes id="_polynomial_kernel_8h" name="PolynomialKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/PolynomialKernel.h</includes>
  </compound>
  <compound kind="file">
    <name>MNISTForExperts.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_m_n_i_s_t_for_experts_8cpp.html</filename>
    <includes id="_sparse_data_8h" name="SparseData.h" local="no" import="no" module="no" objc="no">shark/Data/SparseData.h</includes>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_convolutional_model_8h" name="ConvolutionalModel.h" local="no" import="no" module="no" objc="no">shark/Models/ConvolutionalModel.h</includes>
    <includes id="_pooling_layer_8h" name="PoolingLayer.h" local="no" import="no" module="no" objc="no">shark/Models/PoolingLayer.h</includes>
    <includes id="_concatenated_model_8h" name="ConcatenatedModel.h" local="no" import="no" module="no" objc="no">shark/Models/ConcatenatedModel.h</includes>
    <includes id="_adam_8h" name="Adam.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/Adam.h</includes>
    <includes id="_cross_entropy_8h" name="CrossEntropy.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/CrossEntropy.h</includes>
    <includes id="_error_function_8h" name="ErrorFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/ErrorFunction.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>MultiTaskSvm.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_multi_task_svm_8cpp.html</filename>
    <includes id="_c_svm_trainer_8h" name="CSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/CSvmTrainer.h</includes>
    <includes id="_gaussian_rbf_kernel_8h" name="GaussianRbfKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/GaussianRbfKernel.h</includes>
    <includes id="_multi_task_kernel_8h" name="MultiTaskKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/MultiTaskKernel.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
  </compound>
  <compound kind="file">
    <name>OneVersusOne.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_one_versus_one_8cpp.html</filename>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
    <includes id="_one_versus_one_classifier_8h" name="OneVersusOneClassifier.h" local="no" import="no" module="no" objc="no">shark/Models/OneVersusOneClassifier.h</includes>
    <includes id="_gaussian_rbf_kernel_8h" name="GaussianRbfKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/GaussianRbfKernel.h</includes>
    <includes id="_c_svm_trainer_8h" name="CSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/CSvmTrainer.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>quickstartTutorial.cpp</name>
    <path>examples/Supervised/</path>
    <filename>quickstart_tutorial_8cpp.html</filename>
    <includes id="_csv_8h" name="Csv.h" local="no" import="no" module="no" objc="no">shark/Data/Csv.h</includes>
    <includes id="_l_d_a_8h" name="LDA.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/LDA.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>regressionTutorial.cpp</name>
    <path>examples/Supervised/</path>
    <filename>regression_tutorial_8cpp.html</filename>
    <includes id="_csv_8h" name="Csv.h" local="no" import="no" module="no" objc="no">shark/Data/Csv.h</includes>
    <includes id="_c_g_8h" name="CG.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/CG.h</includes>
    <includes id="_error_function_8h" name="ErrorFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/ErrorFunction.h</includes>
    <includes id="_squared_loss_8h" name="SquaredLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/SquaredLoss.h</includes>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
  </compound>
  <compound kind="file">
    <name>RFTutorial.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_r_f_tutorial_8cpp.html</filename>
    <includes id="_csv_8h" name="Csv.h" local="no" import="no" module="no" objc="no">shark/Data/Csv.h</includes>
    <includes id="_r_f_trainer_8h" name="RFTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/RFTrainer.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>StoppingCriteria.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_stopping_criteria_8cpp.html</filename>
    <includes id="_csv_8h" name="Csv.h" local="no" import="no" module="no" objc="no">shark/Data/Csv.h</includes>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_concatenated_model_8h" name="ConcatenatedModel.h" local="no" import="no" module="no" objc="no">shark/Models/ConcatenatedModel.h</includes>
    <includes id="_rprop_8h" name="Rprop.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/Rprop.h</includes>
    <includes id="_cross_entropy_8h" name="CrossEntropy.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/CrossEntropy.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_optimization_trainer_8h" name="OptimizationTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/OptimizationTrainer.h</includes>
    <includes id="_max_iterations_8h" name="MaxIterations.h" local="no" import="no" module="no" objc="no">shark/Algorithms/StoppingCriteria/MaxIterations.h</includes>
    <includes id="_training_error_8h" name="TrainingError.h" local="no" import="no" module="no" objc="no">shark/Algorithms/StoppingCriteria/TrainingError.h</includes>
    <includes id="_generalization_quotient_8h" name="GeneralizationQuotient.h" local="no" import="no" module="no" objc="no">shark/Algorithms/StoppingCriteria/GeneralizationQuotient.h</includes>
    <includes id="_validated_stopping_criterion_8h" name="ValidatedStoppingCriterion.h" local="no" import="no" module="no" objc="no">shark/Algorithms/StoppingCriteria/ValidatedStoppingCriterion.h</includes>
  </compound>
  <compound kind="file">
    <name>SubrangeKernelTutorial.cpp</name>
    <path>examples/Supervised/</path>
    <filename>_subrange_kernel_tutorial_8cpp.html</filename>
    <includes id="_normalize_kernel_unit_variance_8h" name="NormalizeKernelUnitVariance.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/NormalizeKernelUnitVariance.h</includes>
    <includes id="_gaussian_rbf_kernel_8h" name="GaussianRbfKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/GaussianRbfKernel.h</includes>
    <includes id="_weighted_sum_kernel_8h" name="WeightedSumKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/WeightedSumKernel.h</includes>
    <includes id="_polynomial_kernel_8h" name="PolynomialKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/PolynomialKernel.h</includes>
    <includes id="_linear_kernel_8h" name="LinearKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/LinearKernel.h</includes>
    <includes id="_subrange_kernel_8h" name="SubrangeKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/SubrangeKernel.h</includes>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>AutoEncoderTutorial.cpp</name>
    <path>examples/Unsupervised/</path>
    <filename>_auto_encoder_tutorial_8cpp.html</filename>
    <includes id="_pgm_8h" name="Pgm.h" local="no" import="no" module="no" objc="no">shark/Data/Pgm.h</includes>
    <includes id="_sparse_data_8h" name="SparseData.h" local="no" import="no" module="no" objc="no">shark/Data/SparseData.h</includes>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_concatenated_model_8h" name="ConcatenatedModel.h" local="no" import="no" module="no" objc="no">shark/Models/ConcatenatedModel.h</includes>
    <includes id="_error_function_8h" name="ErrorFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/ErrorFunction.h</includes>
    <includes id="_adam_8h" name="Adam.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/Adam.h</includes>
    <includes id="_squared_loss_8h" name="SquaredLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/SquaredLoss.h</includes>
    <includes id="_regularizer_8h" name="Regularizer.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Regularizer.h</includes>
  </compound>
  <compound kind="file">
    <name>BinaryRBM.cpp</name>
    <path>examples/Unsupervised/</path>
    <filename>_binary_r_b_m_8cpp.html</filename>
    <includes id="_binary_r_b_m_8h" name="BinaryRBM.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/BinaryRBM.h</includes>
    <includes id="_steepest_descent_8h" name="SteepestDescent.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/SteepestDescent.h</includes>
    <includes id="_bars_and_stripes_8h" name="BarsAndStripes.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Problems/BarsAndStripes.h</includes>
    <includes id="analytics_8h" name="analytics.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/analytics.h</includes>
  </compound>
  <compound kind="file">
    <name>HierarchicalClustering.cpp</name>
    <path>examples/Unsupervised/</path>
    <filename>_hierarchical_clustering_8cpp.html</filename>
    <includes id="_l_c_tree_8h" name="LCTree.h" local="no" import="no" module="no" objc="no">shark/Models/Trees/LCTree.h</includes>
    <includes id="_hierarchical_clustering_8h" name="HierarchicalClustering.h" local="no" import="no" module="no" objc="no">shark/Models/Clustering/HierarchicalClustering.h</includes>
    <includes id="_hard_clustering_model_8h" name="HardClusteringModel.h" local="no" import="no" module="no" objc="no">shark/Models/Clustering/HardClusteringModel.h</includes>
  </compound>
  <compound kind="file">
    <name>KMeansTutorial.cpp</name>
    <path>examples/Unsupervised/</path>
    <filename>_k_means_tutorial_8cpp.html</filename>
    <includes id="_csv_8h" name="Csv.h" local="no" import="no" module="no" objc="no">shark/Data/Csv.h</includes>
    <includes id="_normalize_components_unit_variance_8h" name="NormalizeComponentsUnitVariance.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/NormalizeComponentsUnitVariance.h</includes>
    <includes id="_k_means_8h" name="KMeans.h" local="no" import="no" module="no" objc="no">shark/Algorithms/KMeans.h</includes>
    <includes id="_hard_clustering_model_8h" name="HardClusteringModel.h" local="no" import="no" module="no" objc="no">shark/Models/Clustering/HardClusteringModel.h</includes>
  </compound>
  <compound kind="file">
    <name>OneClassSvm.cpp</name>
    <path>examples/Unsupervised/</path>
    <filename>_one_class_svm_8cpp.html</filename>
    <includes id="_one_class_svm_trainer_8h" name="OneClassSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/OneClassSvmTrainer.h</includes>
    <includes id="_gaussian_rbf_kernel_8h" name="GaussianRbfKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/GaussianRbfKernel.h</includes>
    <includes id="_data_distribution_8h" name="DataDistribution.h" local="no" import="no" module="no" objc="no">shark/Data/DataDistribution.h</includes>
  </compound>
  <compound kind="file">
    <name>PCA.cpp</name>
    <path>examples/Unsupervised/</path>
    <filename>_p_c_a_8cpp.html</filename>
    <includes id="_p_c_a_8h" name="PCA.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/PCA.h</includes>
    <includes id="_multi_variate_normal_distribution_8h" name="MultiVariateNormalDistribution.h" local="no" import="no" module="no" objc="no">shark/Statistics/Distributions/MultiVariateNormalDistribution.h</includes>
  </compound>
  <compound kind="file">
    <name>PCATutorial.cpp</name>
    <path>examples/Unsupervised/</path>
    <filename>_p_c_a_tutorial_8cpp.html</filename>
    <includes id="_p_c_a_8h" name="PCA.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/PCA.h</includes>
    <includes id="_pgm_8h" name="Pgm.h" local="no" import="no" module="no" objc="no">shark/Data/Pgm.h</includes>
  </compound>
  <compound kind="file">
    <name>VariationalAutoencoder.cpp</name>
    <path>examples/Unsupervised/</path>
    <filename>_variational_autoencoder_8cpp.html</filename>
    <includes id="_sparse_data_8h" name="SparseData.h" local="no" import="no" module="no" objc="no">shark/Data/SparseData.h</includes>
    <includes id="_pgm_8h" name="Pgm.h" local="no" import="no" module="no" objc="no">shark/Data/Pgm.h</includes>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_concatenated_model_8h" name="ConcatenatedModel.h" local="no" import="no" module="no" objc="no">shark/Models/ConcatenatedModel.h</includes>
    <includes id="_adam_8h" name="Adam.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/Adam.h</includes>
    <includes id="_squared_loss_8h" name="SquaredLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/SquaredLoss.h</includes>
    <includes id="_variational_autoencoder_error_8h" name="VariationalAutoencoderError.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/VariationalAutoencoderError.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractMultiObjectiveOptimizer.h</name>
    <path>include/shark/Algorithms/</path>
    <filename>_abstract_multi_objective_optimizer_8h.html</filename>
    <includes id="_abstract_optimizer_8h" name="AbstractOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractOptimizer.h</includes>
    <includes id="_result_sets_8h" name="ResultSets.h" local="no" import="no" module="no" objc="no">shark/Core/ResultSets.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractOptimizer.h</name>
    <path>include/shark/Algorithms/</path>
    <filename>_abstract_optimizer_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractSingleObjectiveOptimizer.h</name>
    <path>include/shark/Algorithms/</path>
    <filename>_abstract_single_objective_optimizer_8h.html</filename>
    <includes id="_abstract_optimizer_8h" name="AbstractOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractOptimizer.h</includes>
    <includes id="_result_sets_8h" name="ResultSets.h" local="no" import="no" module="no" objc="no">shark/Core/ResultSets.h</includes>
  </compound>
  <compound kind="file">
    <name>ApproximateKernelExpansion.h</name>
    <path>include/shark/Algorithms/</path>
    <filename>_approximate_kernel_expansion_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_kernel_expansion_8h" name="KernelExpansion.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelExpansion.h</includes>
  </compound>
  <compound kind="file">
    <name>.!48366!SteadyStateMOCMA.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_8_948366_9_steady_state_m_o_c_m_a_8h.html</filename>
    <includes id="_hypervolume_indicator_8h" name="HypervolumeIndicator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Indicators/HypervolumeIndicator.h</includes>
    <includes id="_additive_epsilon_indicator_8h" name="AdditiveEpsilonIndicator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Indicators/AdditiveEpsilonIndicator.h</includes>
    <includes id="_indicator_based_selection_8h" name="IndicatorBasedSelection.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Selection/IndicatorBasedSelection.h</includes>
    <includes id="_penalizing_evaluator_8h" name="PenalizingEvaluator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Evaluation/PenalizingEvaluator.h</includes>
    <includes id="_c_m_a_individual_8h" name="CMAIndividual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/CMA/CMAIndividual.h</includes>
    <includes id="_abstract_multi_objective_optimizer_8h" name="AbstractMultiObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractMultiObjectiveOptimizer.h</includes>
  </compound>
  <compound kind="file">
    <name>.!48368!MOCMA.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_8_948368_9_m_o_c_m_a_8h.html</filename>
    <includes id="_hypervolume_indicator_8h" name="HypervolumeIndicator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Indicators/HypervolumeIndicator.h</includes>
    <includes id="_additive_epsilon_indicator_8h" name="AdditiveEpsilonIndicator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Indicators/AdditiveEpsilonIndicator.h</includes>
    <includes id="_indicator_based_selection_8h" name="IndicatorBasedSelection.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Selection/IndicatorBasedSelection.h</includes>
    <includes id="_penalizing_evaluator_8h" name="PenalizingEvaluator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Evaluation/PenalizingEvaluator.h</includes>
    <includes id="_c_m_a_individual_8h" name="CMAIndividual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/CMA/CMAIndividual.h</includes>
    <includes id="_abstract_multi_objective_optimizer_8h" name="AbstractMultiObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractMultiObjectiveOptimizer.h</includes>
  </compound>
  <compound kind="file">
    <name>CMA.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_c_m_a_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_abstract_single_objective_optimizer_8h" name="AbstractSingleObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractSingleObjectiveOptimizer.h</includes>
    <includes id="_multi_variate_normal_distribution_8h" name="MultiVariateNormalDistribution.h" local="no" import="no" module="no" objc="no">shark/Statistics/Distributions/MultiVariateNormalDistribution.h</includes>
    <includes id="_individual_8h" name="Individual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Individual.h</includes>
  </compound>
  <compound kind="file">
    <name>Chromosome.h</name>
    <path>include/shark/Algorithms/DirectSearch/CMA/</path>
    <filename>_chromosome_8h.html</filename>
    <includes id="_multi_variate_normal_distribution_8h" name="MultiVariateNormalDistribution.h" local="no" import="no" module="no" objc="no">shark/Statistics/Distributions/MultiVariateNormalDistribution.h</includes>
  </compound>
  <compound kind="file">
    <name>CMAIndividual.h</name>
    <path>include/shark/Algorithms/DirectSearch/CMA/</path>
    <filename>_c_m_a_individual_8h.html</filename>
    <includes id="_individual_8h" name="Individual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Individual.h</includes>
    <includes id="_chromosome_8h" name="Chromosome.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/CMA/Chromosome.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>CMSA.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_c_m_s_a_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_abstract_single_objective_optimizer_8h" name="AbstractSingleObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractSingleObjectiveOptimizer.h</includes>
    <includes id="_individual_8h" name="Individual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Individual.h</includes>
    <includes id="_multi_variate_normal_distribution_8h" name="MultiVariateNormalDistribution.h" local="no" import="no" module="no" objc="no">shark/Statistics/Distributions/MultiVariateNormalDistribution.h</includes>
  </compound>
  <compound kind="file">
    <name>CrossEntropyMethod.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_cross_entropy_method_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_abstract_single_objective_optimizer_8h" name="AbstractSingleObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractSingleObjectiveOptimizer.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_individual_8h" name="Individual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Individual.h</includes>
  </compound>
  <compound kind="file">
    <name>ElitistCMA.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_elitist_c_m_a_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_abstract_single_objective_optimizer_8h" name="AbstractSingleObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractSingleObjectiveOptimizer.h</includes>
    <includes id="_c_m_a_individual_8h" name="CMAIndividual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/CMA/CMAIndividual.h</includes>
    <includes id="_penalizing_evaluator_8h" name="PenalizingEvaluator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Evaluation/PenalizingEvaluator.h</includes>
  </compound>
  <compound kind="file">
    <name>Grid.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_grid_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>GridSearch.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_grid_search_8h.html</filename>
    <includes id="_abstract_single_objective_optimizer_8h" name="AbstractSingleObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractSingleObjectiveOptimizer.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>Individual.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_individual_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>LMCMA.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_l_m_c_m_a_8h.html</filename>
    <includes id="_abstract_single_objective_optimizer_8h" name="AbstractSingleObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractSingleObjectiveOptimizer.h</includes>
    <includes id="_multi_variate_normal_distribution_8h" name="MultiVariateNormalDistribution.h" local="no" import="no" module="no" objc="no">shark/Statistics/Distributions/MultiVariateNormalDistribution.h</includes>
    <includes id="_individual_8h" name="Individual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Individual.h</includes>
    <includes id="_penalizing_evaluator_8h" name="PenalizingEvaluator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Evaluation/PenalizingEvaluator.h</includes>
    <includes id="_population_based_step_size_adaptation_8h" name="PopulationBasedStepSizeAdaptation.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/PopulationBasedStepSizeAdaptation.h</includes>
    <includes id="_elitist_selection_8h" name="ElitistSelection.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Selection/ElitistSelection.h</includes>
  </compound>
  <compound kind="file">
    <name>MOCMA.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_m_o_c_m_a_8h.html</filename>
    <includes id="_hypervolume_indicator_8h" name="HypervolumeIndicator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Indicators/HypervolumeIndicator.h</includes>
    <includes id="_additive_epsilon_indicator_8h" name="AdditiveEpsilonIndicator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Indicators/AdditiveEpsilonIndicator.h</includes>
    <includes id="_indicator_based_selection_8h" name="IndicatorBasedSelection.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Selection/IndicatorBasedSelection.h</includes>
    <includes id="_penalizing_evaluator_8h" name="PenalizingEvaluator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Evaluation/PenalizingEvaluator.h</includes>
    <includes id="_c_m_a_individual_8h" name="CMAIndividual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/CMA/CMAIndividual.h</includes>
    <includes id="_abstract_multi_objective_optimizer_8h" name="AbstractMultiObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractMultiObjectiveOptimizer.h</includes>
  </compound>
  <compound kind="file">
    <name>MOEAD.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_m_o_e_a_d_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_abstract_multi_objective_optimizer_8h" name="AbstractMultiObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractMultiObjectiveOptimizer.h</includes>
    <includes id="_individual_8h" name="Individual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Individual.h</includes>
    <includes id="_simulated_binary_crossover_8h" name="SimulatedBinaryCrossover.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Recombination/SimulatedBinaryCrossover.h</includes>
    <includes id="_polynomial_mutation_8h" name="PolynomialMutation.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Mutation/PolynomialMutation.h</includes>
    <includes id="_lattice_8h" name="Lattice.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Lattice.h</includes>
  </compound>
  <compound kind="file">
    <name>DCNonDominatedSort.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Domination/</path>
    <filename>_d_c_non_dominated_sort_8h.html</filename>
    <includes id="_pareto_dominance_8h" name="ParetoDominance.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Domination/ParetoDominance.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>FastNonDominatedSort.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Domination/</path>
    <filename>_fast_non_dominated_sort_8h.html</filename>
    <includes id="_pareto_dominance_8h" name="ParetoDominance.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Domination/ParetoDominance.h</includes>
  </compound>
  <compound kind="file">
    <name>NonDominatedSort.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Domination/</path>
    <filename>_non_dominated_sort_8h.html</filename>
    <includes id="_fast_non_dominated_sort_8h" name="FastNonDominatedSort.h" local="yes" import="no" module="no" objc="no">FastNonDominatedSort.h</includes>
    <includes id="_d_c_non_dominated_sort_8h" name="DCNonDominatedSort.h" local="yes" import="no" module="no" objc="no">DCNonDominatedSort.h</includes>
  </compound>
  <compound kind="file">
    <name>ParetoDominance.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Domination/</path>
    <filename>_pareto_dominance_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>PenalizingEvaluator.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Evaluation/</path>
    <filename>_penalizing_evaluator_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>HypervolumeApproximator.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Hypervolume/</path>
    <filename>_hypervolume_approximator_8h.html</filename>
    <includes id="_pareto_dominance_8h" name="ParetoDominance.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Domination/ParetoDominance.h</includes>
    <includes id="_multi_nomial_distribution_8h" name="MultiNomialDistribution.h" local="no" import="no" module="no" objc="no">shark/Statistics/Distributions/MultiNomialDistribution.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>HypervolumeCalculator.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Hypervolume/</path>
    <filename>_hypervolume_calculator_8h.html</filename>
    <includes id="_hypervolume_calculator2_d_8h" name="HypervolumeCalculator2D.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Hypervolume/HypervolumeCalculator2D.h</includes>
    <includes id="_hypervolume_calculator3_d_8h" name="HypervolumeCalculator3D.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Hypervolume/HypervolumeCalculator3D.h</includes>
    <includes id="_hypervolume_calculator_m_d_h_o_y_8h" name="HypervolumeCalculatorMDHOY.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Hypervolume/HypervolumeCalculatorMDHOY.h</includes>
    <includes id="_hypervolume_calculator_m_d_w_f_g_8h" name="HypervolumeCalculatorMDWFG.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Hypervolume/HypervolumeCalculatorMDWFG.h</includes>
    <includes id="_hypervolume_approximator_8h" name="HypervolumeApproximator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Hypervolume/HypervolumeApproximator.h</includes>
  </compound>
  <compound kind="file">
    <name>HypervolumeCalculator2D.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Hypervolume/</path>
    <filename>_hypervolume_calculator2_d_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_key_value_pair_8h" name="KeyValuePair.h" local="no" import="no" module="no" objc="no">shark/Core/utility/KeyValuePair.h</includes>
  </compound>
  <compound kind="file">
    <name>HypervolumeCalculator3D.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Hypervolume/</path>
    <filename>_hypervolume_calculator3_d_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>HypervolumeCalculatorMDHOY.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Hypervolume/</path>
    <filename>_hypervolume_calculator_m_d_h_o_y_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>HypervolumeCalculatorMDWFG.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Hypervolume/</path>
    <filename>_hypervolume_calculator_m_d_w_f_g_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_non_dominated_sort_8h" name="NonDominatedSort.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Domination/NonDominatedSort.h</includes>
  </compound>
  <compound kind="file">
    <name>HypervolumeContribution.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Hypervolume/</path>
    <filename>_hypervolume_contribution_8h.html</filename>
    <includes id="_hypervolume_contribution2_d_8h" name="HypervolumeContribution2D.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Hypervolume/HypervolumeContribution2D.h</includes>
    <includes id="_hypervolume_contribution3_d_8h" name="HypervolumeContribution3D.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Hypervolume/HypervolumeContribution3D.h</includes>
    <includes id="_hypervolume_contribution_m_d_8h" name="HypervolumeContributionMD.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Hypervolume/HypervolumeContributionMD.h</includes>
    <includes id="_hypervolume_contribution_approximator_8h" name="HypervolumeContributionApproximator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Hypervolume/HypervolumeContributionApproximator.h</includes>
  </compound>
  <compound kind="file">
    <name>HypervolumeContribution2D.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Hypervolume/</path>
    <filename>_hypervolume_contribution2_d_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_key_value_pair_8h" name="KeyValuePair.h" local="no" import="no" module="no" objc="no">shark/Core/utility/KeyValuePair.h</includes>
  </compound>
  <compound kind="file">
    <name>HypervolumeContribution3D.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Hypervolume/</path>
    <filename>_hypervolume_contribution3_d_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_key_value_pair_8h" name="KeyValuePair.h" local="no" import="no" module="no" objc="no">shark/Core/utility/KeyValuePair.h</includes>
  </compound>
  <compound kind="file">
    <name>HypervolumeContributionApproximator.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Hypervolume/</path>
    <filename>_hypervolume_contribution_approximator_8h.html</filename>
    <includes id="_pareto_dominance_8h" name="ParetoDominance.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Domination/ParetoDominance.h</includes>
    <includes id="_hypervolume_calculator_8h" name="HypervolumeCalculator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Hypervolume/HypervolumeCalculator.h</includes>
  </compound>
  <compound kind="file">
    <name>HypervolumeContributionMD.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Hypervolume/</path>
    <filename>_hypervolume_contribution_m_d_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_key_value_pair_8h" name="KeyValuePair.h" local="no" import="no" module="no" objc="no">shark/Core/utility/KeyValuePair.h</includes>
    <includes id="_open_m_p_8h" name="OpenMP.h" local="no" import="no" module="no" objc="no">shark/Core/OpenMP.h</includes>
    <includes id="_hypervolume_calculator_8h" name="HypervolumeCalculator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Hypervolume/HypervolumeCalculator.h</includes>
    <includes id="_non_dominated_sort_8h" name="NonDominatedSort.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Domination/NonDominatedSort.h</includes>
  </compound>
  <compound kind="file">
    <name>HypervolumeSubsetSelection2D.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Hypervolume/</path>
    <filename>_hypervolume_subset_selection2_d_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>AdditiveEpsilonIndicator.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Indicators/</path>
    <filename>_additive_epsilon_indicator_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>CrowdingDistance.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Indicators/</path>
    <filename>_crowding_distance_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>HypervolumeIndicator.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Indicators/</path>
    <filename>_hypervolume_indicator_8h.html</filename>
    <includes id="_exception_8h" name="Exception.h" local="no" import="no" module="no" objc="no">shark/Core/Exception.h</includes>
    <includes id="_open_m_p_8h" name="OpenMP.h" local="no" import="no" module="no" objc="no">shark/Core/OpenMP.h</includes>
    <includes id="_hypervolume_contribution_8h" name="HypervolumeContribution.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Hypervolume/HypervolumeContribution.h</includes>
  </compound>
  <compound kind="file">
    <name>NSGA3Indicator.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Indicators/</path>
    <filename>_n_s_g_a3_indicator_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_key_value_pair_8h" name="KeyValuePair.h" local="no" import="no" module="no" objc="no">shark/Core/utility/KeyValuePair.h</includes>
    <includes id="_lattice_8h" name="Lattice.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Lattice.h</includes>
  </compound>
  <compound kind="file">
    <name>Lattice.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/</path>
    <filename>_lattice_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_metrics_8h" name="Metrics.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Metrics.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>BitflipMutator.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Mutation/</path>
    <filename>_bitflip_mutator_8h.html</filename>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>PolynomialMutation.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Mutation/</path>
    <filename>_polynomial_mutation_8h.html</filename>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>PopulationBasedStepSizeAdaptation.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/</path>
    <filename>_population_based_step_size_adaptation_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>OnePointCrossover.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Recombination/</path>
    <filename>_one_point_crossover_8h.html</filename>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>PartiallyMappedCrossover.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Recombination/</path>
    <filename>_partially_mapped_crossover_8h.html</filename>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_exception_8h" name="Exception.h" local="no" import="no" module="no" objc="no">shark/Core/Exception.h</includes>
  </compound>
  <compound kind="file">
    <name>SimulatedBinaryCrossover.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Recombination/</path>
    <filename>_simulated_binary_crossover_8h.html</filename>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>UniformCrossover.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Recombination/</path>
    <filename>_uniform_crossover_8h.html</filename>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>ReferenceVectorAdaptation.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/</path>
    <filename>_reference_vector_adaptation_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_individual_8h" name="Individual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Individual.h</includes>
  </compound>
  <compound kind="file">
    <name>Tchebycheff.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Scalarizers/</path>
    <filename>_tchebycheff_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>ElitistSelection.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Selection/</path>
    <filename>_elitist_selection_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>EPTournamentSelection.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Selection/</path>
    <filename>_e_p_tournament_selection_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_key_value_pair_8h" name="KeyValuePair.h" local="no" import="no" module="no" objc="no">shark/Core/utility/KeyValuePair.h</includes>
  </compound>
  <compound kind="file">
    <name>IndicatorBasedSelection.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Selection/</path>
    <filename>_indicator_based_selection_8h.html</filename>
    <includes id="_non_dominated_sort_8h" name="NonDominatedSort.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Domination/NonDominatedSort.h</includes>
  </compound>
  <compound kind="file">
    <name>LinearRanking.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Selection/</path>
    <filename>_linear_ranking_8h.html</filename>
    <includes id="_roulette_wheel_selection_8h" name="RouletteWheelSelection.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Selection/RouletteWheelSelection.h</includes>
  </compound>
  <compound kind="file">
    <name>ReferenceVectorGuidedSelection.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Selection/</path>
    <filename>_reference_vector_guided_selection_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_individual_8h" name="Individual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Individual.h</includes>
  </compound>
  <compound kind="file">
    <name>RouletteWheelSelection.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Selection/</path>
    <filename>_roulette_wheel_selection_8h.html</filename>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>TournamentSelection.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Selection/</path>
    <filename>_tournament_selection_8h.html</filename>
    <includes id="_exception_8h" name="Exception.h" local="no" import="no" module="no" objc="no">shark/Core/Exception.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>UniformRanking.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/Selection/</path>
    <filename>_uniform_ranking_8h.html</filename>
    <includes id="_roulette_wheel_selection_8h" name="RouletteWheelSelection.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Selection/RouletteWheelSelection.h</includes>
  </compound>
  <compound kind="file">
    <name>TwoPointStepSizeAdaptation.h</name>
    <path>include/shark/Algorithms/DirectSearch/Operators/</path>
    <filename>_two_point_step_size_adaptation_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>RealCodedNSGAII.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_real_coded_n_s_g_a_i_i_8h.html</filename>
    <includes id="_abstract_multi_objective_optimizer_8h" name="AbstractMultiObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractMultiObjectiveOptimizer.h</includes>
    <includes id="_individual_8h" name="Individual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Individual.h</includes>
    <includes id="_hypervolume_indicator_8h" name="HypervolumeIndicator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Indicators/HypervolumeIndicator.h</includes>
    <includes id="_additive_epsilon_indicator_8h" name="AdditiveEpsilonIndicator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Indicators/AdditiveEpsilonIndicator.h</includes>
    <includes id="_crowding_distance_8h" name="CrowdingDistance.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Indicators/CrowdingDistance.h</includes>
    <includes id="_n_s_g_a3_indicator_8h" name="NSGA3Indicator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Indicators/NSGA3Indicator.h</includes>
    <includes id="_indicator_based_selection_8h" name="IndicatorBasedSelection.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Selection/IndicatorBasedSelection.h</includes>
    <includes id="_tournament_selection_8h" name="TournamentSelection.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Selection/TournamentSelection.h</includes>
    <includes id="_simulated_binary_crossover_8h" name="SimulatedBinaryCrossover.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Recombination/SimulatedBinaryCrossover.h</includes>
    <includes id="_polynomial_mutation_8h" name="PolynomialMutation.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Mutation/PolynomialMutation.h</includes>
    <includes id="_penalizing_evaluator_8h" name="PenalizingEvaluator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Evaluation/PenalizingEvaluator.h</includes>
  </compound>
  <compound kind="file">
    <name>RealCodedNSGAIII.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_real_coded_n_s_g_a_i_i_i_8h.html</filename>
    <includes id="_n_s_g_a3_indicator_8h" name="NSGA3Indicator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Indicators/NSGA3Indicator.h</includes>
    <includes id="_real_coded_n_s_g_a_i_i_8h" name="RealCodedNSGAII.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/RealCodedNSGAII.h</includes>
  </compound>
  <compound kind="file">
    <name>RVEA.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_r_v_e_a_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_abstract_multi_objective_optimizer_8h" name="AbstractMultiObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractMultiObjectiveOptimizer.h</includes>
    <includes id="_individual_8h" name="Individual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Individual.h</includes>
    <includes id="_reference_vector_adaptation_8h" name="ReferenceVectorAdaptation.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/ReferenceVectorAdaptation.h</includes>
    <includes id="_reference_vector_guided_selection_8h" name="ReferenceVectorGuidedSelection.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Selection/ReferenceVectorGuidedSelection.h</includes>
    <includes id="_simulated_binary_crossover_8h" name="SimulatedBinaryCrossover.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Recombination/SimulatedBinaryCrossover.h</includes>
    <includes id="_polynomial_mutation_8h" name="PolynomialMutation.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Mutation/PolynomialMutation.h</includes>
    <includes id="_lattice_8h" name="Lattice.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Lattice.h</includes>
  </compound>
  <compound kind="file">
    <name>SimplexDownhill.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_simplex_downhill_8h.html</filename>
    <includes id="_abstract_single_objective_optimizer_8h" name="AbstractSingleObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractSingleObjectiveOptimizer.h</includes>
  </compound>
  <compound kind="file">
    <name>SMS-EMOA.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_s_m_s-_e_m_o_a_8h.html</filename>
    <includes id="_individual_8h" name="Individual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Individual.h</includes>
    <includes id="_hypervolume_indicator_8h" name="HypervolumeIndicator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Indicators/HypervolumeIndicator.h</includes>
    <includes id="_tournament_selection_8h" name="TournamentSelection.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Selection/TournamentSelection.h</includes>
    <includes id="_indicator_based_selection_8h" name="IndicatorBasedSelection.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Selection/IndicatorBasedSelection.h</includes>
    <includes id="_simulated_binary_crossover_8h" name="SimulatedBinaryCrossover.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Recombination/SimulatedBinaryCrossover.h</includes>
    <includes id="_polynomial_mutation_8h" name="PolynomialMutation.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Mutation/PolynomialMutation.h</includes>
    <includes id="_penalizing_evaluator_8h" name="PenalizingEvaluator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Evaluation/PenalizingEvaluator.h</includes>
    <includes id="_abstract_multi_objective_optimizer_8h" name="AbstractMultiObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractMultiObjectiveOptimizer.h</includes>
  </compound>
  <compound kind="file">
    <name>SteadyStateMOCMA.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_steady_state_m_o_c_m_a_8h.html</filename>
    <includes id="_hypervolume_indicator_8h" name="HypervolumeIndicator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Indicators/HypervolumeIndicator.h</includes>
    <includes id="_additive_epsilon_indicator_8h" name="AdditiveEpsilonIndicator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Indicators/AdditiveEpsilonIndicator.h</includes>
    <includes id="_indicator_based_selection_8h" name="IndicatorBasedSelection.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Selection/IndicatorBasedSelection.h</includes>
    <includes id="_penalizing_evaluator_8h" name="PenalizingEvaluator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Evaluation/PenalizingEvaluator.h</includes>
    <includes id="_c_m_a_individual_8h" name="CMAIndividual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/CMA/CMAIndividual.h</includes>
    <includes id="_abstract_multi_objective_optimizer_8h" name="AbstractMultiObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractMultiObjectiveOptimizer.h</includes>
  </compound>
  <compound kind="file">
    <name>VDCMA.h</name>
    <path>include/shark/Algorithms/DirectSearch/</path>
    <filename>_v_d_c_m_a_8h.html</filename>
    <includes id="_abstract_single_objective_optimizer_8h" name="AbstractSingleObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractSingleObjectiveOptimizer.h</includes>
    <includes id="_multi_variate_normal_distribution_8h" name="MultiVariateNormalDistribution.h" local="no" import="no" module="no" objc="no">shark/Statistics/Distributions/MultiVariateNormalDistribution.h</includes>
    <includes id="_individual_8h" name="Individual.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Individual.h</includes>
    <includes id="_penalizing_evaluator_8h" name="PenalizingEvaluator.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Evaluation/PenalizingEvaluator.h</includes>
    <includes id="_elitist_selection_8h" name="ElitistSelection.h" local="no" import="no" module="no" objc="no">shark/Algorithms/DirectSearch/Operators/Selection/ElitistSelection.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractLineSearchOptimizer.h</name>
    <path>include/shark/Algorithms/GradientDescent/</path>
    <filename>_abstract_line_search_optimizer_8h.html</filename>
    <includes id="_abstract_single_objective_optimizer_8h" name="AbstractSingleObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractSingleObjectiveOptimizer.h</includes>
    <includes id="_line_search_8h" name="LineSearch.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/LineSearch.h</includes>
  </compound>
  <compound kind="file">
    <name>Adam.h</name>
    <path>include/shark/Algorithms/GradientDescent/</path>
    <filename>_adam_8h.html</filename>
    <includes id="_abstract_single_objective_optimizer_8h" name="AbstractSingleObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractSingleObjectiveOptimizer.h</includes>
  </compound>
  <compound kind="file">
    <name>BFGS.h</name>
    <path>include/shark/Algorithms/GradientDescent/</path>
    <filename>_b_f_g_s_8h.html</filename>
    <includes id="_abstract_line_search_optimizer_8h" name="AbstractLineSearchOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/AbstractLineSearchOptimizer.h</includes>
  </compound>
  <compound kind="file">
    <name>CG.h</name>
    <path>include/shark/Algorithms/GradientDescent/</path>
    <filename>_c_g_8h.html</filename>
    <includes id="_abstract_line_search_optimizer_8h" name="AbstractLineSearchOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/AbstractLineSearchOptimizer.h</includes>
  </compound>
  <compound kind="file">
    <name>LBFGS.h</name>
    <path>include/shark/Algorithms/GradientDescent/</path>
    <filename>_l_b_f_g_s_8h.html</filename>
    <includes id="_abstract_line_search_optimizer_8h" name="AbstractLineSearchOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/AbstractLineSearchOptimizer.h</includes>
  </compound>
  <compound kind="file">
    <name>LineSearch.h</name>
    <path>include/shark/Algorithms/GradientDescent/</path>
    <filename>_line_search_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_i_serializable_8h" name="ISerializable.h" local="no" import="no" module="no" objc="no">shark/Core/ISerializable.h</includes>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>Rprop.h</name>
    <path>include/shark/Algorithms/GradientDescent/</path>
    <filename>_rprop_8h.html</filename>
    <includes id="_abstract_single_objective_optimizer_8h" name="AbstractSingleObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractSingleObjectiveOptimizer.h</includes>
  </compound>
  <compound kind="file">
    <name>SteepestDescent.h</name>
    <path>include/shark/Algorithms/GradientDescent/</path>
    <filename>_steepest_descent_8h.html</filename>
    <includes id="_abstract_single_objective_optimizer_8h" name="AbstractSingleObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractSingleObjectiveOptimizer.h</includes>
  </compound>
  <compound kind="file">
    <name>TrustRegionNewton.h</name>
    <path>include/shark/Algorithms/GradientDescent/</path>
    <filename>_trust_region_newton_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_abstract_single_objective_optimizer_8h" name="AbstractSingleObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractSingleObjectiveOptimizer.h</includes>
  </compound>
  <compound kind="file">
    <name>JaakkolaHeuristic.h</name>
    <path>include/shark/Algorithms/</path>
    <filename>_jaakkola_heuristic_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_proxy_reference_traits_8h" name="ProxyReferenceTraits.h" local="no" import="no" module="no" objc="no">shark/Core/Traits/ProxyReferenceTraits.h</includes>
  </compound>
  <compound kind="file">
    <name>KMeans.h</name>
    <path>include/shark/Algorithms/</path>
    <filename>_k_means_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_centroids_8h" name="Centroids.h" local="no" import="no" module="no" objc="no">shark/Models/Clustering/Centroids.h</includes>
    <includes id="_r_b_f_layer_8h" name="RBFLayer.h" local="no" import="no" module="no" objc="no">shark/Models/RBFLayer.h</includes>
    <includes id="_kernel_expansion_8h" name="KernelExpansion.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelExpansion.h</includes>
    <includes id="_kernel_helpers_8h" name="KernelHelpers.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelHelpers.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractNearestNeighbors.h</name>
    <path>include/shark/Algorithms/NearestNeighbors/</path>
    <filename>_abstract_nearest_neighbors_8h.html</filename>
    <includes id="_key_value_pair_8h" name="KeyValuePair.h" local="no" import="no" module="no" objc="no">shark/Core/utility/KeyValuePair.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>SimpleNearestNeighbors.h</name>
    <path>include/shark/Algorithms/NearestNeighbors/</path>
    <filename>_simple_nearest_neighbors_8h.html</filename>
    <includes id="_abstract_nearest_neighbors_8h" name="AbstractNearestNeighbors.h" local="no" import="no" module="no" objc="no">shark/Algorithms/NearestNeighbors/AbstractNearestNeighbors.h</includes>
    <includes id="_abstract_metric_8h" name="AbstractMetric.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractMetric.h</includes>
    <includes id="_open_m_p_8h" name="OpenMP.h" local="no" import="no" module="no" objc="no">shark/Core/OpenMP.h</includes>
  </compound>
  <compound kind="file">
    <name>TreeNearestNeighbors.h</name>
    <path>include/shark/Algorithms/NearestNeighbors/</path>
    <filename>_tree_nearest_neighbors_8h.html</filename>
    <includes id="_binary_tree_8h" name="BinaryTree.h" local="no" import="no" module="no" objc="no">shark/Models/Trees/BinaryTree.h</includes>
    <includes id="_abstract_nearest_neighbors_8h" name="AbstractNearestNeighbors.h" local="no" import="no" module="no" objc="no">shark/Algorithms/NearestNeighbors/AbstractNearestNeighbors.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
  </compound>
  <compound kind="file">
    <name>Pegasos.h</name>
    <path>include/shark/Algorithms/</path>
    <filename>_pegasos_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>BoxBasedShrinkingStrategy.h</name>
    <path>include/shark/Algorithms/QP/</path>
    <filename>_box_based_shrinking_strategy_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>BoxConstrainedProblems.h</name>
    <path>include/shark/Algorithms/QP/</path>
    <filename>_box_constrained_problems_8h.html</filename>
    <includes id="_qp_solver_8h" name="QpSolver.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/QpSolver.h</includes>
    <includes id="_box_based_shrinking_strategy_8h" name="BoxBasedShrinkingStrategy.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/BoxBasedShrinkingStrategy.h</includes>
  </compound>
  <compound kind="file">
    <name>QpBoxLinear.h</name>
    <path>include/shark/Algorithms/QP/</path>
    <filename>_qp_box_linear_8h.html</filename>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
    <includes id="_quadratic_program_8h" name="QuadraticProgram.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/QuadraticProgram.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>QpMcBoxDecomp.h</name>
    <path>include/shark/Algorithms/QP/</path>
    <filename>_qp_mc_box_decomp_8h.html</filename>
    <includes id="_qp_solver_8h" name="QpSolver.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/QpSolver.h</includes>
    <includes id="_qp_sparse_array_8h" name="QpSparseArray.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/QpSparseArray.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>QpMcLinear.h</name>
    <path>include/shark/Algorithms/QP/</path>
    <filename>_qp_mc_linear_8h.html</filename>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
    <includes id="_quadratic_program_8h" name="QuadraticProgram.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/QuadraticProgram.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>QpMcSimplexDecomp.h</name>
    <path>include/shark/Algorithms/QP/</path>
    <filename>_qp_mc_simplex_decomp_8h.html</filename>
    <includes id="_qp_solver_8h" name="QpSolver.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/QpSolver.h</includes>
    <includes id="_qp_sparse_array_8h" name="QpSparseArray.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/QpSparseArray.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>QpSolver.h</name>
    <path>include/shark/Algorithms/QP/</path>
    <filename>_qp_solver_8h.html</filename>
    <includes id="_timer_8h" name="Timer.h" local="no" import="no" module="no" objc="no">shark/Core/Timer.h</includes>
    <includes id="_quadratic_program_8h" name="QuadraticProgram.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/QuadraticProgram.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>QpSparseArray.h</name>
    <path>include/shark/Algorithms/QP/</path>
    <filename>_qp_sparse_array_8h.html</filename>
    <includes id="_quadratic_program_8h" name="QuadraticProgram.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/QuadraticProgram.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>QuadraticProgram.h</name>
    <path>include/shark/Algorithms/QP/</path>
    <filename>_quadratic_program_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>SvmProblems.h</name>
    <path>include/shark/Algorithms/QP/</path>
    <filename>_svm_problems_8h.html</filename>
    <includes id="_box_constrained_problems_8h" name="BoxConstrainedProblems.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/BoxConstrainedProblems.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractStoppingCriterion.h</name>
    <path>include/shark/Algorithms/StoppingCriteria/</path>
    <filename>_abstract_stopping_criterion_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>GeneralizationLoss.h</name>
    <path>include/shark/Algorithms/StoppingCriteria/</path>
    <filename>_generalization_loss_8h.html</filename>
    <includes id="_abstract_stopping_criterion_8h" name="AbstractStoppingCriterion.h" local="yes" import="no" module="no" objc="no">AbstractStoppingCriterion.h</includes>
    <includes id="_result_sets_8h" name="ResultSets.h" local="no" import="no" module="no" objc="no">shark/Core/ResultSets.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>GeneralizationQuotient.h</name>
    <path>include/shark/Algorithms/StoppingCriteria/</path>
    <filename>_generalization_quotient_8h.html</filename>
    <includes id="_abstract_stopping_criterion_8h" name="AbstractStoppingCriterion.h" local="yes" import="no" module="no" objc="no">AbstractStoppingCriterion.h</includes>
    <includes id="_result_sets_8h" name="ResultSets.h" local="no" import="no" module="no" objc="no">shark/Core/ResultSets.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>MaxIterations.h</name>
    <path>include/shark/Algorithms/StoppingCriteria/</path>
    <filename>_max_iterations_8h.html</filename>
    <includes id="_abstract_stopping_criterion_8h" name="AbstractStoppingCriterion.h" local="yes" import="no" module="no" objc="no">AbstractStoppingCriterion.h</includes>
    <includes id="_result_sets_8h" name="ResultSets.h" local="no" import="no" module="no" objc="no">shark/Core/ResultSets.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>TrainingError.h</name>
    <path>include/shark/Algorithms/StoppingCriteria/</path>
    <filename>_training_error_8h.html</filename>
    <includes id="_abstract_stopping_criterion_8h" name="AbstractStoppingCriterion.h" local="yes" import="no" module="no" objc="no">AbstractStoppingCriterion.h</includes>
    <includes id="_result_sets_8h" name="ResultSets.h" local="no" import="no" module="no" objc="no">shark/Core/ResultSets.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>TrainingProgress.h</name>
    <path>include/shark/Algorithms/StoppingCriteria/</path>
    <filename>_training_progress_8h.html</filename>
    <includes id="_abstract_stopping_criterion_8h" name="AbstractStoppingCriterion.h" local="yes" import="no" module="no" objc="no">AbstractStoppingCriterion.h</includes>
    <includes id="_result_sets_8h" name="ResultSets.h" local="no" import="no" module="no" objc="no">shark/Core/ResultSets.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>ValidatedStoppingCriterion.h</name>
    <path>include/shark/Algorithms/StoppingCriteria/</path>
    <filename>_validated_stopping_criterion_8h.html</filename>
    <includes id="_abstract_stopping_criterion_8h" name="AbstractStoppingCriterion.h" local="yes" import="no" module="no" objc="no">AbstractStoppingCriterion.h</includes>
    <includes id="_result_sets_8h" name="ResultSets.h" local="no" import="no" module="no" objc="no">shark/Core/ResultSets.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractSvmTrainer.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_abstract_svm_trainer_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_kernel_expansion_8h" name="KernelExpansion.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelExpansion.h</includes>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_abstract_trainer_8h" name="AbstractTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractTrainer.h</includes>
    <includes id="_quadratic_program_8h" name="QuadraticProgram.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/QuadraticProgram.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractTrainer.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_abstract_trainer_8h.html</filename>
    <includes id="_i_nameable_8h" name="INameable.h" local="no" import="no" module="no" objc="no">shark/Core/INameable.h</includes>
    <includes id="_i_serializable_8h" name="ISerializable.h" local="no" import="no" module="no" objc="no">shark/Core/ISerializable.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractWeightedTrainer.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_abstract_weighted_trainer_8h.html</filename>
    <includes id="_weighted_dataset_8h" name="WeightedDataset.h" local="no" import="no" module="no" objc="no">shark/Data/WeightedDataset.h</includes>
    <includes id="_abstract_trainer_8h" name="AbstractTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractTrainer.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractBudgetMaintenanceStrategy.h</name>
    <path>include/shark/Algorithms/Trainers/Budgeted/</path>
    <filename>_abstract_budget_maintenance_strategy_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
    <includes id="_kernel_expansion_8h" name="KernelExpansion.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelExpansion.h</includes>
  </compound>
  <compound kind="file">
    <name>KernelBudgetedSGDTrainer.h</name>
    <path>include/shark/Algorithms/Trainers/Budgeted/</path>
    <filename>_kernel_budgeted_s_g_d_trainer_8h.html</filename>
    <includes id="_abstract_budget_maintenance_strategy_8h" name="AbstractBudgetMaintenanceStrategy.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/Budgeted/AbstractBudgetMaintenanceStrategy.h</includes>
    <includes id="_abstract_trainer_8h" name="AbstractTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractTrainer.h</includes>
    <includes id="_k_means_8h" name="KMeans.h" local="no" import="no" module="no" objc="no">shark/Algorithms/KMeans.h</includes>
    <includes id="_i_parameterizable_8h" name="IParameterizable.h" local="no" import="no" module="no" objc="no">shark/Core/IParameterizable.h</includes>
    <includes id="_kernel_matrix_8h" name="KernelMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/KernelMatrix.h</includes>
    <includes id="_partly_precomputed_matrix_8h" name="PartlyPrecomputedMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/PartlyPrecomputedMatrix.h</includes>
    <includes id="_kernel_expansion_8h" name="KernelExpansion.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelExpansion.h</includes>
    <includes id="_kernel_helpers_8h" name="KernelHelpers.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelHelpers.h</includes>
    <includes id="_abstract_loss_8h" name="AbstractLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/AbstractLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>MergeBudgetMaintenanceStrategy.h</name>
    <path>include/shark/Algorithms/Trainers/Budgeted/</path>
    <filename>_merge_budget_maintenance_strategy_8h.html</filename>
    <includes id="_line_search_8h" name="LineSearch.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/LineSearch.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
    <includes id="_abstract_budget_maintenance_strategy_8h" name="AbstractBudgetMaintenanceStrategy.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/Budgeted/AbstractBudgetMaintenanceStrategy.h</includes>
  </compound>
  <compound kind="file">
    <name>ProjectBudgetMaintenanceStrategy.h</name>
    <path>include/shark/Algorithms/Trainers/Budgeted/</path>
    <filename>_project_budget_maintenance_strategy_8h.html</filename>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
  </compound>
  <compound kind="file">
    <name>RemoveBudgetMaintenanceStrategy.h</name>
    <path>include/shark/Algorithms/Trainers/Budgeted/</path>
    <filename>_remove_budget_maintenance_strategy_8h.html</filename>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
    <includes id="_abstract_budget_maintenance_strategy_8h" name="AbstractBudgetMaintenanceStrategy.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/Budgeted/AbstractBudgetMaintenanceStrategy.h</includes>
  </compound>
  <compound kind="file">
    <name>CSvmTrainer.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_c_svm_trainer_8h.html</filename>
    <includes id="_abstract_svm_trainer_8h" name="AbstractSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractSvmTrainer.h</includes>
    <includes id="_abstract_weighted_trainer_8h" name="AbstractWeightedTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractWeightedTrainer.h</includes>
    <includes id="_box_constrained_problems_8h" name="BoxConstrainedProblems.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/BoxConstrainedProblems.h</includes>
    <includes id="_svm_problems_8h" name="SvmProblems.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/SvmProblems.h</includes>
    <includes id="_qp_box_linear_8h" name="QpBoxLinear.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/QpBoxLinear.h</includes>
    <includes id="_cached_matrix_8h" name="CachedMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/CachedMatrix.h</includes>
    <includes id="_gaussian_kernel_matrix_8h" name="GaussianKernelMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/GaussianKernelMatrix.h</includes>
    <includes id="_kernel_matrix_8h" name="KernelMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/KernelMatrix.h</includes>
    <includes id="_precomputed_matrix_8h" name="PrecomputedMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/PrecomputedMatrix.h</includes>
    <includes id="_regularized_kernel_matrix_8h" name="RegularizedKernelMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/RegularizedKernelMatrix.h</includes>
    <includes id="_gaussian_rbf_kernel_8h" name="GaussianRbfKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/GaussianRbfKernel.h</includes>
    <includes id="_qp_mc_simplex_decomp_8h" name="QpMcSimplexDecomp.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/QpMcSimplexDecomp.h</includes>
    <includes id="_qp_mc_box_decomp_8h" name="QpMcBoxDecomp.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/QpMcBoxDecomp.h</includes>
    <includes id="_qp_mc_linear_8h" name="QpMcLinear.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/QpMcLinear.h</includes>
  </compound>
  <compound kind="file">
    <name>EpsilonSvmTrainer.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_epsilon_svm_trainer_8h.html</filename>
    <includes id="_abstract_svm_trainer_8h" name="AbstractSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractSvmTrainer.h</includes>
    <includes id="_svm_problems_8h" name="SvmProblems.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/SvmProblems.h</includes>
    <includes id="_block_matrix2x2_8h" name="BlockMatrix2x2.h" local="no" import="no" module="no" objc="no">shark/LinAlg/BlockMatrix2x2.h</includes>
    <includes id="_cached_matrix_8h" name="CachedMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/CachedMatrix.h</includes>
    <includes id="_kernel_matrix_8h" name="KernelMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/KernelMatrix.h</includes>
    <includes id="_precomputed_matrix_8h" name="PrecomputedMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/PrecomputedMatrix.h</includes>
  </compound>
  <compound kind="file">
    <name>FisherLDA.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_fisher_l_d_a_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_abstract_trainer_8h" name="AbstractTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractTrainer.h</includes>
  </compound>
  <compound kind="file">
    <name>KernelMeanClassifier.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_kernel_mean_classifier_8h.html</filename>
    <includes id="_kernel_expansion_8h" name="KernelExpansion.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelExpansion.h</includes>
    <includes id="_abstract_weighted_trainer_8h" name="AbstractWeightedTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractWeightedTrainer.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>KernelSGDTrainer.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_kernel_s_g_d_trainer_8h.html</filename>
    <includes id="_abstract_trainer_8h" name="AbstractTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractTrainer.h</includes>
    <includes id="_i_parameterizable_8h" name="IParameterizable.h" local="no" import="no" module="no" objc="no">shark/Core/IParameterizable.h</includes>
    <includes id="_kernel_matrix_8h" name="KernelMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/KernelMatrix.h</includes>
    <includes id="_partly_precomputed_matrix_8h" name="PartlyPrecomputedMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/PartlyPrecomputedMatrix.h</includes>
    <includes id="_kernel_expansion_8h" name="KernelExpansion.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelExpansion.h</includes>
    <includes id="_kernel_helpers_8h" name="KernelHelpers.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelHelpers.h</includes>
    <includes id="_abstract_loss_8h" name="AbstractLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/AbstractLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>LassoRegression.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_lasso_regression_8h.html</filename>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_abstract_trainer_8h" name="AbstractTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractTrainer.h</includes>
  </compound>
  <compound kind="file">
    <name>LDA.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_l_d_a_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_i_parameterizable_8h" name="IParameterizable.h" local="no" import="no" module="no" objc="no">shark/Core/IParameterizable.h</includes>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_abstract_weighted_trainer_8h" name="AbstractWeightedTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractWeightedTrainer.h</includes>
  </compound>
  <compound kind="file">
    <name>LinearRegression.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_linear_regression_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_i_parameterizable_8h" name="IParameterizable.h" local="no" import="no" module="no" objc="no">shark/Core/IParameterizable.h</includes>
    <includes id="_abstract_trainer_8h" name="AbstractTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractTrainer.h</includes>
  </compound>
  <compound kind="file">
    <name>LinearSAGTrainer.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_linear_s_a_g_trainer_8h.html</filename>
    <includes id="_abstract_weighted_trainer_8h" name="AbstractWeightedTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractWeightedTrainer.h</includes>
    <includes id="_i_parameterizable_8h" name="IParameterizable.h" local="no" import="no" module="no" objc="no">shark/Core/IParameterizable.h</includes>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_abstract_loss_8h" name="AbstractLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/AbstractLoss.h</includes>
    <includes id="_multi_nomial_distribution_8h" name="MultiNomialDistribution.h" local="no" import="no" module="no" objc="no">shark/Statistics/Distributions/MultiNomialDistribution.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
  </compound>
  <compound kind="file">
    <name>LogisticRegression.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_logistic_regression_8h.html</filename>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_abstract_weighted_trainer_8h" name="AbstractWeightedTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractWeightedTrainer.h</includes>
  </compound>
  <compound kind="file">
    <name>MissingFeatureSvmTrainer.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_missing_feature_svm_trainer_8h.html</filename>
    <includes id="_abstract_svm_trainer_8h" name="AbstractSvmTrainer.h" local="yes" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractSvmTrainer.h</includes>
    <includes id="_eval_skip_missing_features_8h" name="EvalSkipMissingFeatures.h" local="yes" import="no" module="no" objc="no">shark/Models/Kernels/EvalSkipMissingFeatures.h</includes>
    <includes id="_kernel_expansion_8h" name="KernelExpansion.h" local="yes" import="no" module="no" objc="no">shark/Models/Kernels/KernelExpansion.h</includes>
    <includes id="_missing_features_kernel_expansion_8h" name="MissingFeaturesKernelExpansion.h" local="yes" import="no" module="no" objc="no">shark/Models/Kernels/MissingFeaturesKernelExpansion.h</includes>
    <includes id="_box_constrained_problems_8h" name="BoxConstrainedProblems.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/BoxConstrainedProblems.h</includes>
    <includes id="_svm_problems_8h" name="SvmProblems.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/SvmProblems.h</includes>
    <includes id="_cached_matrix_8h" name="CachedMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/CachedMatrix.h</includes>
    <includes id="_example_modified_kernel_matrix_8h" name="ExampleModifiedKernelMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/ExampleModifiedKernelMatrix.h</includes>
  </compound>
  <compound kind="file">
    <name>NormalizeComponentsUnitInterval.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_normalize_components_unit_interval_8h.html</filename>
    <includes id="_normalizer_8h" name="Normalizer.h" local="no" import="no" module="no" objc="no">shark/Models/Normalizer.h</includes>
    <includes id="_abstract_trainer_8h" name="AbstractTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractTrainer.h</includes>
  </compound>
  <compound kind="file">
    <name>NormalizeComponentsUnitVariance.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_normalize_components_unit_variance_8h.html</filename>
    <includes id="_normalizer_8h" name="Normalizer.h" local="no" import="no" module="no" objc="no">shark/Models/Normalizer.h</includes>
    <includes id="_abstract_trainer_8h" name="AbstractTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractTrainer.h</includes>
    <includes id="_data_2_statistics_8h" name="Statistics.h" local="no" import="no" module="no" objc="no">shark/Data/Statistics.h</includes>
  </compound>
  <compound kind="file">
    <name>NormalizeComponentsWhitening.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_normalize_components_whitening_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_abstract_trainer_8h" name="AbstractTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractTrainer.h</includes>
  </compound>
  <compound kind="file">
    <name>NormalizeComponentsZCA.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_normalize_components_z_c_a_8h.html</filename>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_abstract_trainer_8h" name="AbstractTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractTrainer.h</includes>
    <includes id="_data_2_statistics_8h" name="Statistics.h" local="no" import="no" module="no" objc="no">shark/Data/Statistics.h</includes>
  </compound>
  <compound kind="file">
    <name>NormalizeKernelUnitVariance.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_normalize_kernel_unit_variance_8h.html</filename>
    <includes id="_scaled_kernel_8h" name="ScaledKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/ScaledKernel.h</includes>
    <includes id="_abstract_trainer_8h" name="AbstractTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractTrainer.h</includes>
  </compound>
  <compound kind="file">
    <name>OneClassSvmTrainer.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_one_class_svm_trainer_8h.html</filename>
    <includes id="_abstract_svm_trainer_8h" name="AbstractSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractSvmTrainer.h</includes>
    <includes id="_svm_problems_8h" name="SvmProblems.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/SvmProblems.h</includes>
    <includes id="_cached_matrix_8h" name="CachedMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/CachedMatrix.h</includes>
    <includes id="_kernel_matrix_8h" name="KernelMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/KernelMatrix.h</includes>
    <includes id="_precomputed_matrix_8h" name="PrecomputedMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/PrecomputedMatrix.h</includes>
  </compound>
  <compound kind="file">
    <name>OptimizationTrainer.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_optimization_trainer_8h.html</filename>
    <includes id="_abstract_single_objective_optimizer_8h" name="AbstractSingleObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractSingleObjectiveOptimizer.h</includes>
    <includes id="_result_sets_8h" name="ResultSets.h" local="no" import="no" module="no" objc="no">shark/Core/ResultSets.h</includes>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
    <includes id="_error_function_8h" name="ErrorFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/ErrorFunction.h</includes>
    <includes id="_abstract_trainer_8h" name="AbstractTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractTrainer.h</includes>
    <includes id="_abstract_stopping_criterion_8h" name="AbstractStoppingCriterion.h" local="no" import="no" module="no" objc="no">shark/Algorithms/StoppingCriteria/AbstractStoppingCriterion.h</includes>
  </compound>
  <compound kind="file">
    <name>PCA.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_p_c_a_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_linear_model_8h" name="LinearModel.h" local="no" import="no" module="no" objc="no">shark/Models/LinearModel.h</includes>
    <includes id="_abstract_trainer_8h" name="AbstractTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractTrainer.h</includes>
  </compound>
  <compound kind="file">
    <name>Perceptron.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_perceptron_8h.html</filename>
    <includes id="_kernel_expansion_8h" name="KernelExpansion.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelExpansion.h</includes>
    <includes id="_abstract_trainer_8h" name="AbstractTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractTrainer.h</includes>
  </compound>
  <compound kind="file">
    <name>RankingSvmTrainer.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_ranking_svm_trainer_8h.html</filename>
    <includes id="_abstract_svm_trainer_8h" name="AbstractSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractSvmTrainer.h</includes>
    <includes id="_box_constrained_problems_8h" name="BoxConstrainedProblems.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/BoxConstrainedProblems.h</includes>
    <includes id="_svm_problems_8h" name="SvmProblems.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/SvmProblems.h</includes>
    <includes id="_qp_solver_8h" name="QpSolver.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/QpSolver.h</includes>
    <includes id="_difference_kernel_matrix_8h" name="DifferenceKernelMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/DifferenceKernelMatrix.h</includes>
    <includes id="_cached_matrix_8h" name="CachedMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/CachedMatrix.h</includes>
    <includes id="_precomputed_matrix_8h" name="PrecomputedMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/PrecomputedMatrix.h</includes>
  </compound>
  <compound kind="file">
    <name>RegularizationNetworkTrainer.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_regularization_network_trainer_8h.html</filename>
    <includes id="_abstract_svm_trainer_8h" name="AbstractSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractSvmTrainer.h</includes>
    <includes id="_kernel_helpers_8h" name="KernelHelpers.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelHelpers.h</includes>
  </compound>
  <compound kind="file">
    <name>RFTrainer.h</name>
    <path>include/shark/Algorithms/Trainers/</path>
    <filename>_r_f_trainer_8h.html</filename>
    <includes id="_abstract_weighted_trainer_8h" name="AbstractWeightedTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractWeightedTrainer.h</includes>
    <includes id="_r_f_classifier_8h" name="RFClassifier.h" local="no" import="no" module="no" objc="no">shark/Models/Trees/RFClassifier.h</includes>
  </compound>
  <compound kind="file">
    <name>DLLSupport.h</name>
    <path>include/shark/Core/</path>
    <filename>_d_l_l_support_8h.html</filename>
    <includes id="_shark_8h" name="Shark.h" local="no" import="no" module="no" objc="no">shark/Core/Shark.h</includes>
  </compound>
  <compound kind="file">
    <name>Exception.h</name>
    <path>include/shark/Core/</path>
    <filename>_exception_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Flags.h</name>
    <path>include/shark/Core/</path>
    <filename>_flags_8h.html</filename>
    <includes id="_exception_8h" name="Exception.h" local="no" import="no" module="no" objc="no">shark/Core/Exception.h</includes>
    <includes id="_i_serializable_8h" name="ISerializable.h" local="no" import="no" module="no" objc="no">shark/Core/ISerializable.h</includes>
  </compound>
  <compound kind="file">
    <name>Pooling.h</name>
    <path>include/shark/Core/Images/CPU/</path>
    <filename>_c_p_u_2_pooling_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_exception_8h" name="Exception.h" local="no" import="no" module="no" objc="no">shark/Core/Exception.h</includes>
    <includes id="_shape_8h" name="Shape.h" local="no" import="no" module="no" objc="no">shark/Core/Shape.h</includes>
  </compound>
  <compound kind="file">
    <name>Pooling.h</name>
    <path>include/shark/Core/Images/OpenCL/</path>
    <filename>_open_c_l_2_pooling_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_exception_8h" name="Exception.h" local="no" import="no" module="no" objc="no">shark/Core/Exception.h</includes>
    <includes id="_shape_8h" name="Shape.h" local="no" import="no" module="no" objc="no">shark/Core/Shape.h</includes>
  </compound>
  <compound kind="file">
    <name>Reorder.h</name>
    <path>include/shark/Core/Images/CPU/</path>
    <filename>_c_p_u_2_reorder_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_shape_8h" name="Shape.h" local="no" import="no" module="no" objc="no">shark/Core/Shape.h</includes>
  </compound>
  <compound kind="file">
    <name>Reorder.h</name>
    <path>include/shark/Core/Images/OpenCL/</path>
    <filename>_open_c_l_2_reorder_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_exception_8h" name="Exception.h" local="no" import="no" module="no" objc="no">shark/Core/Exception.h</includes>
    <includes id="_shape_8h" name="Shape.h" local="no" import="no" module="no" objc="no">shark/Core/Shape.h</includes>
  </compound>
  <compound kind="file">
    <name>Reorder.h</name>
    <path>include/shark/Core/Images/</path>
    <filename>_reorder_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_c_p_u_2_reorder_8h" name="Reorder.h" local="yes" import="no" module="no" objc="no">CPU/Reorder.h</includes>
  </compound>
  <compound kind="file">
    <name>SplineInterpolation2D.h</name>
    <path>include/shark/Core/Images/CPU/</path>
    <filename>_c_p_u_2_spline_interpolation2_d_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_shape_8h" name="Shape.h" local="no" import="no" module="no" objc="no">shark/Core/Shape.h</includes>
    <includes id="_open_m_p_8h" name="OpenMP.h" local="no" import="no" module="no" objc="no">shark/Core/OpenMP.h</includes>
  </compound>
  <compound kind="file">
    <name>SplineInterpolation2D.h</name>
    <path>include/shark/Core/Images/OpenCL/</path>
    <filename>_open_c_l_2_spline_interpolation2_d_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_shape_8h" name="Shape.h" local="no" import="no" module="no" objc="no">shark/Core/Shape.h</includes>
  </compound>
  <compound kind="file">
    <name>Interpolation.h</name>
    <path>include/shark/Core/Images/</path>
    <filename>_interpolation_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_shark_8h" name="Shark.h" local="no" import="no" module="no" objc="no">shark/Core/Shark.h</includes>
    <includes id="_c_p_u_2_spline_interpolation2_d_8h" name="SplineInterpolation2D.h" local="yes" import="no" module="no" objc="no">CPU/SplineInterpolation2D.h</includes>
  </compound>
  <compound kind="file">
    <name>Padding.h</name>
    <path>include/shark/Core/Images/</path>
    <filename>_padding_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>INameable.h</name>
    <path>include/shark/Core/</path>
    <filename>_i_nameable_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>IParameterizable.h</name>
    <path>include/shark/Core/</path>
    <filename>_i_parameterizable_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>ISerializable.h</name>
    <path>include/shark/Core/</path>
    <filename>_i_serializable_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Math.h</name>
    <path>include/shark/Core/</path>
    <filename>_math_8h.html</filename>
    <includes id="_exception_8h" name="Exception.h" local="no" import="no" module="no" objc="no">shark/Core/Exception.h</includes>
  </compound>
  <compound kind="file">
    <name>OpenMP.h</name>
    <path>include/shark/Core/</path>
    <filename>_open_m_p_8h.html</filename>
    <includes id="_shark_8h" name="Shark.h" local="no" import="no" module="no" objc="no">shark/Core/Shark.h</includes>
  </compound>
  <compound kind="file">
    <name>Random.h</name>
    <path>include/shark/Core/</path>
    <filename>_random_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
  </compound>
  <compound kind="file">
    <name>ResultSets.h</name>
    <path>include/shark/Core/</path>
    <filename>_result_sets_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Shape.h</name>
    <path>include/shark/Core/</path>
    <filename>_shape_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Shark.h</name>
    <path>include/shark/Core/</path>
    <filename>_shark_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>State.h</name>
    <path>include/shark/Core/</path>
    <filename>_state_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Timer.h</name>
    <path>include/shark/Core/</path>
    <filename>_timer_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>ProxyReferenceTraits.h</name>
    <path>include/shark/Core/Traits/</path>
    <filename>_proxy_reference_traits_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>CanBeCalled.h</name>
    <path>include/shark/Core/utility/</path>
    <filename>_can_be_called_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>functional.h</name>
    <path>include/shark/Core/utility/</path>
    <filename>functional_8h.html</filename>
    <includes id="_iterators_8h" name="Iterators.h" local="no" import="no" module="no" objc="no">shark/Core/utility/Iterators.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>Iterators.h</name>
    <path>include/shark/Core/utility/</path>
    <filename>_iterators_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>KeyValuePair.h</name>
    <path>include/shark/Core/utility/</path>
    <filename>_key_value_pair_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>BatchInterface.h</name>
    <path>include/shark/Data/</path>
    <filename>_batch_interface_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_iterators_8h" name="Iterators.h" local="no" import="no" module="no" objc="no">shark/Core/utility/Iterators.h</includes>
  </compound>
  <compound kind="file">
    <name>BatchInterfaceAdaptStruct.h</name>
    <path>include/shark/Data/</path>
    <filename>_batch_interface_adapt_struct_8h.html</filename>
    <includes id="_batch_interface_8h" name="BatchInterface.h" local="no" import="no" module="no" objc="no">shark/Data/BatchInterface.h</includes>
  </compound>
  <compound kind="file">
    <name>Csv.h</name>
    <path>include/shark/Data/</path>
    <filename>_csv_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>CVDatasetTools.h</name>
    <path>include/shark/Data/</path>
    <filename>_c_v_dataset_tools_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
  </compound>
  <compound kind="file">
    <name>DataDistribution.h</name>
    <path>include/shark/Data/</path>
    <filename>_data_distribution_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_multi_variate_normal_distribution_8h" name="MultiVariateNormalDistribution.h" local="no" import="no" module="no" objc="no">shark/Statistics/Distributions/MultiVariateNormalDistribution.h</includes>
  </compound>
  <compound kind="file">
    <name>Dataset.h</name>
    <path>include/shark/Data/</path>
    <filename>_dataset_8h.html</filename>
    <includes id="_exception_8h" name="Exception.h" local="no" import="no" module="no" objc="no">shark/Core/Exception.h</includes>
    <includes id="_open_m_p_8h" name="OpenMP.h" local="no" import="no" module="no" objc="no">shark/Core/OpenMP.h</includes>
    <includes id="functional_8h" name="functional.h" local="no" import="no" module="no" objc="no">shark/Core/utility/functional.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_shape_8h" name="Shape.h" local="no" import="no" module="no" objc="no">shark/Core/Shape.h</includes>
  </compound>
  <compound kind="file">
    <name>DataView.h</name>
    <path>include/shark/Data/</path>
    <filename>_data_view_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="functional_8h" name="functional.h" local="no" import="no" module="no" objc="no">shark/Core/utility/functional.h</includes>
  </compound>
  <compound kind="file">
    <name>DeviceSupport.h</name>
    <path>include/shark/Data/</path>
    <filename>_device_support_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="device__copy_8hpp" name="device_copy.hpp" local="no" import="no" module="no" objc="no">shark/LinAlg/BLAS/device_copy.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Download.h</name>
    <path>include/shark/Data/</path>
    <filename>_download_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_sparse_data_8h" name="SparseData.h" local="no" import="no" module="no" objc="no">shark/Data/SparseData.h</includes>
    <includes id="_csv_8h" name="Csv.h" local="no" import="no" module="no" objc="no">shark/Data/Csv.h</includes>
  </compound>
  <compound kind="file">
    <name>ExportKernelMatrix.h</name>
    <path>include/shark/Data/</path>
    <filename>_export_kernel_matrix_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
    <includes id="_scaled_kernel_8h" name="ScaledKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/ScaledKernel.h</includes>
    <includes id="_normalize_kernel_unit_variance_8h" name="NormalizeKernelUnitVariance.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/NormalizeKernelUnitVariance.h</includes>
  </compound>
  <compound kind="file">
    <name>LabelOrder.h</name>
    <path>include/shark/Data/</path>
    <filename>_label_order_8h.html</filename>
    <includes id="_i_nameable_8h" name="INameable.h" local="no" import="no" module="no" objc="no">shark/Core/INameable.h</includes>
    <includes id="_i_serializable_8h" name="ISerializable.h" local="no" import="no" module="no" objc="no">shark/Core/ISerializable.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>Libsvm.h</name>
    <path>include/shark/Data/</path>
    <filename>_libsvm_8h.html</filename>
    <includes id="_sparse_data_8h" name="SparseData.h" local="no" import="no" module="no" objc="no">shark/Data/SparseData.h</includes>
  </compound>
  <compound kind="file">
    <name>Pgm.h</name>
    <path>include/shark/Data/</path>
    <filename>_pgm_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>SparseData.h</name>
    <path>include/shark/Data/</path>
    <filename>_sparse_data_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_key_value_pair_8h" name="KeyValuePair.h" local="no" import="no" module="no" objc="no">shark/Core/utility/KeyValuePair.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>WeightedDataset.h</name>
    <path>include/shark/Data/</path>
    <filename>_weighted_dataset_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>Base.h</name>
    <path>include/shark/LinAlg/</path>
    <filename>_base_8h.html</filename>
    <includes id="_shark_8h" name="Shark.h" local="no" import="no" module="no" objc="no">shark/Core/Shark.h</includes>
    <includes id="remora_8hpp" name="remora.hpp" local="no" import="no" module="no" objc="no">shark/LinAlg/BLAS/remora.hpp</includes>
    <includes id="_exception_8h" name="Exception.h" local="no" import="no" module="no" objc="no">shark/Core/Exception.h</includes>
    <includes id="_metrics_8h" name="Metrics.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Metrics.h</includes>
  </compound>
  <compound kind="file">
    <name>assignment.hpp</name>
    <path>include/shark/LinAlg/BLAS/</path>
    <filename>assignment_8hpp.html</filename>
    <includes id="matrix__assign_8hpp" name="matrix_assign.hpp" local="yes" import="no" module="no" objc="no">kernels/matrix_assign.hpp</includes>
    <includes id="vector__assign_8hpp" name="vector_assign.hpp" local="yes" import="no" module="no" objc="no">kernels/vector_assign.hpp</includes>
  </compound>
  <compound kind="file">
    <name>iterator.hpp</name>
    <path>include/shark/LinAlg/BLAS/cpu/</path>
    <filename>iterator_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>sparse_matrix.hpp</name>
    <path>include/shark/LinAlg/BLAS/cpu/</path>
    <filename>sparse__matrix_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>decompositions.hpp</name>
    <path>include/shark/LinAlg/BLAS/</path>
    <filename>decompositions_8hpp.html</filename>
    <includes id="trsm_8hpp" name="trsm.hpp" local="yes" import="no" module="no" objc="no">kernels/trsm.hpp</includes>
    <includes id="trsv_8hpp" name="trsv.hpp" local="yes" import="no" module="no" objc="no">kernels/trsv.hpp</includes>
    <includes id="potrf_8hpp" name="potrf.hpp" local="yes" import="no" module="no" objc="no">kernels/potrf.hpp</includes>
    <includes id="pstrf_8hpp" name="pstrf.hpp" local="yes" import="no" module="no" objc="no">kernels/pstrf.hpp</includes>
    <includes id="getrf_8hpp" name="getrf.hpp" local="yes" import="no" module="no" objc="no">kernels/getrf.hpp</includes>
    <includes id="syev_8hpp" name="syev.hpp" local="yes" import="no" module="no" objc="no">kernels/syev.hpp</includes>
    <includes id="assignment_8hpp" name="assignment.hpp" local="yes" import="no" module="no" objc="no">assignment.hpp</includes>
    <includes id="permutation_8hpp" name="permutation.hpp" local="yes" import="no" module="no" objc="no">permutation.hpp</includes>
    <includes id="matrix__expression_8hpp" name="matrix_expression.hpp" local="yes" import="no" module="no" objc="no">matrix_expression.hpp</includes>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">proxy_expressions.hpp</includes>
    <includes id="vector__expression_8hpp" name="vector_expression.hpp" local="yes" import="no" module="no" objc="no">vector_expression.hpp</includes>
  </compound>
  <compound kind="file">
    <name>device_copy.hpp</name>
    <path>include/shark/LinAlg/BLAS/</path>
    <filename>device__copy_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>expression_types.hpp</name>
    <path>include/shark/LinAlg/BLAS/</path>
    <filename>expression__types_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>copy.hpp</name>
    <path>include/shark/LinAlg/BLAS/gpu/</path>
    <filename>copy_8hpp.html</filename>
    <includes id="dense_8hpp" name="dense.hpp" local="yes" import="no" module="no" objc="no">../dense.hpp</includes>
    <includes id="assignment_8hpp" name="assignment.hpp" local="yes" import="no" module="no" objc="no">../assignment.hpp</includes>
  </compound>
  <compound kind="file">
    <name>dense.hpp</name>
    <path>include/shark/LinAlg/BLAS/cpu/</path>
    <filename>cpu_2dense_8hpp.html</filename>
    <includes id="iterator_8hpp" name="iterator.hpp" local="yes" import="no" module="no" objc="no">iterator.hpp</includes>
    <includes id="assignment_8hpp" name="assignment.hpp" local="yes" import="no" module="no" objc="no">../assignment.hpp</includes>
  </compound>
  <compound kind="file">
    <name>dense.hpp</name>
    <path>include/shark/LinAlg/BLAS/</path>
    <filename>dense_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">expression_types.hpp</includes>
    <includes id="cpu_2dense_8hpp" name="dense.hpp" local="yes" import="no" module="no" objc="no">cpu/dense.hpp</includes>
  </compound>
  <compound kind="file">
    <name>dense.hpp</name>
    <path>include/shark/LinAlg/BLAS/gpu/</path>
    <filename>gpu_2dense_8hpp.html</filename>
    <includes id="assignment_8hpp" name="assignment.hpp" local="yes" import="no" module="no" objc="no">../assignment.hpp</includes>
  </compound>
  <compound kind="file">
    <name>traits.hpp</name>
    <path>include/shark/LinAlg/BLAS/cpu/</path>
    <filename>cpu_2traits_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../expression_types.hpp</includes>
    <includes id="iterator_8hpp" name="iterator.hpp" local="yes" import="no" module="no" objc="no">iterator.hpp</includes>
  </compound>
  <compound kind="file">
    <name>traits.hpp</name>
    <path>include/shark/LinAlg/BLAS/gpu/</path>
    <filename>gpu_2traits_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>io.hpp</name>
    <path>include/shark/LinAlg/BLAS/</path>
    <filename>io_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>cblas_inc.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/cblas/</path>
    <filename>cblas__inc_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>conv2d.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/clBlast/</path>
    <filename>cl_blast_2conv2d_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>conv2d.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>conv2d_8hpp.html</filename>
    <includes id="default_2conv2d_8hpp" name="conv2d.hpp" local="yes" import="no" module="no" objc="no">default/conv2d.hpp</includes>
  </compound>
  <compound kind="file">
    <name>conv2d.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2conv2d_8hpp.html</filename>
    <includes id="simd_8hpp" name="simd.hpp" local="yes" import="no" module="no" objc="no">simd.hpp</includes>
    <includes id="gemm_8hpp" name="gemm.hpp" local="yes" import="no" module="no" objc="no">../gemm.hpp</includes>
  </compound>
  <compound kind="file">
    <name>dense_gemm.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/cblas/</path>
    <filename>cblas_2dense__gemm_8hpp.html</filename>
    <includes id="cblas__inc_8hpp" name="cblas_inc.hpp" local="yes" import="no" module="no" objc="no">cblas_inc.hpp</includes>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../../proxy_expressions.hpp</includes>
    <includes id="assignment_8hpp" name="assignment.hpp" local="yes" import="no" module="no" objc="no">../../assignment.hpp</includes>
    <includes id="dense_8hpp" name="dense.hpp" local="yes" import="no" module="no" objc="no">../../dense.hpp</includes>
    <includes id="simd_8hpp" name="simd.hpp" local="yes" import="no" module="no" objc="no">../default/simd.hpp</includes>
  </compound>
  <compound kind="file">
    <name>dense_gemm.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2dense__gemm_8hpp.html</filename>
    <includes id="gemv_8hpp" name="gemv.hpp" local="yes" import="no" module="no" objc="no">../gemv.hpp</includes>
    <includes id="assignment_8hpp" name="assignment.hpp" local="yes" import="no" module="no" objc="no">../../assignment.hpp</includes>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../../proxy_expressions.hpp</includes>
    <includes id="mgemm_8hpp" name="mgemm.hpp" local="yes" import="no" module="no" objc="no">mgemm.hpp</includes>
  </compound>
  <compound kind="file">
    <name>getrf.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2getrf_8hpp.html</filename>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../../proxy_expressions.hpp</includes>
    <includes id="trsm_8hpp" name="trsm.hpp" local="yes" import="no" module="no" objc="no">../trsm.hpp</includes>
    <includes id="gemm_8hpp" name="gemm.hpp" local="yes" import="no" module="no" objc="no">../gemm.hpp</includes>
    <includes id="permutation_8hpp" name="permutation.hpp" local="yes" import="no" module="no" objc="no">../../permutation.hpp</includes>
  </compound>
  <compound kind="file">
    <name>getrf.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>getrf_8hpp.html</filename>
    <includes id="default_2getrf_8hpp" name="getrf.hpp" local="yes" import="no" module="no" objc="no">default/getrf.hpp</includes>
  </compound>
  <compound kind="file">
    <name>mgemm.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>mgemm_8hpp.html</filename>
    <includes id="simd_8hpp" name="simd.hpp" local="yes" import="no" module="no" objc="no">simd.hpp</includes>
  </compound>
  <compound kind="file">
    <name>pstrf.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2pstrf_8hpp.html</filename>
    <includes id="gemm_8hpp" name="gemm.hpp" local="yes" import="no" module="no" objc="no">../gemm.hpp</includes>
    <includes id="gemv_8hpp" name="gemv.hpp" local="yes" import="no" module="no" objc="no">../gemv.hpp</includes>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../../proxy_expressions.hpp</includes>
    <includes id="dense_8hpp" name="dense.hpp" local="yes" import="no" module="no" objc="no">../../dense.hpp</includes>
  </compound>
  <compound kind="file">
    <name>pstrf.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>pstrf_8hpp.html</filename>
    <includes id="default_2pstrf_8hpp" name="pstrf.hpp" local="yes" import="no" module="no" objc="no">default/pstrf.hpp</includes>
  </compound>
  <compound kind="file">
    <name>simd.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>simd_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>dot.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2dot_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>dot.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>dot_8hpp.html</filename>
    <includes id="default_2dot_8hpp" name="dot.hpp" local="yes" import="no" module="no" objc="no">default/dot.hpp</includes>
  </compound>
  <compound kind="file">
    <name>dot.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/gpu/</path>
    <filename>gpu_2dot_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fold_rows.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2fold__rows_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fold_rows.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>fold__rows_8hpp.html</filename>
    <includes id="default_2fold__rows_8hpp" name="fold_rows.hpp" local="yes" import="no" module="no" objc="no">default/fold_rows.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fold_rows.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/gpu/</path>
    <filename>gpu_2fold__rows_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>gemm.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/clBlast/</path>
    <filename>cl_blast_2gemm_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>gemm.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2gemm_8hpp.html</filename>
    <includes id="gemv_8hpp" name="gemv.hpp" local="yes" import="no" module="no" objc="no">../gemv.hpp</includes>
    <includes id="vector__assign_8hpp" name="vector_assign.hpp" local="yes" import="no" module="no" objc="no">../vector_assign.hpp</includes>
    <includes id="dense_8hpp" name="dense.hpp" local="yes" import="no" module="no" objc="no">../../dense.hpp</includes>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../../proxy_expressions.hpp</includes>
  </compound>
  <compound kind="file">
    <name>gemm.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>gemm_8hpp.html</filename>
    <includes id="default_2gemm_8hpp" name="gemm.hpp" local="yes" import="no" module="no" objc="no">default/gemm.hpp</includes>
    <includes id="default_2dense__gemm_8hpp" name="dense_gemm.hpp" local="yes" import="no" module="no" objc="no">default/dense_gemm.hpp</includes>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../proxy_expressions.hpp</includes>
  </compound>
  <compound kind="file">
    <name>gemm.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/gpu/</path>
    <filename>gpu_2gemm_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>gemv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/cblas/</path>
    <filename>cblas_2gemv_8hpp.html</filename>
    <includes id="cblas__inc_8hpp" name="cblas_inc.hpp" local="yes" import="no" module="no" objc="no">cblas_inc.hpp</includes>
  </compound>
  <compound kind="file">
    <name>gemv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/clBlast/</path>
    <filename>cl_blast_2gemv_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>gemv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2gemv_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../../proxy_expressions.hpp</includes>
    <includes id="dot_8hpp" name="dot.hpp" local="yes" import="no" module="no" objc="no">../dot.hpp</includes>
    <includes id="vector__assign_8hpp" name="vector_assign.hpp" local="yes" import="no" module="no" objc="no">../vector_assign.hpp</includes>
  </compound>
  <compound kind="file">
    <name>gemv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>gemv_8hpp.html</filename>
    <includes id="default_2gemv_8hpp" name="gemv.hpp" local="yes" import="no" module="no" objc="no">default/gemv.hpp</includes>
  </compound>
  <compound kind="file">
    <name>gemv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/gpu/</path>
    <filename>gpu_2gemv_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>matrix_assign.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2matrix__assign_8hpp.html</filename>
    <includes id="vector__assign_8hpp" name="vector_assign.hpp" local="yes" import="no" module="no" objc="no">../vector_assign.hpp</includes>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../../proxy_expressions.hpp</includes>
  </compound>
  <compound kind="file">
    <name>matrix_assign.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/gpu/</path>
    <filename>gpu_2matrix__assign_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>matrix_assign.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>matrix__assign_8hpp.html</filename>
    <includes id="default_2matrix__assign_8hpp" name="matrix_assign.hpp" local="yes" import="no" module="no" objc="no">default/matrix_assign.hpp</includes>
  </compound>
  <compound kind="file">
    <name>matrix_fold.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2matrix__fold_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>matrix_fold.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/gpu/</path>
    <filename>gpu_2matrix__fold_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>matrix_fold.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>matrix__fold_8hpp.html</filename>
    <includes id="default_2matrix__fold_8hpp" name="matrix_fold.hpp" local="yes" import="no" module="no" objc="no">default/matrix_fold.hpp</includes>
  </compound>
  <compound kind="file">
    <name>potrf.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/atlas/</path>
    <filename>atlas_2potrf_8hpp.html</filename>
    <includes id="cblas__inc_8hpp" name="cblas_inc.hpp" local="yes" import="no" module="no" objc="no">../cblas/cblas_inc.hpp</includes>
  </compound>
  <compound kind="file">
    <name>potrf.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2potrf_8hpp.html</filename>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../../proxy_expressions.hpp</includes>
    <includes id="trsm_8hpp" name="trsm.hpp" local="yes" import="no" module="no" objc="no">../trsm.hpp</includes>
    <includes id="syrk_8hpp" name="syrk.hpp" local="yes" import="no" module="no" objc="no">../syrk.hpp</includes>
  </compound>
  <compound kind="file">
    <name>potrf.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/gpu/</path>
    <filename>gpu_2potrf_8hpp.html</filename>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../../proxy_expressions.hpp</includes>
    <includes id="trsm_8hpp" name="trsm.hpp" local="yes" import="no" module="no" objc="no">../trsm.hpp</includes>
    <includes id="syrk_8hpp" name="syrk.hpp" local="yes" import="no" module="no" objc="no">../syrk.hpp</includes>
  </compound>
  <compound kind="file">
    <name>potrf.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>potrf_8hpp.html</filename>
    <includes id="default_2potrf_8hpp" name="potrf.hpp" local="yes" import="no" module="no" objc="no">default/potrf.hpp</includes>
  </compound>
  <compound kind="file">
    <name>random.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>kernels_2default_2random_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>random.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/gpu/</path>
    <filename>kernels_2gpu_2random_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>random.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>kernels_2random_8hpp.html</filename>
    <includes id="kernels_2default_2random_8hpp" name="random.hpp" local="yes" import="no" module="no" objc="no">default/random.hpp</includes>
  </compound>
  <compound kind="file">
    <name>random.hpp</name>
    <path>include/shark/LinAlg/BLAS/</path>
    <filename>random_8hpp.html</filename>
    <includes id="assignment_8hpp" name="assignment.hpp" local="yes" import="no" module="no" objc="no">assignment.hpp</includes>
    <includes id="kernels_2random_8hpp" name="random.hpp" local="yes" import="no" module="no" objc="no">kernels/random.hpp</includes>
  </compound>
  <compound kind="file">
    <name>syrk.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/cblas/</path>
    <filename>cblas_2syrk_8hpp.html</filename>
    <includes id="cblas__inc_8hpp" name="cblas_inc.hpp" local="yes" import="no" module="no" objc="no">cblas_inc.hpp</includes>
  </compound>
  <compound kind="file">
    <name>syrk.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/clBlast/</path>
    <filename>cl_blast_2syrk_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>syrk.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2syrk_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../../proxy_expressions.hpp</includes>
    <includes id="mgemm_8hpp" name="mgemm.hpp" local="yes" import="no" module="no" objc="no">mgemm.hpp</includes>
  </compound>
  <compound kind="file">
    <name>syrk.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/gpu/</path>
    <filename>gpu_2syrk_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>syrk.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>syrk_8hpp.html</filename>
    <includes id="default_2syrk_8hpp" name="syrk.hpp" local="yes" import="no" module="no" objc="no">default/syrk.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trmm.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/cblas/</path>
    <filename>cblas_2trmm_8hpp.html</filename>
    <includes id="cblas__inc_8hpp" name="cblas_inc.hpp" local="yes" import="no" module="no" objc="no">cblas_inc.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trmm.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/clBlast/</path>
    <filename>cl_blast_2trmm_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trmm.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2trmm_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../../proxy_expressions.hpp</includes>
    <includes id="simd_8hpp" name="simd.hpp" local="yes" import="no" module="no" objc="no">simd.hpp</includes>
    <includes id="mgemm_8hpp" name="mgemm.hpp" local="yes" import="no" module="no" objc="no">mgemm.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trmm.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/gpu/</path>
    <filename>gpu_2trmm_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
    <includes id="gemm_8hpp" name="gemm.hpp" local="yes" import="no" module="no" objc="no">../gemm.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trmm.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>trmm_8hpp.html</filename>
    <includes id="default_2trmm_8hpp" name="trmm.hpp" local="yes" import="no" module="no" objc="no">default/trmm.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trsm.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/cblas/</path>
    <filename>cblas_2trsm_8hpp.html</filename>
    <includes id="cblas__inc_8hpp" name="cblas_inc.hpp" local="yes" import="no" module="no" objc="no">cblas_inc.hpp</includes>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../../proxy_expressions.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trsm.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/clBlast/</path>
    <filename>cl_blast_2trsm_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../../proxy_expressions.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trsm.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2trsm_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../../proxy_expressions.hpp</includes>
    <includes id="gemm_8hpp" name="gemm.hpp" local="yes" import="no" module="no" objc="no">../gemm.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trsm.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/gpu/</path>
    <filename>gpu_2trsm_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trsm.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>trsm_8hpp.html</filename>
    <includes id="default_2trsm_8hpp" name="trsm.hpp" local="yes" import="no" module="no" objc="no">default/trsm.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trsv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/cblas/</path>
    <filename>cblas_2trsv_8hpp.html</filename>
    <includes id="cblas__inc_8hpp" name="cblas_inc.hpp" local="yes" import="no" module="no" objc="no">cblas_inc.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trsv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/clBlast/</path>
    <filename>cl_blast_2trsv_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trsv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2trsv_8hpp.html</filename>
    <includes id="assignment_8hpp" name="assignment.hpp" local="yes" import="no" module="no" objc="no">../../assignment.hpp</includes>
    <includes id="dot_8hpp" name="dot.hpp" local="yes" import="no" module="no" objc="no">../dot.hpp</includes>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../../proxy_expressions.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trsv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/gpu/</path>
    <filename>gpu_2trsv_8hpp.html</filename>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../../proxy_expressions.hpp</includes>
    <includes id="gemv_8hpp" name="gemv.hpp" local="yes" import="no" module="no" objc="no">../gemv.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trsv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>trsv_8hpp.html</filename>
    <includes id="default_2trsv_8hpp" name="trsv.hpp" local="yes" import="no" module="no" objc="no">default/trsv.hpp</includes>
  </compound>
  <compound kind="file">
    <name>vector_assign.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2vector__assign_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>vector_assign.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/gpu/</path>
    <filename>gpu_2vector__assign_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>vector_assign.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>vector__assign_8hpp.html</filename>
    <includes id="default_2vector__assign_8hpp" name="vector_assign.hpp" local="yes" import="no" module="no" objc="no">default/vector_assign.hpp</includes>
  </compound>
  <compound kind="file">
    <name>vector_fold.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2vector__fold_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>vector_fold.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/gpu/</path>
    <filename>gpu_2vector__fold_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>vector_fold.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>vector__fold_8hpp.html</filename>
    <includes id="default_2vector__fold_8hpp" name="vector_fold.hpp" local="yes" import="no" module="no" objc="no">default/vector_fold.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fortran.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/lapack/</path>
    <filename>fortran_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>syev.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2syev_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>syev.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/lapack/</path>
    <filename>lapack_2syev_8hpp.html</filename>
    <includes id="fortran_8hpp" name="fortran.hpp" local="yes" import="no" module="no" objc="no">fortran.hpp</includes>
  </compound>
  <compound kind="file">
    <name>syev.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>syev_8hpp.html</filename>
    <includes id="default_2syev_8hpp" name="syev.hpp" local="yes" import="no" module="no" objc="no">default/syev.hpp</includes>
  </compound>
  <compound kind="file">
    <name>tpmv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/cblas/</path>
    <filename>cblas_2tpmv_8hpp.html</filename>
    <includes id="cblas__inc_8hpp" name="cblas_inc.hpp" local="yes" import="no" module="no" objc="no">cblas_inc.hpp</includes>
  </compound>
  <compound kind="file">
    <name>tpmv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2tpmv_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>tpmv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>tpmv_8hpp.html</filename>
    <includes id="default_2tpmv_8hpp" name="tpmv.hpp" local="yes" import="no" module="no" objc="no">default/tpmv.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trmv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/cblas/</path>
    <filename>cblas_2trmv_8hpp.html</filename>
    <includes id="cblas__inc_8hpp" name="cblas_inc.hpp" local="yes" import="no" module="no" objc="no">cblas_inc.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trmv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/clBlast/</path>
    <filename>cl_blast_2trmv_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trmv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2trmv_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">../../proxy_expressions.hpp</includes>
    <includes id="assignment_8hpp" name="assignment.hpp" local="yes" import="no" module="no" objc="no">../../assignment.hpp</includes>
    <includes id="dense_8hpp" name="dense.hpp" local="yes" import="no" module="no" objc="no">../../dense.hpp</includes>
    <includes id="gemv_8hpp" name="gemv.hpp" local="yes" import="no" module="no" objc="no">../gemv.hpp</includes>
    <includes id="dot_8hpp" name="dot.hpp" local="yes" import="no" module="no" objc="no">../dot.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trmv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/gpu/</path>
    <filename>gpu_2trmv_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
    <includes id="gemv_8hpp" name="gemv.hpp" local="yes" import="no" module="no" objc="no">../gemv.hpp</includes>
  </compound>
  <compound kind="file">
    <name>trmv.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>trmv_8hpp.html</filename>
    <includes id="default_2trmv_8hpp" name="trmv.hpp" local="yes" import="no" module="no" objc="no">default/trmv.hpp</includes>
  </compound>
  <compound kind="file">
    <name>vector_max.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/default/</path>
    <filename>default_2vector__max_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>vector_max.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/gpu/</path>
    <filename>gpu_2vector__max_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">../../expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>vector_max.hpp</name>
    <path>include/shark/LinAlg/BLAS/kernels/</path>
    <filename>vector__max_8hpp.html</filename>
    <includes id="default_2vector__max_8hpp" name="vector_max.hpp" local="yes" import="no" module="no" objc="no">default/vector_max.hpp</includes>
  </compound>
  <compound kind="file">
    <name>matrix_expression.hpp</name>
    <path>include/shark/LinAlg/BLAS/</path>
    <filename>matrix__expression_8hpp.html</filename>
    <includes id="matrix__fold_8hpp" name="matrix_fold.hpp" local="yes" import="no" module="no" objc="no">kernels/matrix_fold.hpp</includes>
    <includes id="proxy__expressions_8hpp" name="proxy_expressions.hpp" local="yes" import="no" module="no" objc="no">proxy_expressions.hpp</includes>
    <includes id="vector__expression_8hpp" name="vector_expression.hpp" local="yes" import="no" module="no" objc="no">vector_expression.hpp</includes>
  </compound>
  <compound kind="file">
    <name>permutation.hpp</name>
    <path>include/shark/LinAlg/BLAS/</path>
    <filename>permutation_8hpp.html</filename>
    <includes id="dense_8hpp" name="dense.hpp" local="yes" import="no" module="no" objc="no">dense.hpp</includes>
  </compound>
  <compound kind="file">
    <name>proxy_expressions.hpp</name>
    <path>include/shark/LinAlg/BLAS/</path>
    <filename>proxy__expressions_8hpp.html</filename>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">expression_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>remora.hpp</name>
    <path>include/shark/LinAlg/BLAS/</path>
    <filename>remora_8hpp.html</filename>
    <includes id="vector__expression_8hpp" name="vector_expression.hpp" local="yes" import="no" module="no" objc="no">vector_expression.hpp</includes>
    <includes id="matrix__expression_8hpp" name="matrix_expression.hpp" local="yes" import="no" module="no" objc="no">matrix_expression.hpp</includes>
    <includes id="solve_8hpp" name="solve.hpp" local="yes" import="no" module="no" objc="no">solve.hpp</includes>
    <includes id="dense_8hpp" name="dense.hpp" local="yes" import="no" module="no" objc="no">dense.hpp</includes>
    <includes id="sparse_8hpp" name="sparse.hpp" local="yes" import="no" module="no" objc="no">sparse.hpp</includes>
    <includes id="permutation_8hpp" name="permutation.hpp" local="yes" import="no" module="no" objc="no">permutation.hpp</includes>
    <includes id="io_8hpp" name="io.hpp" local="yes" import="no" module="no" objc="no">io.hpp</includes>
    <includes id="random_8hpp" name="random.hpp" local="yes" import="no" module="no" objc="no">random.hpp</includes>
    <includes id="device__copy_8hpp" name="device_copy.hpp" local="yes" import="no" module="no" objc="no">device_copy.hpp</includes>
  </compound>
  <compound kind="file">
    <name>solve.hpp</name>
    <path>include/shark/LinAlg/BLAS/</path>
    <filename>solve_8hpp.html</filename>
    <includes id="decompositions_8hpp" name="decompositions.hpp" local="yes" import="no" module="no" objc="no">decompositions.hpp</includes>
  </compound>
  <compound kind="file">
    <name>sparse.hpp</name>
    <path>include/shark/LinAlg/BLAS/cpu/</path>
    <filename>cpu_2sparse_8hpp.html</filename>
    <includes id="iterator_8hpp" name="iterator.hpp" local="yes" import="no" module="no" objc="no">iterator.hpp</includes>
  </compound>
  <compound kind="file">
    <name>sparse.hpp</name>
    <path>include/shark/LinAlg/BLAS/</path>
    <filename>sparse_8hpp.html</filename>
    <includes id="cpu_2sparse_8hpp" name="sparse.hpp" local="yes" import="no" module="no" objc="no">cpu/sparse.hpp</includes>
    <includes id="sparse__matrix_8hpp" name="sparse_matrix.hpp" local="yes" import="no" module="no" objc="no">cpu/sparse_matrix.hpp</includes>
    <includes id="expression__types_8hpp" name="expression_types.hpp" local="yes" import="no" module="no" objc="no">expression_types.hpp</includes>
    <includes id="assignment_8hpp" name="assignment.hpp" local="yes" import="no" module="no" objc="no">assignment.hpp</includes>
  </compound>
  <compound kind="file">
    <name>triangular_matrix.hpp</name>
    <path>include/shark/LinAlg/BLAS/</path>
    <filename>triangular__matrix_8hpp.html</filename>
    <includes id="assignment_8hpp" name="assignment.hpp" local="yes" import="no" module="no" objc="no">assignment.hpp</includes>
  </compound>
  <compound kind="file">
    <name>vector_expression.hpp</name>
    <path>include/shark/LinAlg/BLAS/</path>
    <filename>vector__expression_8hpp.html</filename>
    <includes id="dot_8hpp" name="dot.hpp" local="yes" import="no" module="no" objc="no">kernels/dot.hpp</includes>
    <includes id="vector__fold_8hpp" name="vector_fold.hpp" local="yes" import="no" module="no" objc="no">kernels/vector_fold.hpp</includes>
    <includes id="vector__max_8hpp" name="vector_max.hpp" local="yes" import="no" module="no" objc="no">kernels/vector_max.hpp</includes>
  </compound>
  <compound kind="file">
    <name>BlockMatrix2x2.h</name>
    <path>include/shark/LinAlg/</path>
    <filename>_block_matrix2x2_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>CachedMatrix.h</name>
    <path>include/shark/LinAlg/</path>
    <filename>_cached_matrix_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_l_r_u_cache_8h" name="LRUCache.h" local="no" import="no" module="no" objc="no">shark/LinAlg/LRUCache.h</includes>
  </compound>
  <compound kind="file">
    <name>DifferenceKernelMatrix.h</name>
    <path>include/shark/LinAlg/</path>
    <filename>_difference_kernel_matrix_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>ExampleModifiedKernelMatrix.h</name>
    <path>include/shark/LinAlg/</path>
    <filename>_example_modified_kernel_matrix_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>GaussianKernelMatrix.h</name>
    <path>include/shark/LinAlg/</path>
    <filename>_gaussian_kernel_matrix_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>KernelMatrix.h</name>
    <path>include/shark/LinAlg/</path>
    <filename>_kernel_matrix_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_kernel_helpers_8h" name="KernelHelpers.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelHelpers.h</includes>
  </compound>
  <compound kind="file">
    <name>LRUCache.h</name>
    <path>include/shark/LinAlg/</path>
    <filename>_l_r_u_cache_8h.html</filename>
    <includes id="_exception_8h" name="Exception.h" local="no" import="no" module="no" objc="no">shark/Core/Exception.h</includes>
  </compound>
  <compound kind="file">
    <name>Metrics.h</name>
    <path>include/shark/LinAlg/</path>
    <filename>_metrics_8h.html</filename>
    <includes id="remora_8hpp" name="remora.hpp" local="no" import="no" module="no" objc="no">shark/LinAlg/BLAS/remora.hpp</includes>
    <includes id="_math_8h" name="Math.h" local="no" import="no" module="no" objc="no">shark/Core/Math.h</includes>
  </compound>
  <compound kind="file">
    <name>ModifiedKernelMatrix.h</name>
    <path>include/shark/LinAlg/</path>
    <filename>_modified_kernel_matrix_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>PartlyPrecomputedMatrix.h</name>
    <path>include/shark/LinAlg/</path>
    <filename>_partly_precomputed_matrix_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>PrecomputedMatrix.h</name>
    <path>include/shark/LinAlg/</path>
    <filename>_precomputed_matrix_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>RegularizedKernelMatrix.h</name>
    <path>include/shark/LinAlg/</path>
    <filename>_regularized_kernel_matrix_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>rotations.h</name>
    <path>include/shark/LinAlg/</path>
    <filename>rotations_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractModel.h</name>
    <path>include/shark/Models/</path>
    <filename>_abstract_model_8h.html</filename>
    <includes id="_flags_8h" name="Flags.h" local="no" import="no" module="no" objc="no">shark/Core/Flags.h</includes>
    <includes id="_i_parameterizable_8h" name="IParameterizable.h" local="no" import="no" module="no" objc="no">shark/Core/IParameterizable.h</includes>
    <includes id="_i_nameable_8h" name="INameable.h" local="no" import="no" module="no" objc="no">shark/Core/INameable.h</includes>
    <includes id="_state_8h" name="State.h" local="no" import="no" module="no" objc="no">shark/Core/State.h</includes>
    <includes id="_shape_8h" name="Shape.h" local="no" import="no" module="no" objc="no">shark/Core/Shape.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>Classifier.h</name>
    <path>include/shark/Models/</path>
    <filename>_classifier_8h.html</filename>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractClustering.h</name>
    <path>include/shark/Models/Clustering/</path>
    <filename>_abstract_clustering_8h.html</filename>
    <includes id="_batch_interface_8h" name="BatchInterface.h" local="no" import="no" module="no" objc="no">shark/Data/BatchInterface.h</includes>
    <includes id="_flags_8h" name="Flags.h" local="no" import="no" module="no" objc="no">shark/Core/Flags.h</includes>
    <includes id="_i_nameable_8h" name="INameable.h" local="no" import="no" module="no" objc="no">shark/Core/INameable.h</includes>
    <includes id="_i_parameterizable_8h" name="IParameterizable.h" local="no" import="no" module="no" objc="no">shark/Core/IParameterizable.h</includes>
    <includes id="_i_serializable_8h" name="ISerializable.h" local="no" import="no" module="no" objc="no">shark/Core/ISerializable.h</includes>
    <includes id="_shape_8h" name="Shape.h" local="no" import="no" module="no" objc="no">shark/Core/Shape.h</includes>
  </compound>
  <compound kind="file">
    <name>Centroids.h</name>
    <path>include/shark/Models/Clustering/</path>
    <filename>_centroids_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_abstract_clustering_8h" name="AbstractClustering.h" local="no" import="no" module="no" objc="no">shark/Models/Clustering/AbstractClustering.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>ClusteringModel.h</name>
    <path>include/shark/Models/Clustering/</path>
    <filename>_clustering_model_8h.html</filename>
    <includes id="_abstract_clustering_8h" name="AbstractClustering.h" local="no" import="no" module="no" objc="no">shark/Models/Clustering/AbstractClustering.h</includes>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
  </compound>
  <compound kind="file">
    <name>HardClusteringModel.h</name>
    <path>include/shark/Models/Clustering/</path>
    <filename>_hard_clustering_model_8h.html</filename>
    <includes id="_clustering_model_8h" name="ClusteringModel.h" local="no" import="no" module="no" objc="no">shark/Models/Clustering/ClusteringModel.h</includes>
  </compound>
  <compound kind="file">
    <name>HierarchicalClustering.h</name>
    <path>include/shark/Models/Clustering/</path>
    <filename>_hierarchical_clustering_8h.html</filename>
    <includes id="_abstract_clustering_8h" name="AbstractClustering.h" local="no" import="no" module="no" objc="no">shark/Models/Clustering/AbstractClustering.h</includes>
    <includes id="_binary_tree_8h" name="BinaryTree.h" local="no" import="no" module="no" objc="no">shark/Models/Trees/BinaryTree.h</includes>
  </compound>
  <compound kind="file">
    <name>SoftClusteringModel.h</name>
    <path>include/shark/Models/Clustering/</path>
    <filename>_soft_clustering_model_8h.html</filename>
    <includes id="_clustering_model_8h" name="ClusteringModel.h" local="no" import="no" module="no" objc="no">shark/Models/Clustering/ClusteringModel.h</includes>
  </compound>
  <compound kind="file">
    <name>CMAC.h</name>
    <path>include/shark/Models/</path>
    <filename>_c_m_a_c_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>ConcatenatedModel.h</name>
    <path>include/shark/Models/</path>
    <filename>_concatenated_model_8h.html</filename>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
  </compound>
  <compound kind="file">
    <name>ConvolutionalModel.h</name>
    <path>include/shark/Models/</path>
    <filename>_convolutional_model_8h.html</filename>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
    <includes id="_neuron_layers_8h" name="NeuronLayers.h" local="no" import="no" module="no" objc="no">shark/Models/NeuronLayers.h</includes>
    <includes id="conv2d_8hpp" name="conv2d.hpp" local="no" import="no" module="no" objc="no">shark/LinAlg/BLAS/kernels/conv2d.hpp</includes>
    <includes id="_padding_8h" name="Padding.h" local="no" import="no" module="no" objc="no">shark/Core/Images/Padding.h</includes>
    <includes id="_reorder_8h" name="Reorder.h" local="no" import="no" module="no" objc="no">shark/Core/Images/Reorder.h</includes>
  </compound>
  <compound kind="file">
    <name>DropoutLayer.h</name>
    <path>include/shark/Models/</path>
    <filename>_dropout_layer_8h.html</filename>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
  </compound>
  <compound kind="file">
    <name>Ensemble.h</name>
    <path>include/shark/Models/</path>
    <filename>_ensemble_8h.html</filename>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
    <includes id="_classifier_8h" name="Classifier.h" local="no" import="no" module="no" objc="no">shark/Models/Classifier.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractKernelFunction.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_abstract_kernel_function_8h.html</filename>
    <includes id="_abstract_metric_8h" name="AbstractMetric.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractMetric.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_flags_8h" name="Flags.h" local="no" import="no" module="no" objc="no">shark/Core/Flags.h</includes>
    <includes id="_state_8h" name="State.h" local="no" import="no" module="no" objc="no">shark/Core/State.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractMetric.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_abstract_metric_8h.html</filename>
    <includes id="_batch_interface_8h" name="BatchInterface.h" local="no" import="no" module="no" objc="no">shark/Data/BatchInterface.h</includes>
    <includes id="_i_parameterizable_8h" name="IParameterizable.h" local="no" import="no" module="no" objc="no">shark/Core/IParameterizable.h</includes>
    <includes id="_i_serializable_8h" name="ISerializable.h" local="no" import="no" module="no" objc="no">shark/Core/ISerializable.h</includes>
    <includes id="_i_nameable_8h" name="INameable.h" local="no" import="no" module="no" objc="no">shark/Core/INameable.h</includes>
    <includes id="_proxy_reference_traits_8h" name="ProxyReferenceTraits.h" local="no" import="no" module="no" objc="no">shark/Core/Traits/ProxyReferenceTraits.h</includes>
  </compound>
  <compound kind="file">
    <name>ArdKernel.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_ard_kernel_8h.html</filename>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>CSvmDerivative.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_c_svm_derivative_8h.html</filename>
    <includes id="_i_nameable_8h" name="INameable.h" local="no" import="no" module="no" objc="no">shark/Core/INameable.h</includes>
    <includes id="_i_serializable_8h" name="ISerializable.h" local="no" import="no" module="no" objc="no">shark/Core/ISerializable.h</includes>
    <includes id="_c_svm_trainer_8h" name="CSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/CSvmTrainer.h</includes>
    <includes id="_kernel_expansion_8h" name="KernelExpansion.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelExpansion.h</includes>
  </compound>
  <compound kind="file">
    <name>DiscreteKernel.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_discrete_kernel_8h.html</filename>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>EvalSkipMissingFeatures.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_eval_skip_missing_features_8h.html</filename>
    <includes id="_exception_8h" name="Exception.h" local="yes" import="no" module="no" objc="no">shark/Core/Exception.h</includes>
    <includes id="_base_8h" name="Base.h" local="yes" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="yes" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
    <includes id="_linear_kernel_8h" name="LinearKernel.h" local="yes" import="no" module="no" objc="no">shark/Models/Kernels/LinearKernel.h</includes>
    <includes id="_monomial_kernel_8h" name="MonomialKernel.h" local="yes" import="no" module="no" objc="no">shark/Models/Kernels/MonomialKernel.h</includes>
    <includes id="_polynomial_kernel_8h" name="PolynomialKernel.h" local="yes" import="no" module="no" objc="no">shark/Models/Kernels/PolynomialKernel.h</includes>
  </compound>
  <compound kind="file">
    <name>GaussianRbfKernel.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_gaussian_rbf_kernel_8h.html</filename>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>KernelExpansion.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_kernel_expansion_8h.html</filename>
    <includes id="_classifier_8h" name="Classifier.h" local="no" import="no" module="no" objc="no">shark/Models/Classifier.h</includes>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
  </compound>
  <compound kind="file">
    <name>KernelHelpers.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_kernel_helpers_8h.html</filename>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_open_m_p_8h" name="OpenMP.h" local="no" import="no" module="no" objc="no">shark/Core/OpenMP.h</includes>
  </compound>
  <compound kind="file">
    <name>LinearKernel.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_linear_kernel_8h.html</filename>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>MissingFeaturesKernelExpansion.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_missing_features_kernel_expansion_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
    <includes id="_eval_skip_missing_features_8h" name="EvalSkipMissingFeatures.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/EvalSkipMissingFeatures.h</includes>
    <includes id="_kernel_expansion_8h" name="KernelExpansion.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelExpansion.h</includes>
  </compound>
  <compound kind="file">
    <name>MklKernel.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_mkl_kernel_8h.html</filename>
    <includes id="_weighted_sum_kernel_8h" name="WeightedSumKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/WeightedSumKernel.h</includes>
  </compound>
  <compound kind="file">
    <name>ModelKernel.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_model_kernel_8h.html</filename>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
  </compound>
  <compound kind="file">
    <name>MonomialKernel.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_monomial_kernel_8h.html</filename>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>MultiTaskKernel.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_multi_task_kernel_8h.html</filename>
    <includes id="_discrete_kernel_8h" name="DiscreteKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/DiscreteKernel.h</includes>
    <includes id="_product_kernel_8h" name="ProductKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/ProductKernel.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>NormalizedKernel.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_normalized_kernel_8h.html</filename>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>PointSetKernel.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_point_set_kernel_8h.html</filename>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>PolynomialKernel.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_polynomial_kernel_8h.html</filename>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>ProductKernel.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_product_kernel_8h.html</filename>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>ScaledKernel.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_scaled_kernel_8h.html</filename>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>SubrangeKernel.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_subrange_kernel_8h.html</filename>
    <includes id="_weighted_sum_kernel_8h" name="WeightedSumKernel.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/WeightedSumKernel.h</includes>
  </compound>
  <compound kind="file">
    <name>WeightedSumKernel.h</name>
    <path>include/shark/Models/Kernels/</path>
    <filename>_weighted_sum_kernel_8h.html</filename>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>LinearModel.h</name>
    <path>include/shark/Models/</path>
    <filename>_linear_model_8h.html</filename>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
    <includes id="_neuron_layers_8h" name="NeuronLayers.h" local="no" import="no" module="no" objc="no">shark/Models/NeuronLayers.h</includes>
    <includes id="_classifier_8h" name="Classifier.h" local="no" import="no" module="no" objc="no">shark/Models/Classifier.h</includes>
  </compound>
  <compound kind="file">
    <name>NearestNeighborModel.h</name>
    <path>include/shark/Models/</path>
    <filename>_nearest_neighbor_model_8h.html</filename>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
    <includes id="_classifier_8h" name="Classifier.h" local="no" import="no" module="no" objc="no">shark/Models/Classifier.h</includes>
    <includes id="_abstract_nearest_neighbors_8h" name="AbstractNearestNeighbors.h" local="no" import="no" module="no" objc="no">shark/Algorithms/NearestNeighbors/AbstractNearestNeighbors.h</includes>
  </compound>
  <compound kind="file">
    <name>NeuronLayers.h</name>
    <path>include/shark/Models/</path>
    <filename>_neuron_layers_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
  </compound>
  <compound kind="file">
    <name>Normalizer.h</name>
    <path>include/shark/Models/</path>
    <filename>_normalizer_8h.html</filename>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>OneVersusOneClassifier.h</name>
    <path>include/shark/Models/</path>
    <filename>_one_versus_one_classifier_8h.html</filename>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
  </compound>
  <compound kind="file">
    <name>PoolingLayer.h</name>
    <path>include/shark/Models/</path>
    <filename>_pooling_layer_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
    <includes id="_padding_8h" name="Padding.h" local="no" import="no" module="no" objc="no">shark/Core/Images/Padding.h</includes>
    <includes id="_c_p_u_2_pooling_8h" name="Pooling.h" local="no" import="no" module="no" objc="no">shark/Core/Images/CPU/Pooling.h</includes>
  </compound>
  <compound kind="file">
    <name>RBFLayer.h</name>
    <path>include/shark/Models/</path>
    <filename>_r_b_f_layer_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
  </compound>
  <compound kind="file">
    <name>ResizeLayer.h</name>
    <path>include/shark/Models/</path>
    <filename>_resize_layer_8h.html</filename>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
    <includes id="_interpolation_8h" name="Interpolation.h" local="no" import="no" module="no" objc="no">shark/Core/Images/Interpolation.h</includes>
    <includes id="device__copy_8hpp" name="device_copy.hpp" local="no" import="no" module="no" objc="no">shark/LinAlg/BLAS/device_copy.hpp</includes>
  </compound>
  <compound kind="file">
    <name>BinaryTree.h</name>
    <path>include/shark/Models/Trees/</path>
    <filename>_binary_tree_8h.html</filename>
    <includes id="_exception_8h" name="Exception.h" local="no" import="no" module="no" objc="no">shark/Core/Exception.h</includes>
    <includes id="functional_8h" name="functional.h" local="no" import="no" module="no" objc="no">shark/Core/utility/functional.h</includes>
    <includes id="_key_value_pair_8h" name="KeyValuePair.h" local="no" import="no" module="no" objc="no">shark/Core/utility/KeyValuePair.h</includes>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>CARTree.h</name>
    <path>include/shark/Models/Trees/</path>
    <filename>_c_a_r_tree_8h.html</filename>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>KDTree.h</name>
    <path>include/shark/Models/Trees/</path>
    <filename>_k_d_tree_8h.html</filename>
    <includes id="_binary_tree_8h" name="BinaryTree.h" local="no" import="no" module="no" objc="no">shark/Models/Trees/BinaryTree.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_math_8h" name="Math.h" local="no" import="no" module="no" objc="no">shark/Core/Math.h</includes>
  </compound>
  <compound kind="file">
    <name>KHCTree.h</name>
    <path>include/shark/Models/Trees/</path>
    <filename>_k_h_c_tree_8h.html</filename>
    <includes id="_binary_tree_8h" name="BinaryTree.h" local="no" import="no" module="no" objc="no">shark/Models/Trees/BinaryTree.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>LCTree.h</name>
    <path>include/shark/Models/Trees/</path>
    <filename>_l_c_tree_8h.html</filename>
    <includes id="_binary_tree_8h" name="BinaryTree.h" local="no" import="no" module="no" objc="no">shark/Models/Trees/BinaryTree.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>RFClassifier.h</name>
    <path>include/shark/Models/Trees/</path>
    <filename>_r_f_classifier_8h.html</filename>
    <includes id="_c_a_r_tree_8h" name="CARTree.h" local="no" import="no" module="no" objc="no">shark/Models/Trees/CARTree.h</includes>
    <includes id="_ensemble_8h" name="Ensemble.h" local="no" import="no" module="no" objc="no">shark/Models/Ensemble.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_squared_loss_8h" name="SquaredLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/SquaredLoss.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractConstraintHandler.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_abstract_constraint_handler_8h.html</filename>
    <includes id="_exception_8h" name="Exception.h" local="no" import="no" module="no" objc="no">shark/Core/Exception.h</includes>
    <includes id="_flags_8h" name="Flags.h" local="no" import="no" module="no" objc="no">shark/Core/Flags.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractCost.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_abstract_cost_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_i_nameable_8h" name="INameable.h" local="no" import="no" module="no" objc="no">shark/Core/INameable.h</includes>
    <includes id="_flags_8h" name="Flags.h" local="no" import="no" module="no" objc="no">shark/Core/Flags.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractObjectiveFunction.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_abstract_objective_function_8h.html</filename>
    <includes id="_i_nameable_8h" name="INameable.h" local="no" import="no" module="no" objc="no">shark/Core/INameable.h</includes>
    <includes id="_exception_8h" name="Exception.h" local="no" import="no" module="no" objc="no">shark/Core/Exception.h</includes>
    <includes id="_flags_8h" name="Flags.h" local="no" import="no" module="no" objc="no">shark/Core/Flags.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_abstract_constraint_handler_8h" name="AbstractConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>Ackley.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_ackley_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>Benchmarks.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_benchmarks_8h.html</filename>
    <includes id="_z_d_t6_8h" name="ZDT6.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/ZDT6.h</includes>
    <includes id="_z_d_t4_8h" name="ZDT4.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/ZDT4.h</includes>
    <includes id="_z_d_t3_8h" name="ZDT3.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/ZDT3.h</includes>
    <includes id="_z_d_t2_8h" name="ZDT2.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/ZDT2.h</includes>
    <includes id="_z_d_t1_8h" name="ZDT1.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/ZDT1.h</includes>
    <includes id="_himmelblau_8h" name="Himmelblau.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Himmelblau.h</includes>
    <includes id="_sphere_8h" name="Sphere.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Sphere.h</includes>
    <includes id="_rosenbrock_8h" name="Rosenbrock.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Rosenbrock.h</includes>
    <includes id="_l_z9_8h" name="LZ9.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/LZ9.h</includes>
    <includes id="_l_z8_8h" name="LZ8.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/LZ8.h</includes>
    <includes id="_l_z7_8h" name="LZ7.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/LZ7.h</includes>
    <includes id="_l_z6_8h" name="LZ6.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/LZ6.h</includes>
    <includes id="_l_z5_8h" name="LZ5.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/LZ5.h</includes>
    <includes id="_l_z4_8h" name="LZ4.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/LZ4.h</includes>
    <includes id="_l_z3_8h" name="LZ3.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/LZ3.h</includes>
    <includes id="_l_z2_8h" name="LZ2.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/LZ2.h</includes>
    <includes id="_l_z1_8h" name="LZ1.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/LZ1.h</includes>
    <includes id="_i_h_r6_8h" name="IHR6.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/IHR6.h</includes>
    <includes id="_i_h_r4_8h" name="IHR4.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/IHR4.h</includes>
    <includes id="_i_h_r3_8h" name="IHR3.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/IHR3.h</includes>
    <includes id="_i_h_r2_8h" name="IHR2.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/IHR2.h</includes>
    <includes id="_i_h_r1_8h" name="IHR1.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/IHR1.h</includes>
    <includes id="_g_s_p_8h" name="GSP.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/GSP.h</includes>
    <includes id="_fonseca_8h" name="Fonseca.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Fonseca.h</includes>
    <includes id="_ellipsoid_8h" name="Ellipsoid.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Ellipsoid.h</includes>
    <includes id="_e_l_l_i2_8h" name="ELLI2.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/ELLI2.h</includes>
    <includes id="_e_l_l_i1_8h" name="ELLI1.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/ELLI1.h</includes>
    <includes id="_d_t_l_z7_8h" name="DTLZ7.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/DTLZ7.h</includes>
    <includes id="_d_t_l_z6_8h" name="DTLZ6.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/DTLZ6.h</includes>
    <includes id="_d_t_l_z5_8h" name="DTLZ5.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/DTLZ5.h</includes>
    <includes id="_d_t_l_z4_8h" name="DTLZ4.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/DTLZ4.h</includes>
    <includes id="_d_t_l_z3_8h" name="DTLZ3.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/DTLZ3.h</includes>
    <includes id="_d_t_l_z2_8h" name="DTLZ2.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/DTLZ2.h</includes>
    <includes id="_d_t_l_z1_8h" name="DTLZ1.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/DTLZ1.h</includes>
    <includes id="_discus_8h" name="Discus.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Discus.h</includes>
    <includes id="_diff_powers_8h" name="DiffPowers.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/DiffPowers.h</includes>
    <includes id="_c_i_g_t_a_b2_8h" name="CIGTAB2.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/CIGTAB2.h</includes>
    <includes id="_c_i_g_t_a_b1_8h" name="CIGTAB1.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/CIGTAB1.h</includes>
    <includes id="_cigar_discus_8h" name="CigarDiscus.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/CigarDiscus.h</includes>
    <includes id="_cigar_8h" name="Cigar.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Cigar.h</includes>
    <includes id="_ackley_8h" name="Ackley.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Ackley.h</includes>
  </compound>
  <compound kind="file">
    <name>Cigar.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_cigar_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>CigarDiscus.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_cigar_discus_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>CIGTAB1.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_c_i_g_t_a_b1_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
    <includes id="rotations_8h" name="rotations.h" local="no" import="no" module="no" objc="no">shark/LinAlg/rotations.h</includes>
  </compound>
  <compound kind="file">
    <name>CIGTAB2.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_c_i_g_t_a_b2_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
    <includes id="rotations_8h" name="rotations.h" local="no" import="no" module="no" objc="no">shark/LinAlg/rotations.h</includes>
  </compound>
  <compound kind="file">
    <name>ConstrainedSphere.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_constrained_sphere_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>DiffPowers.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_diff_powers_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>Discus.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_discus_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>DTLZ1.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_d_t_l_z1_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>DTLZ2.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_d_t_l_z2_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>DTLZ3.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_d_t_l_z3_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>DTLZ4.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_d_t_l_z4_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>DTLZ5.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_d_t_l_z5_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>DTLZ6.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_d_t_l_z6_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>DTLZ7.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_d_t_l_z7_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>ELLI1.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_e_l_l_i1_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="rotations_8h" name="rotations.h" local="no" import="no" module="no" objc="no">shark/LinAlg/rotations.h</includes>
  </compound>
  <compound kind="file">
    <name>ELLI2.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_e_l_l_i2_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="rotations_8h" name="rotations.h" local="no" import="no" module="no" objc="no">shark/LinAlg/rotations.h</includes>
  </compound>
  <compound kind="file">
    <name>Ellipsoid.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_ellipsoid_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>Fonseca.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_fonseca_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>GSP.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_g_s_p_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>Himmelblau.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_himmelblau_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>Hypervolumes.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_hypervolumes_8h.html</filename>
    <includes id="_benchmarks_8h" name="Benchmarks.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/Benchmarks.h</includes>
  </compound>
  <compound kind="file">
    <name>IHR1.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_i_h_r1_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
    <includes id="rotations_8h" name="rotations.h" local="no" import="no" module="no" objc="no">shark/LinAlg/rotations.h</includes>
  </compound>
  <compound kind="file">
    <name>IHR2.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_i_h_r2_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
    <includes id="rotations_8h" name="rotations.h" local="no" import="no" module="no" objc="no">shark/LinAlg/rotations.h</includes>
  </compound>
  <compound kind="file">
    <name>IHR3.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_i_h_r3_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
    <includes id="rotations_8h" name="rotations.h" local="no" import="no" module="no" objc="no">shark/LinAlg/rotations.h</includes>
  </compound>
  <compound kind="file">
    <name>IHR4.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_i_h_r4_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
    <includes id="rotations_8h" name="rotations.h" local="no" import="no" module="no" objc="no">shark/LinAlg/rotations.h</includes>
  </compound>
  <compound kind="file">
    <name>IHR6.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_i_h_r6_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
    <includes id="rotations_8h" name="rotations.h" local="no" import="no" module="no" objc="no">shark/LinAlg/rotations.h</includes>
  </compound>
  <compound kind="file">
    <name>LZ1.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_l_z1_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>LZ2.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_l_z2_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>LZ3.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_l_z3_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>LZ4.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_l_z4_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>LZ5.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_l_z5_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>LZ6.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_l_z6_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>LZ7.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_l_z7_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>LZ8.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_l_z8_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>LZ9.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_l_z9_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>MarkovPole.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_markov_pole_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_single_pole_8h" name="SinglePole.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/PoleSimulators/SinglePole.h</includes>
    <includes id="_double_pole_8h" name="DoublePole.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/PoleSimulators/DoublePole.h</includes>
  </compound>
  <compound kind="file">
    <name>MultiObjectiveBenchmark.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_multi_objective_benchmark_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_rotated_error_function_8h" name="RotatedErrorFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/RotatedErrorFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="rotations_8h" name="rotations.h" local="no" import="no" module="no" objc="no">shark/LinAlg/rotations.h</includes>
  </compound>
  <compound kind="file">
    <name>NonMarkovPole.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_non_markov_pole_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_single_pole_8h" name="SinglePole.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/PoleSimulators/SinglePole.h</includes>
    <includes id="_double_pole_8h" name="DoublePole.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Benchmarks/PoleSimulators/DoublePole.h</includes>
  </compound>
  <compound kind="file">
    <name>DoublePole.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/PoleSimulators/</path>
    <filename>_double_pole_8h.html</filename>
    <includes id="_math_8h" name="Math.h" local="no" import="no" module="no" objc="no">math.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>SinglePole.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/PoleSimulators/</path>
    <filename>_single_pole_8h.html</filename>
    <includes id="_math_8h" name="Math.h" local="no" import="no" module="no" objc="no">math.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>Rosenbrock.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_rosenbrock_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>RotatedErrorFunction.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_rotated_error_function_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="rotations_8h" name="rotations.h" local="no" import="no" module="no" objc="no">shark/LinAlg/rotations.h</includes>
  </compound>
  <compound kind="file">
    <name>Schwefel.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_schwefel_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>Sphere.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_sphere_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>ZDT1.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_z_d_t1_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>ZDT2.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_z_d_t2_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>ZDT3.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_z_d_t3_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>ZDT4.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_z_d_t4_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>ZDT6.h</name>
    <path>include/shark/ObjectiveFunctions/Benchmarks/</path>
    <filename>_z_d_t6_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_box_constraint_handler_8h" name="BoxConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/BoxConstraintHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>BoxConstraintHandler.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_box_constraint_handler_8h.html</filename>
    <includes id="_abstract_constraint_handler_8h" name="AbstractConstraintHandler.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractConstraintHandler.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>CombinedObjectiveFunction.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_combined_objective_function_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>CrossValidationError.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_cross_validation_error_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_abstract_trainer_8h" name="AbstractTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractTrainer.h</includes>
    <includes id="_abstract_single_objective_optimizer_8h" name="AbstractSingleObjectiveOptimizer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/AbstractSingleObjectiveOptimizer.h</includes>
    <includes id="_abstract_cost_8h" name="AbstractCost.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractCost.h</includes>
    <includes id="_c_v_dataset_tools_8h" name="CVDatasetTools.h" local="no" import="no" module="no" objc="no">shark/Data/CVDatasetTools.h</includes>
  </compound>
  <compound kind="file">
    <name>ErrorFunction.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_error_function_8h.html</filename>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
    <includes id="_abstract_loss_8h" name="AbstractLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/AbstractLoss.h</includes>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_weighted_dataset_8h" name="WeightedDataset.h" local="no" import="no" module="no" objc="no">shark/Data/WeightedDataset.h</includes>
  </compound>
  <compound kind="file">
    <name>EvaluationArchive.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_evaluation_archive_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>KernelTargetAlignment.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_kernel_target_alignment_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_data_2_statistics_8h" name="Statistics.h" local="no" import="no" module="no" objc="no">shark/Data/Statistics.h</includes>
    <includes id="_abstract_kernel_function_8h" name="AbstractKernelFunction.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/AbstractKernelFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>LooError.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_loo_error_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
    <includes id="_abstract_loss_8h" name="AbstractLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/AbstractLoss.h</includes>
    <includes id="_abstract_trainer_8h" name="AbstractTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/AbstractTrainer.h</includes>
    <includes id="_data_view_8h" name="DataView.h" local="no" import="no" module="no" objc="no">shark/Data/DataView.h</includes>
  </compound>
  <compound kind="file">
    <name>LooErrorCSvm.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_loo_error_c_svm_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_zero_one_loss_8h" name="ZeroOneLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/ZeroOneLoss.h</includes>
    <includes id="_box_constrained_problems_8h" name="BoxConstrainedProblems.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/BoxConstrainedProblems.h</includes>
    <includes id="_svm_problems_8h" name="SvmProblems.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/SvmProblems.h</includes>
    <includes id="_cached_matrix_8h" name="CachedMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/CachedMatrix.h</includes>
    <includes id="_kernel_matrix_8h" name="KernelMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/KernelMatrix.h</includes>
    <includes id="_kernel_expansion_8h" name="KernelExpansion.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelExpansion.h</includes>
  </compound>
  <compound kind="file">
    <name>AbsoluteLoss.h</name>
    <path>include/shark/ObjectiveFunctions/Loss/</path>
    <filename>_absolute_loss_8h.html</filename>
    <includes id="_abstract_loss_8h" name="AbstractLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/AbstractLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractLoss.h</name>
    <path>include/shark/ObjectiveFunctions/Loss/</path>
    <filename>_abstract_loss_8h.html</filename>
    <includes id="_abstract_cost_8h" name="AbstractCost.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractCost.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_proxy_reference_traits_8h" name="ProxyReferenceTraits.h" local="no" import="no" module="no" objc="no">shark/Core/Traits/ProxyReferenceTraits.h</includes>
  </compound>
  <compound kind="file">
    <name>CrossEntropy.h</name>
    <path>include/shark/ObjectiveFunctions/Loss/</path>
    <filename>_cross_entropy_8h.html</filename>
    <includes id="_abstract_loss_8h" name="AbstractLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/AbstractLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>DiscreteLoss.h</name>
    <path>include/shark/ObjectiveFunctions/Loss/</path>
    <filename>_discrete_loss_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_abstract_loss_8h" name="AbstractLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/AbstractLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>EpsilonHingeLoss.h</name>
    <path>include/shark/ObjectiveFunctions/Loss/</path>
    <filename>_epsilon_hinge_loss_8h.html</filename>
    <includes id="_abstract_loss_8h" name="AbstractLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/AbstractLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>HingeLoss.h</name>
    <path>include/shark/ObjectiveFunctions/Loss/</path>
    <filename>_hinge_loss_8h.html</filename>
    <includes id="_abstract_loss_8h" name="AbstractLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/AbstractLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>HuberLoss.h</name>
    <path>include/shark/ObjectiveFunctions/Loss/</path>
    <filename>_huber_loss_8h.html</filename>
    <includes id="_abstract_loss_8h" name="AbstractLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/AbstractLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>SquaredEpsilonHingeLoss.h</name>
    <path>include/shark/ObjectiveFunctions/Loss/</path>
    <filename>_squared_epsilon_hinge_loss_8h.html</filename>
    <includes id="_abstract_loss_8h" name="AbstractLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/AbstractLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>SquaredHingeLoss.h</name>
    <path>include/shark/ObjectiveFunctions/Loss/</path>
    <filename>_squared_hinge_loss_8h.html</filename>
    <includes id="_abstract_loss_8h" name="AbstractLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/AbstractLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>SquaredLoss.h</name>
    <path>include/shark/ObjectiveFunctions/Loss/</path>
    <filename>_squared_loss_8h.html</filename>
    <includes id="_abstract_loss_8h" name="AbstractLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/AbstractLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>ZeroOneLoss.h</name>
    <path>include/shark/ObjectiveFunctions/Loss/</path>
    <filename>_zero_one_loss_8h.html</filename>
    <includes id="_abstract_loss_8h" name="AbstractLoss.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/AbstractLoss.h</includes>
  </compound>
  <compound kind="file">
    <name>NegativeAUC.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_negative_a_u_c_8h.html</filename>
    <includes id="_abstract_cost_8h" name="AbstractCost.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractCost.h</includes>
    <includes id="_key_value_pair_8h" name="KeyValuePair.h" local="no" import="no" module="no" objc="no">shark/Core/utility/KeyValuePair.h</includes>
  </compound>
  <compound kind="file">
    <name>NegativeGaussianProcessEvidence.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_negative_gaussian_process_evidence_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_kernel_helpers_8h" name="KernelHelpers.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelHelpers.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>NegativeLogLikelihood.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_negative_log_likelihood_8h.html</filename>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>RadiusMarginQuotient.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_radius_margin_quotient_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_svm_problems_8h" name="SvmProblems.h" local="no" import="no" module="no" objc="no">shark/Algorithms/QP/SvmProblems.h</includes>
    <includes id="_kernel_helpers_8h" name="KernelHelpers.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/KernelHelpers.h</includes>
    <includes id="_cached_matrix_8h" name="CachedMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/CachedMatrix.h</includes>
    <includes id="_kernel_matrix_8h" name="KernelMatrix.h" local="no" import="no" module="no" objc="no">shark/LinAlg/KernelMatrix.h</includes>
  </compound>
  <compound kind="file">
    <name>Regularizer.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_regularizer_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>SvmLogisticInterpretation.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_svm_logistic_interpretation_8h.html</filename>
    <includes id="_c_v_dataset_tools_8h" name="CVDatasetTools.h" local="no" import="no" module="no" objc="no">shark/Data/CVDatasetTools.h</includes>
    <includes id="_c_svm_derivative_8h" name="CSvmDerivative.h" local="no" import="no" module="no" objc="no">shark/Models/Kernels/CSvmDerivative.h</includes>
    <includes id="_c_svm_trainer_8h" name="CSvmTrainer.h" local="no" import="no" module="no" objc="no">shark/Algorithms/Trainers/CSvmTrainer.h</includes>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_error_function_8h" name="ErrorFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/ErrorFunction.h</includes>
    <includes id="_cross_entropy_8h" name="CrossEntropy.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/Loss/CrossEntropy.h</includes>
    <includes id="_b_f_g_s_8h" name="BFGS.h" local="no" import="no" module="no" objc="no">shark/Algorithms/GradientDescent/BFGS.h</includes>
  </compound>
  <compound kind="file">
    <name>VariationalAutoencoderError.h</name>
    <path>include/shark/ObjectiveFunctions/</path>
    <filename>_variational_autoencoder_error_8h.html</filename>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>MultiNomialDistribution.h</name>
    <path>include/shark/Statistics/Distributions/</path>
    <filename>_multi_nomial_distribution_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>MultiVariateNormalDistribution.h</name>
    <path>include/shark/Statistics/Distributions/</path>
    <filename>_multi_variate_normal_distribution_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>ROC.h</name>
    <path>include/shark/Statistics/</path>
    <filename>_r_o_c_8h.html</filename>
    <includes id="_d_l_l_support_8h" name="DLLSupport.h" local="no" import="no" module="no" objc="no">shark/Core/DLLSupport.h</includes>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>Statistics.h</name>
    <path>include/shark/Data/</path>
    <filename>_data_2_statistics_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>Statistics.h</name>
    <path>include/shark/Statistics/</path>
    <filename>_statistics_2_statistics_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>analytics.h</name>
    <path>include/shark/Unsupervised/RBM/</path>
    <filename>analytics_8h.html</filename>
    <includes id="_r_b_m_8h" name="RBM.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/RBM.h</includes>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
  </compound>
  <compound kind="file">
    <name>BinaryRBM.h</name>
    <path>include/shark/Unsupervised/RBM/</path>
    <filename>_binary_r_b_m_8h.html</filename>
    <includes id="_r_b_m_8h" name="RBM.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/RBM.h</includes>
    <includes id="_energy_8h" name="Energy.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Energy.h</includes>
    <includes id="_binary_layer_8h" name="BinaryLayer.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Neuronlayers/BinaryLayer.h</includes>
    <includes id="_gibbs_operator_8h" name="GibbsOperator.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Sampling/GibbsOperator.h</includes>
    <includes id="_tempered_markov_chain_8h" name="TemperedMarkovChain.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Sampling/TemperedMarkovChain.h</includes>
    <includes id="_markov_chain_8h" name="MarkovChain.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Sampling/MarkovChain.h</includes>
    <includes id="_contrastive_divergence_8h" name="ContrastiveDivergence.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/GradientApproximations/ContrastiveDivergence.h</includes>
    <includes id="_multi_chain_approximator_8h" name="MultiChainApproximator.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/GradientApproximations/MultiChainApproximator.h</includes>
    <includes id="_single_chain_approximator_8h" name="SingleChainApproximator.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/GradientApproximations/SingleChainApproximator.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>BipolarRBM.h</name>
    <path>include/shark/Unsupervised/RBM/</path>
    <filename>_bipolar_r_b_m_8h.html</filename>
    <includes id="_r_b_m_8h" name="RBM.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/RBM.h</includes>
    <includes id="_energy_8h" name="Energy.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Energy.h</includes>
    <includes id="_bipolar_layer_8h" name="BipolarLayer.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Neuronlayers/BipolarLayer.h</includes>
    <includes id="_markov_chain_8h" name="MarkovChain.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Sampling/MarkovChain.h</includes>
    <includes id="_tempered_markov_chain_8h" name="TemperedMarkovChain.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Sampling/TemperedMarkovChain.h</includes>
    <includes id="_gibbs_operator_8h" name="GibbsOperator.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Sampling/GibbsOperator.h</includes>
    <includes id="_contrastive_divergence_8h" name="ContrastiveDivergence.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/GradientApproximations/ContrastiveDivergence.h</includes>
    <includes id="_multi_chain_approximator_8h" name="MultiChainApproximator.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/GradientApproximations/MultiChainApproximator.h</includes>
    <includes id="_single_chain_approximator_8h" name="SingleChainApproximator.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/GradientApproximations/SingleChainApproximator.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>Energy.h</name>
    <path>include/shark/Unsupervised/RBM/</path>
    <filename>_energy_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_batch_interface_8h" name="BatchInterface.h" local="no" import="no" module="no" objc="no">shark/Data/BatchInterface.h</includes>
  </compound>
  <compound kind="file">
    <name>GaussianBinaryRBM.h</name>
    <path>include/shark/Unsupervised/RBM/</path>
    <filename>_gaussian_binary_r_b_m_8h.html</filename>
    <includes id="_r_b_m_8h" name="RBM.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/RBM.h</includes>
    <includes id="_energy_8h" name="Energy.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Energy.h</includes>
    <includes id="_binary_layer_8h" name="BinaryLayer.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Neuronlayers/BinaryLayer.h</includes>
    <includes id="_gaussian_layer_8h" name="GaussianLayer.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Neuronlayers/GaussianLayer.h</includes>
    <includes id="_gibbs_operator_8h" name="GibbsOperator.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Sampling/GibbsOperator.h</includes>
    <includes id="_tempered_markov_chain_8h" name="TemperedMarkovChain.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Sampling/TemperedMarkovChain.h</includes>
    <includes id="_markov_chain_8h" name="MarkovChain.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Sampling/MarkovChain.h</includes>
    <includes id="_contrastive_divergence_8h" name="ContrastiveDivergence.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/GradientApproximations/ContrastiveDivergence.h</includes>
    <includes id="_multi_chain_approximator_8h" name="MultiChainApproximator.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/GradientApproximations/MultiChainApproximator.h</includes>
    <includes id="_single_chain_approximator_8h" name="SingleChainApproximator.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/GradientApproximations/SingleChainApproximator.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>ContrastiveDivergence.h</name>
    <path>include/shark/Unsupervised/RBM/GradientApproximations/</path>
    <filename>_contrastive_divergence_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_energy_8h" name="Energy.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Energy.h</includes>
  </compound>
  <compound kind="file">
    <name>ExactGradient.h</name>
    <path>include/shark/Unsupervised/RBM/GradientApproximations/</path>
    <filename>_exact_gradient_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
    <includes id="_gibbs_operator_8h" name="GibbsOperator.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Sampling/GibbsOperator.h</includes>
    <includes id="analytics_8h" name="analytics.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/analytics.h</includes>
  </compound>
  <compound kind="file">
    <name>MultiChainApproximator.h</name>
    <path>include/shark/Unsupervised/RBM/GradientApproximations/</path>
    <filename>_multi_chain_approximator_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>SingleChainApproximator.h</name>
    <path>include/shark/Unsupervised/RBM/GradientApproximations/</path>
    <filename>_single_chain_approximator_8h.html</filename>
    <includes id="_abstract_objective_function_8h" name="AbstractObjectiveFunction.h" local="no" import="no" module="no" objc="no">shark/ObjectiveFunctions/AbstractObjectiveFunction.h</includes>
  </compound>
  <compound kind="file">
    <name>BinaryLayer.h</name>
    <path>include/shark/Unsupervised/RBM/Neuronlayers/</path>
    <filename>_binary_layer_8h.html</filename>
    <includes id="_i_serializable_8h" name="ISerializable.h" local="no" import="no" module="no" objc="no">shark/Core/ISerializable.h</includes>
    <includes id="_i_parameterizable_8h" name="IParameterizable.h" local="no" import="no" module="no" objc="no">shark/Core/IParameterizable.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_batch_interface_adapt_struct_8h" name="BatchInterfaceAdaptStruct.h" local="no" import="no" module="no" objc="no">shark/Data/BatchInterfaceAdaptStruct.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_two_state_space_8h" name="TwoStateSpace.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/StateSpaces/TwoStateSpace.h</includes>
    <includes id="_open_m_p_8h" name="OpenMP.h" local="no" import="no" module="no" objc="no">shark/Core/OpenMP.h</includes>
  </compound>
  <compound kind="file">
    <name>BipolarLayer.h</name>
    <path>include/shark/Unsupervised/RBM/Neuronlayers/</path>
    <filename>_bipolar_layer_8h.html</filename>
    <includes id="_i_serializable_8h" name="ISerializable.h" local="no" import="no" module="no" objc="no">shark/Core/ISerializable.h</includes>
    <includes id="_i_parameterizable_8h" name="IParameterizable.h" local="no" import="no" module="no" objc="no">shark/Core/IParameterizable.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_batch_interface_adapt_struct_8h" name="BatchInterfaceAdaptStruct.h" local="no" import="no" module="no" objc="no">shark/Data/BatchInterfaceAdaptStruct.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_two_state_space_8h" name="TwoStateSpace.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/StateSpaces/TwoStateSpace.h</includes>
    <includes id="_open_m_p_8h" name="OpenMP.h" local="no" import="no" module="no" objc="no">shark/Core/OpenMP.h</includes>
  </compound>
  <compound kind="file">
    <name>GaussianLayer.h</name>
    <path>include/shark/Unsupervised/RBM/Neuronlayers/</path>
    <filename>_gaussian_layer_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_real_space_8h" name="RealSpace.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/StateSpaces/RealSpace.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_i_serializable_8h" name="ISerializable.h" local="no" import="no" module="no" objc="no">shark/Core/ISerializable.h</includes>
    <includes id="_i_parameterizable_8h" name="IParameterizable.h" local="no" import="no" module="no" objc="no">shark/Core/IParameterizable.h</includes>
    <includes id="_math_8h" name="Math.h" local="no" import="no" module="no" objc="no">shark/Core/Math.h</includes>
    <includes id="_batch_interface_adapt_struct_8h" name="BatchInterfaceAdaptStruct.h" local="no" import="no" module="no" objc="no">shark/Data/BatchInterfaceAdaptStruct.h</includes>
    <includes id="_open_m_p_8h" name="OpenMP.h" local="no" import="no" module="no" objc="no">shark/Core/OpenMP.h</includes>
  </compound>
  <compound kind="file">
    <name>BarsAndStripes.h</name>
    <path>include/shark/Unsupervised/RBM/Problems/</path>
    <filename>_bars_and_stripes_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>DistantModes.h</name>
    <path>include/shark/Unsupervised/RBM/Problems/</path>
    <filename>_distant_modes_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
  </compound>
  <compound kind="file">
    <name>MNIST.h</name>
    <path>include/shark/Unsupervised/RBM/Problems/</path>
    <filename>_m_n_i_s_t_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
  </compound>
  <compound kind="file">
    <name>Shifter.h</name>
    <path>include/shark/Unsupervised/RBM/Problems/</path>
    <filename>_shifter_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>RBM.h</name>
    <path>include/shark/Unsupervised/RBM/</path>
    <filename>_r_b_m_8h.html</filename>
    <includes id="_abstract_model_8h" name="AbstractModel.h" local="no" import="no" module="no" objc="no">shark/Models/AbstractModel.h</includes>
    <includes id="_energy_8h" name="Energy.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Energy.h</includes>
  </compound>
  <compound kind="file">
    <name>EnergyStoringTemperedMarkovChain.h</name>
    <path>include/shark/Unsupervised/RBM/Sampling/</path>
    <filename>_energy_storing_tempered_markov_chain_8h.html</filename>
    <includes id="_tempered_markov_chain_8h" name="TemperedMarkovChain.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Sampling/TemperedMarkovChain.h</includes>
  </compound>
  <compound kind="file">
    <name>GibbsOperator.h</name>
    <path>include/shark/Unsupervised/RBM/Sampling/</path>
    <filename>_gibbs_operator_8h.html</filename>
    <includes id="_base_8h" name="Base.h" local="no" import="no" module="no" objc="no">shark/LinAlg/Base.h</includes>
  </compound>
  <compound kind="file">
    <name>MarkovChain.h</name>
    <path>include/shark/Unsupervised/RBM/Sampling/</path>
    <filename>_markov_chain_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_tags_8h" name="Tags.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Tags.h</includes>
  </compound>
  <compound kind="file">
    <name>TemperedMarkovChain.h</name>
    <path>include/shark/Unsupervised/RBM/Sampling/</path>
    <filename>_tempered_markov_chain_8h.html</filename>
    <includes id="_dataset_8h" name="Dataset.h" local="no" import="no" module="no" objc="no">shark/Data/Dataset.h</includes>
    <includes id="_random_8h" name="Random.h" local="no" import="no" module="no" objc="no">shark/Core/Random.h</includes>
    <includes id="_tags_8h" name="Tags.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Tags.h</includes>
  </compound>
  <compound kind="file">
    <name>RealSpace.h</name>
    <path>include/shark/Unsupervised/RBM/StateSpaces/</path>
    <filename>_real_space_8h.html</filename>
    <includes id="_tags_8h" name="Tags.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Tags.h</includes>
  </compound>
  <compound kind="file">
    <name>TwoStateSpace.h</name>
    <path>include/shark/Unsupervised/RBM/StateSpaces/</path>
    <filename>_two_state_space_8h.html</filename>
    <includes id="_tags_8h" name="Tags.h" local="no" import="no" module="no" objc="no">shark/Unsupervised/RBM/Tags.h</includes>
    <includes id="_exception_8h" name="Exception.h" local="no" import="no" module="no" objc="no">shark/Core/Exception.h</includes>
  </compound>
  <compound kind="file">
    <name>Tags.h</name>
    <path>include/shark/Unsupervised/RBM/</path>
    <filename>_tags_8h.html</filename>
    <includes id="_flags_8h" name="Flags.h" local="no" import="no" module="no" objc="no">shark/Core/Flags.h</includes>
  </compound>
  <compound kind="class">
    <name>shark::AbsoluteLoss</name>
    <filename>classshark_1_1_absolute_loss.html</filename>
    <templarg>class VectorType</templarg>
    <base>shark::AbstractLoss</base>
    <member kind="typedef">
      <type>base_type::BatchLabelType</type>
      <name>BatchLabelType</name>
      <anchorfile>classshark_1_1_absolute_loss.html</anchorfile>
      <anchor>ad37c06e8490fc84fdc8d2018d3679a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_absolute_loss.html</anchorfile>
      <anchor>a06f9c5158cce6fb93ad9d00b484d29d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbsoluteLoss</name>
      <anchorfile>classshark_1_1_absolute_loss.html</anchorfile>
      <anchor>a61e08fc516ca03b3a7ddd57288a2202f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_absolute_loss.html</anchorfile>
      <anchor>a50eaf3cfcf3f288a25af75e32df81211</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_absolute_loss.html</anchorfile>
      <anchor>a9799217c0a23c4af54646093a7230946</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions) const</arglist>
    </member>
    <member kind="function">
      <type>virtual double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_absolute_loss.html</anchorfile>
      <anchor>add4a2b4308ff290a10552824fdb33550</anchor>
      <arglist>(BatchLabelType const &amp;target, BatchOutputType const &amp;prediction) const=0</arglist>
    </member>
    <member kind="function">
      <type>virtual double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_absolute_loss.html</anchorfile>
      <anchor>a26f69483e0f62462bbc45e2734f65a4b</anchor>
      <arglist>(ConstLabelReference target, ConstOutputReference prediction) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_absolute_loss.html</anchorfile>
      <anchor>a0d53dd678d58b2cb3a213cdc829937da</anchor>
      <arglist>(Data&lt; LabelType &gt; const &amp;targets, Data&lt; OutputType &gt; const &amp;predictions) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractBudgetMaintenanceStrategy</name>
    <filename>classshark_1_1_abstract_budget_maintenance_strategy.html</filename>
    <templarg>class InputType</templarg>
    <member kind="typedef">
      <type>KernelExpansion&lt; InputType &gt;</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_abstract_budget_maintenance_strategy.html</anchorfile>
      <anchor>a2fce0a0656e77df1f5e54bea0d3c9f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabeledData&lt; InputType, unsigned int &gt;</type>
      <name>DataType</name>
      <anchorfile>classshark_1_1_abstract_budget_maintenance_strategy.html</anchorfile>
      <anchor>a7027102ef6150ec0de810886b8098718</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DataType::element_type</type>
      <name>ElementType</name>
      <anchorfile>classshark_1_1_abstract_budget_maintenance_strategy.html</anchorfile>
      <anchor>a4e4e18bcc754402146beb894a7c3d7cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractBudgetMaintenanceStrategy</name>
      <anchorfile>classshark_1_1_abstract_budget_maintenance_strategy.html</anchorfile>
      <anchor>a2a6d7afdbb1e6dc61f86619dd526a544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addToModel</name>
      <anchorfile>classshark_1_1_abstract_budget_maintenance_strategy.html</anchorfile>
      <anchor>a763d8224ee45bb2bb727cb05ac002b94</anchor>
      <arglist>(ModelType &amp;model, InputType const &amp;alpha, ElementType const &amp;supportVector)=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_abstract_budget_maintenance_strategy.html</anchorfile>
      <anchor>aa96771736bedb9e44f820e871ed98350</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findSmallestVector</name>
      <anchorfile>classshark_1_1_abstract_budget_maintenance_strategy.html</anchorfile>
      <anchor>ab6ab9d070c0988b041e96e66888a1841</anchor>
      <arglist>(ModelType const &amp;model, size_t &amp;minIndex, double &amp;minAlpha)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractClustering</name>
    <filename>classshark_1_1_abstract_clustering.html</filename>
    <templarg>class InputT</templarg>
    <base>shark::INameable</base>
    <base>shark::IParameterizable</base>
    <base>shark::ISerializable</base>
    <member kind="enumeration">
      <type></type>
      <name>Feature</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>a2e5bf11e84922991bf66f4198a96e4e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_SOFT_MEMBERSHIP</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>a2e5bf11e84922991bf66f4198a96e4e7a183a78cbfd5ccf4d69f2b0e733af6ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InputT</type>
      <name>InputType</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>a519bea30fafabdaff33a85a1c27b8a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>OutputType</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>a42901ac7a67744a4dd7c785bb9407d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; InputType &gt;::type</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>a6865af40b0cab718706e9360b29f2a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; OutputType &gt;::type</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>a0857a0698bf699be93ccf595406bdf96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedFlags&lt; Feature &gt;</type>
      <name>Features</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>a981308504604ce9fb03222b07f28a5b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedFeatureNotAvailableException&lt; Feature &gt;</type>
      <name>FeatureNotAvailableException</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>ad7affb5327cd577e528b50405564ca71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_SOFT_MEMBERSHIP</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>a2e5bf11e84922991bf66f4198a96e4e7a183a78cbfd5ccf4d69f2b0e733af6ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Features &amp;</type>
      <name>features</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>a75bdfc87e939ec6310fc3ea8fd7e1f49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFeatures</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>a320b9fed0c193643f47977269f83a3b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSoftMembershipFunction</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>a48971e367865d932891873c21cb4e849</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>numberOfClusters</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>a2c913637b84340135b606912228f5851</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>a877c93a51f9416ce0f7dec4645086fc8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>hardMembership</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>a1b9a35a33f14aab84aac1cbf767bb813</anchor>
      <arglist>(InputType const &amp;pattern) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BatchOutputType</type>
      <name>hardMembership</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>af11841eae50fa5d031a7a6706e0fa9d9</anchor>
      <arglist>(BatchInputType const &amp;patterns) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealVector</type>
      <name>softMembership</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>abccfaab4d2d5c26ff5a16d7b085365d1</anchor>
      <arglist>(InputType const &amp;pattern) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealMatrix</type>
      <name>softMembership</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>ad6babdbb7b5979c5651698982fea7ca0</anchor>
      <arglist>(BatchInputType const &amp;patterns) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>a716046b5e610f0a26e3462d8dda27f45</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>a1256454c153c93d532738311bf7600a0</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Features</type>
      <name>m_features</name>
      <anchorfile>classshark_1_1_abstract_clustering.html</anchorfile>
      <anchor>a75910ba675486528e27893a95608510d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractConstraintHandler</name>
    <filename>classshark_1_1_abstract_constraint_handler.html</filename>
    <templarg>class SearchPointType</templarg>
    <member kind="enumeration">
      <type></type>
      <name>Feature</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>add5028257a6639b20d8158a8d2a39f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAN_PROVIDE_CLOSEST_FEASIBLE</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>add5028257a6639b20d8158a8d2a39f8ba48f78b9f8beb3409073884150778c4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_BOX_CONSTRAINED</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>add5028257a6639b20d8158a8d2a39f8ba67b53854ecfb4088233fa07aae44677e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAN_GENERATE_RANDOM_POINT</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>add5028257a6639b20d8158a8d2a39f8bafeaf8889f19650bb54dd7f0deca26fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedFlags&lt; Feature &gt;</type>
      <name>Features</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>add645da2ddc1cdbdaa89237a2a2d0b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedFeatureNotAvailableException&lt; Feature &gt;</type>
      <name>FeatureNotAvailableException</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>a9b9ed60c324f540d803337da646a2116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAN_PROVIDE_CLOSEST_FEASIBLE</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>add5028257a6639b20d8158a8d2a39f8ba48f78b9f8beb3409073884150778c4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_BOX_CONSTRAINED</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>add5028257a6639b20d8158a8d2a39f8ba67b53854ecfb4088233fa07aae44677e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAN_GENERATE_RANDOM_POINT</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>add5028257a6639b20d8158a8d2a39f8bafeaf8889f19650bb54dd7f0deca26fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Features &amp;</type>
      <name>features</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>a19f2929814f2df8c5af3d801f6f0fa4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFeatures</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>a5a16a6bb43de84d48387c1522f7a4a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractConstraintHandler</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>af9899a9acc5ed780f9849b3334b1921b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canProvideClosestFeasible</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>a05adea67dd581616abf51b9f51d425c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBoxConstrained</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>aedb08703ce0c179aa3a05f17d4a1874f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canGenerateRandomPoint</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>a454524f3253a60a2564a21045fbdc5e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>generateRandomPoint</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>ae6d491f9552b1a1ce440e8c675db929b</anchor>
      <arglist>(random::rng_type &amp;rng, SearchPointType &amp;startingPoint) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isFeasible</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>aeef35996d9bc707be399480e8e0c1f82</anchor>
      <arglist>(SearchPointType const &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>closestFeasible</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>abb58033fab48e9ffd58021054f916c7f</anchor>
      <arglist>(SearchPointType &amp;) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Features</type>
      <name>m_features</name>
      <anchorfile>classshark_1_1_abstract_constraint_handler.html</anchorfile>
      <anchor>abd9bacdebce91be7f1e7ff1b9d9fc826</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractCost</name>
    <filename>classshark_1_1_abstract_cost.html</filename>
    <templarg>class LabelT</templarg>
    <templarg>class OutputT</templarg>
    <base>shark::INameable</base>
    <member kind="enumeration">
      <type></type>
      <name>Feature</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>a3f2ae17818520465f0e73257fd202bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_FIRST_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>a3f2ae17818520465f0e73257fd202bacad1e0927ebd68caf428c52cc4cecc084a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_SECOND_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>a3f2ae17818520465f0e73257fd202baca757525584b3fc0a7aa977255fd6d8232</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_LOSS_FUNCTION</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>a3f2ae17818520465f0e73257fd202bacaaa945f1c8fb58952a4dbea1a1ff86231</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OutputT</type>
      <name>OutputType</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>aad35be71a61620930c1b6c44aecb7c33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabelT</type>
      <name>LabelType</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>aa0d1c0437931e46d5b6192b214bc6f59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; OutputType &gt;::type</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>a34c29a41e3dc317b2c97a49e2dbe5da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; LabelType &gt;::type</type>
      <name>BatchLabelType</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>ae76592e18c367f68e9456e76acc35c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedFlags&lt; Feature &gt;</type>
      <name>Features</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>a65e8014268b6aa7215900d43a291eae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedFeatureNotAvailableException&lt; Feature &gt;</type>
      <name>FeatureNotAvailableException</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>a24a1a53503c39eeeae1d7b3d43fd120f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_FIRST_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>a3f2ae17818520465f0e73257fd202bacad1e0927ebd68caf428c52cc4cecc084a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_SECOND_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>a3f2ae17818520465f0e73257fd202baca757525584b3fc0a7aa977255fd6d8232</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_LOSS_FUNCTION</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>a3f2ae17818520465f0e73257fd202bacaaa945f1c8fb58952a4dbea1a1ff86231</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractCost</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>a08169d91360192c906792ffe9a07f14f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Features &amp;</type>
      <name>features</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>ade575e40884a417f5afa3e1a67ec9086</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFeatures</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>a34f65782895f7d2018970e3f961f19f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFirstDerivative</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>a5aef444b7ef11ba6b31c8b2b0a9c24c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLossFunction</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>aa9a59d0fffd49c260995c05820723029</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>ab59cf559ad6f04d07752ffdcda155723</anchor>
      <arglist>(Data&lt; LabelType &gt; const &amp;targets, Data&lt; OutputType &gt; const &amp;predictions) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>ab299a1d05b8592018de7df84c1928d42</anchor>
      <arglist>(Data&lt; LabelType &gt; const &amp;targets, Data&lt; OutputType &gt; const &amp;predictions) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Features</type>
      <name>m_features</name>
      <anchorfile>classshark_1_1_abstract_cost.html</anchorfile>
      <anchor>a97902a8a75733642a4472b463ae9b7dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractKernelFunction</name>
    <filename>classshark_1_1_abstract_kernel_function.html</filename>
    <templarg>class InputTypeT</templarg>
    <base>shark::AbstractMetric</base>
    <member kind="enumeration">
      <type></type>
      <name>Feature</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>af54c80ca837961761506e6c2eec15bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_FIRST_PARAMETER_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>af54c80ca837961761506e6c2eec15bdead621a9ae065d91a154055a38a7ea72f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_FIRST_INPUT_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>af54c80ca837961761506e6c2eec15bdeae4bd575af084f862f64bc665cad4c4ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_NORMALIZED</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>af54c80ca837961761506e6c2eec15bdea389ad713fc9ba77daf7a89714e5db666</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUPPORTS_VARIABLE_INPUT_SIZE</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>af54c80ca837961761506e6c2eec15bdeae04fd78a7baf17b1591cdb6ef289e8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::InputType</type>
      <name>InputType</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>a808acb34b9c95c6af0f48177d554bd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>adbf700c2ece7236c70cef4b88777a733</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstInputReference</type>
      <name>ConstInputReference</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>a40e365cb5ec7d2776105a4aef4e78df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstBatchInputReference</type>
      <name>ConstBatchInputReference</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>af923f26f3d015156bb5ac159b302311b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedFlags&lt; Feature &gt;</type>
      <name>Features</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>a63fdfe8b374750b9fa8288e06a666919</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedFeatureNotAvailableException&lt; Feature &gt;</type>
      <name>FeatureNotAvailableException</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>a619eef1551440a251e305cc6cd88d2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_FIRST_PARAMETER_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>af54c80ca837961761506e6c2eec15bdead621a9ae065d91a154055a38a7ea72f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_FIRST_INPUT_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>af54c80ca837961761506e6c2eec15bdeae4bd575af084f862f64bc665cad4c4ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_NORMALIZED</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>af54c80ca837961761506e6c2eec15bdea389ad713fc9ba77daf7a89714e5db666</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUPPORTS_VARIABLE_INPUT_SIZE</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>af54c80ca837961761506e6c2eec15bdeae04fd78a7baf17b1591cdb6ef289e8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractKernelFunction</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>a81ed7e2e580d7967ba21d82cf8105c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Features &amp;</type>
      <name>features</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>ad813e7a91adf505e31224fba2e0ee8d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFeatures</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>a6e65f245e63e075562917986673b99af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFirstParameterDerivative</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>ac0c799ac75db64200256ed50d34d2411</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFirstInputDerivative</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>a505ca00275044073f08aae949127a76f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNormalized</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>a3b60def6354aac30a9c2ce5bffa6f9ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supportsVariableInputSize</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>a225fbad3a0efdac21e4422576de2ce4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>a9057a4a71b4d28febb171e09bbd22c07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>abd10e3815efade90c7f9e2a7cc8bcb6c</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>a187783089e5ee24875e43b8865b1a46e</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>af9edfdfdd3cbee76f67f47cf244f8b3b</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result, State &amp;state) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>abfb9bc53f137dc1e28bf875e8851c26b</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>a2d5586ade0c39f0513c8e53ec5f99ed6</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>a48557b9834bc06ccb4e005ce441904c8</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficients, State const &amp;state, RealVector &amp;gradient) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>weightedInputDerivative</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>af534a7a45f73baab879c2f0bfb75f00a</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficientsX2, State const &amp;state, BatchInputType &amp;gradient) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>featureDistanceSqr</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>a4526b02196952d7af3bc76633c8bd6b7</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealMatrix</type>
      <name>featureDistanceSqr</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>a5abde1fffe84a51cb07c2242eef632ef</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Features</type>
      <name>m_features</name>
      <anchorfile>classshark_1_1_abstract_kernel_function.html</anchorfile>
      <anchor>aa13e9ab3b8bbad9e1d773468671703e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractLinearSvmTrainer</name>
    <filename>classshark_1_1_abstract_linear_svm_trainer.html</filename>
    <templarg>class InputType</templarg>
    <base>AbstractTrainer&lt; LinearClassifier&lt; InputType &gt;, unsigned int &gt;</base>
    <base>shark::QpConfig</base>
    <base>shark::IParameterizable</base>
    <member kind="typedef">
      <type>LinearClassifier&lt; InputType &gt;</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_abstract_linear_svm_trainer.html</anchorfile>
      <anchor>afd9542675b41765f725846a0d9814c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractLinearSvmTrainer</name>
      <anchorfile>classshark_1_1_abstract_linear_svm_trainer.html</anchorfile>
      <anchor>aef1e11708ae6adc64c75243cbc5acb89</anchor>
      <arglist>(double C, bool offset, bool unconstrained)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>C</name>
      <anchorfile>classshark_1_1_abstract_linear_svm_trainer.html</anchorfile>
      <anchor>ac310ca5530798f1190130d8495dd2f07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setC</name>
      <anchorfile>classshark_1_1_abstract_linear_svm_trainer.html</anchorfile>
      <anchor>a61480c0f4f75a280ed65c5bce0d285da</anchor>
      <arglist>(double C)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnconstrained</name>
      <anchorfile>classshark_1_1_abstract_linear_svm_trainer.html</anchorfile>
      <anchor>a8206943892e647fa0cb763f68bf603ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trainOffset</name>
      <anchorfile>classshark_1_1_abstract_linear_svm_trainer.html</anchorfile>
      <anchor>a5d00f5cfe51a496a1511219d12a4c054</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_abstract_linear_svm_trainer.html</anchorfile>
      <anchor>a78155370989cbdd02f04050693eccac5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_abstract_linear_svm_trainer.html</anchorfile>
      <anchor>af04cf4a3c0d918bc9f2925d4e7839859</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_abstract_linear_svm_trainer.html</anchorfile>
      <anchor>a5ed007917fc44b741ed25b472f3438dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>QpStoppingCondition</type>
      <name>m_stoppingcondition</name>
      <anchorfile>classshark_1_1_abstract_linear_svm_trainer.html</anchorfile>
      <anchor>a5032921be220d76232e7db3db3ef5225</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QpSolutionProperties</type>
      <name>m_solutionproperties</name>
      <anchorfile>classshark_1_1_abstract_linear_svm_trainer.html</anchorfile>
      <anchor>a994efb841504c52e509d0bac04f41fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_verbosity</name>
      <anchorfile>classshark_1_1_abstract_linear_svm_trainer.html</anchorfile>
      <anchor>ad6f54a3b58cd6a2e1774d5decf8fcc79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_C</name>
      <anchorfile>classshark_1_1_abstract_linear_svm_trainer.html</anchorfile>
      <anchor>a8c550ac91378f3c0239969414f2fd28a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_trainOffset</name>
      <anchorfile>classshark_1_1_abstract_linear_svm_trainer.html</anchorfile>
      <anchor>aef391c43b6111422e95ae58797ce36c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_unconstrained</name>
      <anchorfile>classshark_1_1_abstract_linear_svm_trainer.html</anchorfile>
      <anchor>a431b4445a96cafef50a412a33b906a55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractLineSearchOptimizer</name>
    <filename>classshark_1_1_abstract_line_search_optimizer.html</filename>
    <templarg>class SearchPointType</templarg>
    <base>AbstractSingleObjectiveOptimizer&lt; SearchPointType &gt;</base>
    <member kind="typedef">
      <type>AbstractSingleObjectiveOptimizer&lt; SearchPointType &gt;::ObjectiveFunctionType</type>
      <name>ObjectiveFunctionType</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>a444f639715ef1d69077760f88ff724a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractLineSearchOptimizer</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>ac31b2a22776918a63312376f198e9968</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>a197982cec7de486f937715a3f280be72</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction, SearchPointType const &amp;startingPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>ae6689563bafd7dbbb02299e161238b26</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>aac2d86149b2232e949f41f4d04f86002</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>a184bd9be70f815f9cb8d45782be364a7</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>LineSearch&lt; SearchPointType &gt; const &amp;</type>
      <name>lineSearch</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>a81c26e0694b3b7912be4a7deaab6a496</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LineSearch&lt; SearchPointType &gt; &amp;</type>
      <name>lineSearch</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>a6b75b17afa3d795e0c98b8ac0e9551dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType const &amp;</type>
      <name>derivative</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>ad35111bf627c76f3cedd4dd5f92fcd9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>initModel</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>a4f5d589bb165982f6298cc886ea41fa7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>computeSearchDirection</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>a042c4dddbfd3bf00c981e66bd363d6db</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LineSearch&lt; SearchPointType &gt;</type>
      <name>m_linesearch</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>a74e00af1aa4819d043c75a5fe445f88c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_dimension</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>ae6353cf1a8be6c679819b27301810d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_initialStepLength</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>a3035c91c531b9af33ff421196ee4aae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SearchPointType</type>
      <name>m_derivative</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>a603e289c36809ac54f4b68f1fc039854</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SearchPointType</type>
      <name>m_searchDirection</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>a62fa9e74475370676158fea923cbf9fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SearchPointType</type>
      <name>m_lastPoint</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>ad52639e41e70281b1829d57fc5b149d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SearchPointType</type>
      <name>m_lastDerivative</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>a6da37a4da255d8e01d1df93b9d44b016</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_lastValue</name>
      <anchorfile>classshark_1_1_abstract_line_search_optimizer.html</anchorfile>
      <anchor>aedcacc0ad24510580e074e462c9ea1c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractLoss</name>
    <filename>classshark_1_1_abstract_loss.html</filename>
    <templarg>class LabelT</templarg>
    <templarg>class OutputT</templarg>
    <base>shark::AbstractCost</base>
    <member kind="typedef">
      <type>OutputT</type>
      <name>OutputType</name>
      <anchorfile>classshark_1_1_abstract_loss.html</anchorfile>
      <anchor>aff632efe5055d1f07de94a790b222b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabelT</type>
      <name>LabelType</name>
      <anchorfile>classshark_1_1_abstract_loss.html</anchorfile>
      <anchor>a1a5e866edf2da03bb50778d2271c01da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealMatrix</type>
      <name>MatrixType</name>
      <anchorfile>classshark_1_1_abstract_loss.html</anchorfile>
      <anchor>a87fa1fa41bb3c1d5ce75137428724536</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; OutputType &gt;::type</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_abstract_loss.html</anchorfile>
      <anchor>ac3a1a01831f11b5357d6005837ac245b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; LabelType &gt;::type</type>
      <name>BatchLabelType</name>
      <anchorfile>classshark_1_1_abstract_loss.html</anchorfile>
      <anchor>a6e6cc93c4d6599c219d396dcab81e938</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstProxyReference&lt; LabelTypeconst &gt;::type</type>
      <name>ConstLabelReference</name>
      <anchorfile>classshark_1_1_abstract_loss.html</anchorfile>
      <anchor>ac52e23c4acfdb2d08b55420101eee787</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstProxyReference&lt; OutputTypeconst &gt;::type</type>
      <name>ConstOutputReference</name>
      <anchorfile>classshark_1_1_abstract_loss.html</anchorfile>
      <anchor>a50b1635725e3a6bbb6017a6e3c4a52ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractLoss</name>
      <anchorfile>classshark_1_1_abstract_loss.html</anchorfile>
      <anchor>aae8049c358e6ccfece94d4a978306c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_abstract_loss.html</anchorfile>
      <anchor>ad57cb10f610d506e522f707563acabb8</anchor>
      <arglist>(BatchLabelType const &amp;target, BatchOutputType const &amp;prediction) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_abstract_loss.html</anchorfile>
      <anchor>a26f69483e0f62462bbc45e2734f65a4b</anchor>
      <arglist>(ConstLabelReference target, ConstOutputReference prediction) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_abstract_loss.html</anchorfile>
      <anchor>a71706ed4c40d1635db1c372ecf5c8686</anchor>
      <arglist>(ConstLabelReference target, ConstOutputReference prediction, OutputType &amp;gradient) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_abstract_loss.html</anchorfile>
      <anchor>a7bde41258ced1db72e467f26d2439d0c</anchor>
      <arglist>(ConstLabelReference target, ConstOutputReference prediction, OutputType &amp;gradient, MatrixType &amp;hessian) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_abstract_loss.html</anchorfile>
      <anchor>aaff8e4357ab4257d46025368575aac15</anchor>
      <arglist>(BatchLabelType const &amp;target, BatchOutputType const &amp;prediction, BatchOutputType &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_abstract_loss.html</anchorfile>
      <anchor>a0d53dd678d58b2cb3a213cdc829937da</anchor>
      <arglist>(Data&lt; LabelType &gt; const &amp;targets, Data&lt; OutputType &gt; const &amp;predictions) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_abstract_loss.html</anchorfile>
      <anchor>a235a058270db9218fd889391d0385047</anchor>
      <arglist>(LabelType const &amp;target, OutputType const &amp;prediction) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_abstract_loss.html</anchorfile>
      <anchor>ad232712edcc7a2df8bf2bc4936ae93f9</anchor>
      <arglist>(BatchLabelType const &amp;target, BatchOutputType const &amp;prediction) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractMetric</name>
    <filename>classshark_1_1_abstract_metric.html</filename>
    <templarg>class InputTypeT</templarg>
    <base>shark::INameable</base>
    <base>shark::IParameterizable</base>
    <base>shark::ISerializable</base>
    <member kind="typedef">
      <type>InputTypeT</type>
      <name>InputType</name>
      <anchorfile>classshark_1_1_abstract_metric.html</anchorfile>
      <anchor>a8ef376e183e0fac88fc9234204c75569</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; InputTypeT &gt;::type</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_abstract_metric.html</anchorfile>
      <anchor>a3ed2427fcee73de8368e0e24ce61cada</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstProxyReference&lt; InputTypeconst &gt;::type</type>
      <name>ConstInputReference</name>
      <anchorfile>classshark_1_1_abstract_metric.html</anchorfile>
      <anchor>ad56b88ee5dab414cc3fe71ef6a36aa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstProxyReference&lt; BatchInputTypeconst &gt;::type</type>
      <name>ConstBatchInputReference</name>
      <anchorfile>classshark_1_1_abstract_metric.html</anchorfile>
      <anchor>aded3435936965bcee46366318e37cbc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractMetric</name>
      <anchorfile>classshark_1_1_abstract_metric.html</anchorfile>
      <anchor>aeb00f4cd45e33127a8e0580aa8f1e6f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractMetric</name>
      <anchorfile>classshark_1_1_abstract_metric.html</anchorfile>
      <anchor>a137acb940aeb83bc435414651b347db9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_abstract_metric.html</anchorfile>
      <anchor>a8286ec6f54f35ab53a92d42cb251d6e4</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_abstract_metric.html</anchorfile>
      <anchor>a525c9c1f3d9af398bb257b8e42cafe24</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>featureDistanceSqr</name>
      <anchorfile>classshark_1_1_abstract_metric.html</anchorfile>
      <anchor>a249ddd25ea56bc592ea2f8386070714d</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealMatrix</type>
      <name>featureDistanceSqr</name>
      <anchorfile>classshark_1_1_abstract_metric.html</anchorfile>
      <anchor>a97235679a7840667faffe78b2ca75692</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>featureDistance</name>
      <anchorfile>classshark_1_1_abstract_metric.html</anchorfile>
      <anchor>a7daef46282ceda23dd469bc51afacf14</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractModel</name>
    <filename>classshark_1_1_abstract_model.html</filename>
    <templarg>class InputTypeT</templarg>
    <templarg>class OutputTypeT</templarg>
    <templarg>class ParameterVectorType</templarg>
    <base>shark::IParameterizable</base>
    <base>shark::INameable</base>
    <base>shark::ISerializable</base>
    <member kind="enumeration">
      <type></type>
      <name>Feature</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a76a2d024b6013037b072596fe4f9f829</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_FIRST_PARAMETER_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a76a2d024b6013037b072596fe4f9f829a89a819e2614f818baa23c5c8fdd4393d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_FIRST_INPUT_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a76a2d024b6013037b072596fe4f9f829a82b5c22e1b95f20aff01b4b39e86c607</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InputTypeT</type>
      <name>InputType</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a714e85d7a6cd2b68898cb5dbb25c37d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OutputTypeT</type>
      <name>OutputType</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a8e5acf043e3a76b50d15a852365801b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractModel&lt; InputTypeT, OutputTypeT, ParameterVectorType &gt;</type>
      <name>ModelBaseType</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a7fccb0cdf4c0b47afbe5da03532b9b4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; InputType &gt;::type</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a518304e95092673b7b6438cace052ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; OutputType &gt;::type</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>aa0c72e230b9a1324c95ba8ac0b07ba13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedFlags&lt; Feature &gt;</type>
      <name>Features</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>aa6b242b73aadc63380181fdf4da1db84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedFeatureNotAvailableException&lt; Feature &gt;</type>
      <name>FeatureNotAvailableException</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a48785f538572a695c46b9eec7a4a00f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_FIRST_PARAMETER_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a76a2d024b6013037b072596fe4f9f829a89a819e2614f818baa23c5c8fdd4393d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_FIRST_INPUT_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a76a2d024b6013037b072596fe4f9f829a82b5c22e1b95f20aff01b4b39e86c607</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractModel</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a0b7aeb13b70c8d4cffc4958e6583627c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractModel</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>ad07313494d4f88c8294410d0c77d80b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Features &amp;</type>
      <name>features</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a234570c3bc1f1fdf06e67ecc4751fa24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFeatures</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>af8cb877bb0c6b8e713e852f9057a6eae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFirstParameterDerivative</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>ae04810c1ae40f816872eba4ef3953e36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFirstInputDerivative</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a1092b50b56555e8f2e8b4d4aa57eb3c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a56391736859ddea5d1011d2248431b47</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a54b8655a750489902560a5eb32ba5b4b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a47d80a74ce80e5dd5e2851c52738b86b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a11203dd6f50218e4c341a5d24ff5d543</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a7d3f3d4d781954dc43d6cd445a5b56b4</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>ac7edef74da55322b6aef0ba65b08592d</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>af6b99ab56d362609a144764922b4bd7b</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs, State &amp;state) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a3a331290a6cb2840663d2178899366c8</anchor>
      <arglist>(InputType const &amp;pattern, OutputType &amp;output) const</arglist>
    </member>
    <member kind="function">
      <type>Data&lt; OutputType &gt;</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a0b69168617355ebbd470caf2393a541f</anchor>
      <arglist>(Data&lt; InputType &gt; const &amp;patterns) const</arglist>
    </member>
    <member kind="function">
      <type>OutputType</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a78b0b0517a53c93013b9372292f73a78</anchor>
      <arglist>(InputType const &amp;pattern) const</arglist>
    </member>
    <member kind="function">
      <type>BatchOutputType</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>aa10f381b3bd678c82a600c5bc6ac0ec3</anchor>
      <arglist>(BatchInputType const &amp;patterns) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>ad699b6b1f813c5cc3b3ed45f254dbc1d</anchor>
      <arglist>(BatchInputType const &amp;pattern, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, ParameterVectorType &amp;derivative) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>weightedInputDerivative</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a3c192dedb474c5a8e39b1f46d99f94cc</anchor>
      <arglist>(BatchInputType const &amp;pattern, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, BatchInputType &amp;derivative) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>weightedDerivatives</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>adb4966b597013417b5e9957c84485c8c</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, ParameterVectorType &amp;parameterDerivative, BatchInputType &amp;inputDerivative) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Features</type>
      <name>m_features</name>
      <anchorfile>classshark_1_1_abstract_model.html</anchorfile>
      <anchor>a4c5a689901083e50007f53de72f694fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractMultiObjectiveOptimizer</name>
    <filename>classshark_1_1_abstract_multi_objective_optimizer.html</filename>
    <templarg>typename PointTypeT</templarg>
    <base>AbstractOptimizer&lt; PointTypeT, RealVector, std::vector&lt; ResultSet&lt; PointTypeT, RealVector &gt; &gt; &gt;</base>
    <member kind="typedef">
      <type>super::SearchPointType</type>
      <name>SearchPointType</name>
      <anchorfile>classshark_1_1_abstract_multi_objective_optimizer.html</anchorfile>
      <anchor>afb3194f31ebd7c2233fb4e3bc83c4777</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>super::SolutionType</type>
      <name>SolutionType</name>
      <anchorfile>classshark_1_1_abstract_multi_objective_optimizer.html</anchorfile>
      <anchor>a2b88bbfc445ce66d95cb222fdba39f07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>super::ObjectiveFunctionType</type>
      <name>ObjectiveFunctionType</name>
      <anchorfile>classshark_1_1_abstract_multi_objective_optimizer.html</anchorfile>
      <anchor>a57ead58992cad6416e77c991268482c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SolutionType const &amp;</type>
      <name>solution</name>
      <anchorfile>classshark_1_1_abstract_multi_objective_optimizer.html</anchorfile>
      <anchor>a88cd9d9eb6bd2edf4aa671b12024b7f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolutionType</type>
      <name>m_best</name>
      <anchorfile>classshark_1_1_abstract_multi_objective_optimizer.html</anchorfile>
      <anchor>ac4e394bda4b2442031f851c742a83eaa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractNearestNeighbors</name>
    <filename>classshark_1_1_abstract_nearest_neighbors.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class LabelType</templarg>
    <member kind="typedef">
      <type>KeyValuePair&lt; double, LabelType &gt;</type>
      <name>DistancePair</name>
      <anchorfile>classshark_1_1_abstract_nearest_neighbors.html</anchorfile>
      <anchor>aca52936d3edcb0538a5be59fff147216</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; InputType &gt;::type</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_abstract_nearest_neighbors.html</anchorfile>
      <anchor>a246b7524f57646d1d830e03c05773824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; DistancePair &gt;</type>
      <name>getNeighbors</name>
      <anchorfile>classshark_1_1_abstract_nearest_neighbors.html</anchorfile>
      <anchor>a72a116504675a53f288533bfeff3a96d</anchor>
      <arglist>(BatchInputType const &amp;batch, std::size_t k) const =0</arglist>
    </member>
    <member kind="function">
      <type>Shape const &amp;</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_abstract_nearest_neighbors.html</anchorfile>
      <anchor>a34d4b8de6de6c7eab9565d2e0eb4117d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LabeledData&lt; InputType, LabelType &gt; const &amp;</type>
      <name>dataset</name>
      <anchorfile>classshark_1_1_abstract_nearest_neighbors.html</anchorfile>
      <anchor>a22661db718a970568b31ab9ae47d83ad</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractNearestNeighbors</name>
      <anchorfile>classshark_1_1_abstract_nearest_neighbors.html</anchorfile>
      <anchor>a3af2987f23272193ca3a26cba59ce7d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Shape</type>
      <name>m_inputShape</name>
      <anchorfile>classshark_1_1_abstract_nearest_neighbors.html</anchorfile>
      <anchor>a71d274e64e2eff7e1f72fa4fe3fb3473</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractObjectiveFunction</name>
    <filename>classshark_1_1_abstract_objective_function.html</filename>
    <templarg>typename PointType</templarg>
    <templarg>typename ResultT</templarg>
    <base>shark::INameable</base>
    <class kind="struct">shark::AbstractObjectiveFunction::SecondOrderDerivative</class>
    <member kind="enumeration">
      <type></type>
      <name>Feature</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_VALUE</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aad3475b458576c8760f28d8d81f4eda86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_FIRST_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aa0bc7673a369df5f86ddd6ba6735f4971</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_SECOND_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aa2a3534a8bfd17ffc9f39a2892dc03858</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAN_PROPOSE_STARTING_POINT</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aab9262b57bb302f04b2561666a9068446</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_CONSTRAINED_FEATURE</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aa0574c1ccb7c3791cc09bae4a7198429a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_CONSTRAINT_HANDLER</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aa7decd0dc83d8de4fcec02d4e27251dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAN_PROVIDE_CLOSEST_FEASIBLE</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aa15247e91dcbcdf3fa7061f2ee70cf129</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_THREAD_SAFE</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aa155aa01439b358ce00e8cfb9f377fb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_NOISY</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aa9022946d8a121d3e6c820f58d8cd3d87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointType</type>
      <name>SearchPointType</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a59bfea031628e16737c66e7117eba7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ResultT</type>
      <name>ResultType</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a70f0672a3c3b24c437c81243624b5307</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::mpl::if_&lt; std::is_arithmetic&lt; ResultT &gt;, SearchPointType, RealMatrix &gt;::type</type>
      <name>FirstOrderDerivative</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a29804371954a360f09696adea7cfd839</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedFlags&lt; Feature &gt;</type>
      <name>Features</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a015ecb970cd0f5dac73e727fdcc0afec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedFeatureNotAvailableException&lt; Feature &gt;</type>
      <name>FeatureNotAvailableException</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a08e03b4eea2e069da19e0870fd205090</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_VALUE</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aad3475b458576c8760f28d8d81f4eda86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_FIRST_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aa0bc7673a369df5f86ddd6ba6735f4971</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_SECOND_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aa2a3534a8bfd17ffc9f39a2892dc03858</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAN_PROPOSE_STARTING_POINT</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aab9262b57bb302f04b2561666a9068446</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_CONSTRAINED_FEATURE</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aa0574c1ccb7c3791cc09bae4a7198429a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HAS_CONSTRAINT_HANDLER</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aa7decd0dc83d8de4fcec02d4e27251dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAN_PROVIDE_CLOSEST_FEASIBLE</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aa15247e91dcbcdf3fa7061f2ee70cf129</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_THREAD_SAFE</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aa155aa01439b358ce00e8cfb9f377fb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_NOISY</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aadafeb6dfb5b649f321e7b81ac8aad1aa9022946d8a121d3e6c820f58d8cd3d87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Features &amp;</type>
      <name>features</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a755673593a64a978a91ac3398c390d4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFeatures</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a7f92098ce1e74c805f359b56893e78ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasValue</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a7d4be77b4100781bbd7ca50bcf68c94f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFirstDerivative</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aec3465e02d80e79445df299cf8531fcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSecondDerivative</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a9f5d2c0fa504de1e3b5a66363c826f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canProposeStartingPoint</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aa190c3699e653df3f054b0b3d753270e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstrained</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a2a03eac74b7cac35c5d510ab12599393</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasConstraintHandler</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a8d14fcc84cd963a1f6d9d7c8477bd3ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canProvideClosestFeasible</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a499c48a9afe9e77e866af66c0cb4f396</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isThreadSafe</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a3b418f50d0e284fe10c92a1c719d5615</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNoisy</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a80a63b56c111cd7c65e5b264c9d84bac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractObjectiveFunction</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a0f32ae97885db58f9602191d64284f98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractObjectiveFunction</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a11cbdfb46ff9d34231248d8b847bd0ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>abe4776a85c4ce622c25f3290fa1395d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRng</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a3a287178b5b0b97c71bbffc80086ff00</anchor>
      <arglist>(random::rng_type *rng)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a256f6b128af038dfaf9cef1bcd45a426</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a24751b2fc6f327053938dc92ff01384a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a4bdfc60abbe8548ba090bff096295b8f</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aa69ec2b8a4e968f30d7ac135af074012</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasScalableObjectives</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>ae58a543d7cccc6c66e3a7d8ce762fc01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberOfObjectives</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>afcb3e45b19bba4130989d7ae37200900</anchor>
      <arglist>(std::size_t numberOfObjectives)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>evaluationCounter</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>afaa9cc39ccb4d74a0d6db0ae2d087051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AbstractConstraintHandler&lt; SearchPointType &gt; const &amp;</type>
      <name>getConstraintHandler</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a714edd6cc680adf04d5d12d7e845544f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFeasible</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a152c45a40169bf31cead2b9169a5367c</anchor>
      <arglist>(const SearchPointType &amp;input) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>closestFeasible</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a68b3dfe1642e13693b5ab610f3fc5f79</anchor>
      <arglist>(SearchPointType &amp;input) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>acd2922036a6388fde1173490079bb22b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ResultType</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a751c175270f6d6f0bcc1200f333c0045</anchor>
      <arglist>(SearchPointType const &amp;input) const</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>aa79994e4b70d92fd30e62be20145ebd9</anchor>
      <arglist>(SearchPointType const &amp;input) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ResultType</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a53df2ac5d82c608ea938dc1e3a0c0617</anchor>
      <arglist>(SearchPointType const &amp;input, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ResultType</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a23274e2befc7530c8d63834e21a3fa78</anchor>
      <arglist>(SearchPointType const &amp;input, SecondOrderDerivative &amp;derivative) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>announceConstraintHandler</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a2b1a8af419059a542cb3d0848dd278a2</anchor>
      <arglist>(AbstractConstraintHandler&lt; SearchPointType &gt; const *handler)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Features</type>
      <name>m_features</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>ad8888c58fd3f98e73013afb5dd4b2af1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_evaluationCounter</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>af0942c072be06d0dd4da5ee7067c5777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AbstractConstraintHandler&lt; SearchPointType &gt; const  *</type>
      <name>m_constraintHandler</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>abcb65bca56cbfead4a3956e81d0d97d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>random::rng_type *</type>
      <name>mep_rng</name>
      <anchorfile>classshark_1_1_abstract_objective_function.html</anchorfile>
      <anchor>a6a27bddca6060f7861c49b05f8ec8435</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractOptimizer</name>
    <filename>classshark_1_1_abstract_optimizer.html</filename>
    <templarg>typename PointType</templarg>
    <templarg>typename ResultT</templarg>
    <templarg>typename SolutionTypeT</templarg>
    <base>shark::INameable</base>
    <base>shark::ISerializable</base>
    <member kind="enumeration">
      <type></type>
      <name>Feature</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a77bf437afee3445601c680cc652410f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REQUIRES_VALUE</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a77bf437afee3445601c680cc652410f0af46b9e1111a0858df3670fe12e4ffbf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REQUIRES_FIRST_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a77bf437afee3445601c680cc652410f0ad9b925369d4f923c63792bf455eac1d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REQUIRES_SECOND_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a77bf437afee3445601c680cc652410f0a0a32670987bb219aaf2f6defc70e6f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAN_SOLVE_CONSTRAINED</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a77bf437afee3445601c680cc652410f0ab95c65f700f2158f39039d8f580d350f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REQUIRES_CLOSEST_FEASIBLE</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a77bf437afee3445601c680cc652410f0addbe7762d6f4f8769cc06f61bc9c5c28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointType</type>
      <name>SearchPointType</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>abea8df343e5638782a9a82403adb5ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ResultT</type>
      <name>ResultType</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a89ed73f010deb3809acbcf23160c0f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SolutionTypeT</type>
      <name>SolutionType</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>abc94d354dbe0b99c0a69ec3e6e5e8657</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractObjectiveFunction&lt; PointType, ResultType &gt;</type>
      <name>ObjectiveFunctionType</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>ac7a9b0634e5a5cbd683f5510b41b7062</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedFlags&lt; Feature &gt;</type>
      <name>Features</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>ab43ff108d945a982e98495432ace599f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedFeatureNotAvailableException&lt; Feature &gt;</type>
      <name>FeatureNotAvailableException</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a47751327ce0519d3378a9b2ad188d1e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REQUIRES_VALUE</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a77bf437afee3445601c680cc652410f0af46b9e1111a0858df3670fe12e4ffbf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REQUIRES_FIRST_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a77bf437afee3445601c680cc652410f0ad9b925369d4f923c63792bf455eac1d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REQUIRES_SECOND_DERIVATIVE</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a77bf437afee3445601c680cc652410f0a0a32670987bb219aaf2f6defc70e6f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAN_SOLVE_CONSTRAINED</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a77bf437afee3445601c680cc652410f0ab95c65f700f2158f39039d8f580d350f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REQUIRES_CLOSEST_FEASIBLE</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a77bf437afee3445601c680cc652410f0addbe7762d6f4f8769cc06f61bc9c5c28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Features &amp;</type>
      <name>features</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a40334039f6e799b2255d229874e9fa39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFeatures</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>adc0219242dff14757398c81d2e82c22e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requiresValue</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a8645fb354408c89d3537aa87aed49b79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requiresFirstDerivative</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a13dff098bcde14529b64be653d73d57f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requiresSecondDerivative</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a9da146985b7738554e09f75a670f8c97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canSolveConstrained</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>aecad1d60d38fd243eaf7c7bf0f6d01af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requiresClosestFeasible</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>aa9332ad1b90deed11ee6709a92964bc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractOptimizer</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>abd45149f57784a117e8f62d0763bf891</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>numInitPoints</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a977f8494a25041605b5a2d7d7d120a71</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>aaa65e7eece1d248594253b799cf20e7a</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a5f6f869a2ea7c6d29e70f8248f076f66</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, std::vector&lt; SearchPointType &gt; const &amp;initPoints)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>abfc507951eb09c50d62c474c79d773ea</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SolutionType const &amp;</type>
      <name>solution</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a277acc916ab9b33a9a7fe954a7cb4b72</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkFeatures</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>ae7a23300641448c761b6aa0305b7ef66</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Features</type>
      <name>m_features</name>
      <anchorfile>classshark_1_1_abstract_optimizer.html</anchorfile>
      <anchor>a72daf583d406e144b90869f311baa594</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractSingleObjectiveOptimizer</name>
    <filename>classshark_1_1_abstract_single_objective_optimizer.html</filename>
    <templarg>class PointType</templarg>
    <base>AbstractOptimizer&lt; PointType, double, SingleObjectiveResultSet&lt; PointType &gt; &gt;</base>
    <member kind="typedef">
      <type>base_type::SearchPointType</type>
      <name>SearchPointType</name>
      <anchorfile>classshark_1_1_abstract_single_objective_optimizer.html</anchorfile>
      <anchor>a85f0d04fdfb094dba4dc80b1fb5e3adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::SolutionType</type>
      <name>SolutionType</name>
      <anchorfile>classshark_1_1_abstract_single_objective_optimizer.html</anchorfile>
      <anchor>a8abcd574faa4b7bd2fed03465d1eda35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ResultType</type>
      <name>ResultType</name>
      <anchorfile>classshark_1_1_abstract_single_objective_optimizer.html</anchorfile>
      <anchor>a068a68c8739215f4a13ce8a433ec38b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ObjectiveFunctionType</type>
      <name>ObjectiveFunctionType</name>
      <anchorfile>classshark_1_1_abstract_single_objective_optimizer.html</anchorfile>
      <anchor>aa4c05609c54d7ebc99d099e7dd6e228f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numInitPoints</name>
      <anchorfile>classshark_1_1_abstract_single_objective_optimizer.html</anchorfile>
      <anchor>a1bd54036e3524dc2ddf02afeadc0939f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_abstract_single_objective_optimizer.html</anchorfile>
      <anchor>a246f1f1d4e0566c9a0ca43035a63fad5</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, std::vector&lt; SearchPointType &gt; const &amp;initPoints)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_abstract_single_objective_optimizer.html</anchorfile>
      <anchor>ae53c1a8348f5ab987f5aa8829fd8020f</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, SearchPointType const &amp;startingPoint)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SolutionType &amp;</type>
      <name>solution</name>
      <anchorfile>classshark_1_1_abstract_single_objective_optimizer.html</anchorfile>
      <anchor>a0909596fcc4f80a8d108859b20b64a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolutionType</type>
      <name>m_best</name>
      <anchorfile>classshark_1_1_abstract_single_objective_optimizer.html</anchorfile>
      <anchor>a4740a0f8e9d5c7d99cf0dd0c3ee0e8a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractStoppingCriterion</name>
    <filename>classshark_1_1_abstract_stopping_criterion.html</filename>
    <templarg>class ResultSetT</templarg>
    <member kind="typedef">
      <type>ResultSetT</type>
      <name>ResultSet</name>
      <anchorfile>classshark_1_1_abstract_stopping_criterion.html</anchorfile>
      <anchor>aa813314942f2e999ac8b9c985d001f96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classshark_1_1_abstract_stopping_criterion.html</anchorfile>
      <anchor>a2cd08d7ec1a7627ad17ce451b8ba915c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>stop</name>
      <anchorfile>classshark_1_1_abstract_stopping_criterion.html</anchorfile>
      <anchor>a74a1d1aea141cf2ad5d69e29cb90f25c</anchor>
      <arglist>(ResultSet const &amp;set)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractSvmTrainer</name>
    <filename>classshark_1_1_abstract_svm_trainer.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class LabelType</templarg>
    <templarg>class Model</templarg>
    <templarg>class Trainer</templarg>
    <base>shark::AbstractTrainer</base>
    <base>shark::QpConfig</base>
    <base>shark::IParameterizable</base>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>acb7bddb6bc49cb6162708ad18d5f2ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractSvmTrainer</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>aab27c6424184668af4f785f525ca3a84</anchor>
      <arglist>(KernelType *kernel, double C, bool offset, bool unconstrained=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractSvmTrainer</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>a5ac083639404d8d334e38d45f777e0af</anchor>
      <arglist>(KernelType *kernel, double negativeC, double positiveC, bool offset, bool unconstrained=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>C</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>a7bc3baa63458c785155a231ca73ea483</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setC</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>a63d60b7731298e655952bbf42d1ce2d8</anchor>
      <arglist>(double C)</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>regularizationParameters</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>ad06550eb45e46ff02e4789ea1b916c75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRegularizationParameters</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>ad3ff1a54a5eb915e631e70e26e8727ce</anchor>
      <arglist>(RealVector const &amp;regularizers)</arglist>
    </member>
    <member kind="function">
      <type>KernelType *</type>
      <name>kernel</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>a084595212c691b938fe6d421f40a908b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KernelType const *</type>
      <name>kernel</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>a6342c2fd51de7927c41090c8644c29f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKernel</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>a4ff39ade04048830ec052be74d185a39</anchor>
      <arglist>(KernelType *kernel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnconstrained</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>a787df0ebf0c01da4f3e900e0f3ad109a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trainOffset</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>ae0c02e31cdae3482f37155eb788eb979</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>cacheSize</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>a954cc587b52b4ec5a347134804dfc812</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCacheSize</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>aee037566828dae85ee2e117e71121edd</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>a183757faebfc331f6733946a6ea7de2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>aecde2bab6daf3fa44b94438c7ba79a24</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>ab4f0632a6c463dca0103a38a6305c38c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KernelType *</type>
      <name>m_kernel</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>aec319e3ac1af74e75d5414624412dac3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_regularizers</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>aa5c86718ae82edb7660fe5769ebc5b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_trainOffset</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>aee47ba0de2c00b34c32e78ec9751c121</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_unconstrained</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>aa3e2f2db97947d244213f63093a08878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_cacheSize</name>
      <anchorfile>classshark_1_1_abstract_svm_trainer.html</anchorfile>
      <anchor>a0382adafdbe762f4456dc7858ea120c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractTrainer</name>
    <filename>classshark_1_1_abstract_trainer.html</filename>
    <templarg>class Model</templarg>
    <templarg>class LabelTypeT</templarg>
    <base>shark::INameable</base>
    <base>shark::ISerializable</base>
    <member kind="typedef">
      <type>Model</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_abstract_trainer.html</anchorfile>
      <anchor>a0d5c9d35b614d6a33e4e8bfeaf1e9298</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ModelType::InputType</type>
      <name>InputType</name>
      <anchorfile>classshark_1_1_abstract_trainer.html</anchorfile>
      <anchor>a0cfa7cdd27b8bb162e64188095f8fa71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabelTypeT</type>
      <name>LabelType</name>
      <anchorfile>classshark_1_1_abstract_trainer.html</anchorfile>
      <anchor>aa4e344106831fb8227c2120681588ea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabeledData&lt; InputType, LabelType &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_abstract_trainer.html</anchorfile>
      <anchor>aa4730fe9d59622d35d95cd4233f8d7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_abstract_trainer.html</anchorfile>
      <anchor>a71d3fd2567473d746ecb733d7fa28c7e</anchor>
      <arglist>(ModelType &amp;model, DatasetType const &amp;dataset)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractUnsupervisedTrainer</name>
    <filename>classshark_1_1_abstract_unsupervised_trainer.html</filename>
    <templarg>class Model</templarg>
    <base>shark::INameable</base>
    <base>shark::ISerializable</base>
    <member kind="typedef">
      <type>Model</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_abstract_unsupervised_trainer.html</anchorfile>
      <anchor>a92fa6ed2ab64402cb414e3c19e9edeaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Model::InputType</type>
      <name>InputType</name>
      <anchorfile>classshark_1_1_abstract_unsupervised_trainer.html</anchorfile>
      <anchor>a9c951f84222a7bc22185b6e7b11357dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnlabeledData&lt; InputType &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_abstract_unsupervised_trainer.html</anchorfile>
      <anchor>a2fcc37e7133ddcadb66ffb9fa335ed1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_abstract_unsupervised_trainer.html</anchorfile>
      <anchor>a0d63179d733c998593e3966ffdf17e62</anchor>
      <arglist>(ModelType &amp;model, DatasetType const &amp;inputset)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractWeightedTrainer</name>
    <filename>classshark_1_1_abstract_weighted_trainer.html</filename>
    <templarg>class Model</templarg>
    <templarg>class LabelTypeT</templarg>
    <base>shark::AbstractTrainer</base>
    <member kind="typedef">
      <type>base_type::ModelType</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_abstract_weighted_trainer.html</anchorfile>
      <anchor>ad2ad0a52ecd9ac8677df6dbf403b68b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::InputType</type>
      <name>InputType</name>
      <anchorfile>classshark_1_1_abstract_weighted_trainer.html</anchorfile>
      <anchor>a11e51b154b87ed5e33b6ce2c830cd3d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::LabelType</type>
      <name>LabelType</name>
      <anchorfile>classshark_1_1_abstract_weighted_trainer.html</anchorfile>
      <anchor>a8cc4b95c06687c88b75ea8db8187336d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::DatasetType</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_abstract_weighted_trainer.html</anchorfile>
      <anchor>a8c8370c0d2c2550a50df4d6b0bccf42b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WeightedLabeledData&lt; InputType, LabelType &gt;</type>
      <name>WeightedDatasetType</name>
      <anchorfile>classshark_1_1_abstract_weighted_trainer.html</anchorfile>
      <anchor>ab6d74ebe9e01f9eefb70f9eb12738ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_abstract_weighted_trainer.html</anchorfile>
      <anchor>ad35ae0b236c45b73f749285a54288e89</anchor>
      <arglist>(ModelType &amp;model, WeightedDatasetType const &amp;dataset)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_abstract_weighted_trainer.html</anchorfile>
      <anchor>a9e5711480e4f1e214ff3c30a9604d10a</anchor>
      <arglist>(ModelType &amp;model, DatasetType const &amp;dataset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::AbstractWeightedUnsupervisedTrainer</name>
    <filename>classshark_1_1_abstract_weighted_unsupervised_trainer.html</filename>
    <templarg>class Model</templarg>
    <base>shark::AbstractUnsupervisedTrainer</base>
    <member kind="typedef">
      <type>base_type::ModelType</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_abstract_weighted_unsupervised_trainer.html</anchorfile>
      <anchor>a0ad676e9aed1a00dc6c4105f29e43426</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::InputType</type>
      <name>InputType</name>
      <anchorfile>classshark_1_1_abstract_weighted_unsupervised_trainer.html</anchorfile>
      <anchor>a7b74f3ade481a666eaaf754796d69f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::DatasetType</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_abstract_weighted_unsupervised_trainer.html</anchorfile>
      <anchor>a37e15486d53e5d029a180b3bd96cff8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WeightedUnlabeledData&lt; InputType &gt;</type>
      <name>WeightedDatasetType</name>
      <anchorfile>classshark_1_1_abstract_weighted_unsupervised_trainer.html</anchorfile>
      <anchor>aa389639264decb71ef937b69a0a268d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_abstract_weighted_unsupervised_trainer.html</anchorfile>
      <anchor>a45bee6b7311cc2f21edf6e63c8a99f05</anchor>
      <arglist>(ModelType &amp;model, WeightedDatasetType const &amp;dataset)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_abstract_weighted_unsupervised_trainer.html</anchorfile>
      <anchor>a01fe51ad5c2874562ca3f57b5884f7a3</anchor>
      <arglist>(ModelType &amp;model, DatasetType const &amp;dataset)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::Ackley</name>
    <filename>structshark_1_1benchmarks_1_1_ackley.html</filename>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>Ackley</name>
      <anchorfile>structshark_1_1benchmarks_1_1_ackley.html</anchorfile>
      <anchor>ac7f2edc3a1163a71d0e47ef3f1820d33</anchor>
      <arglist>(std::size_t numberOfVariables=5)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_ackley.html</anchorfile>
      <anchor>aac4f2dbde13547ae7bd3c312c8cb52c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_ackley.html</anchorfile>
      <anchor>a6c3895427eac0acb7b79ccc9f177c3ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_ackley.html</anchorfile>
      <anchor>abb925f67c2f6c183e3809729cf252d9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_ackley.html</anchorfile>
      <anchor>a0a14b8c5b27624c7953fa01e0e594f3d</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>structshark_1_1benchmarks_1_1_ackley.html</anchorfile>
      <anchor>a0c9e13f0da191fcf2a83988ff5680096</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_ackley.html</anchorfile>
      <anchor>af29a45fc5214e7df24f258050370f48d</anchor>
      <arglist>(const SearchPointType &amp;p) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Adam</name>
    <filename>classshark_1_1_adam.html</filename>
    <templarg>class SearchPointType</templarg>
    <base>shark::AbstractSingleObjectiveOptimizer</base>
    <member kind="typedef">
      <type>AbstractObjectiveFunction&lt; SearchPointType, double &gt;</type>
      <name>ObjectiveFunctionType</name>
      <anchorfile>classshark_1_1_adam.html</anchorfile>
      <anchor>aea81fcabb518f78a48419b4416563a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Adam</name>
      <anchorfile>classshark_1_1_adam.html</anchorfile>
      <anchor>a5710b74b45246dc8edbc377ecaf0292a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_adam.html</anchorfile>
      <anchor>a904590aed2428f855aa96a85ec7d6d64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_adam.html</anchorfile>
      <anchor>a05893bc5dc81a6fccd0b9a0a15415770</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction, SearchPointType const &amp;startingPoint)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eta</name>
      <anchorfile>classshark_1_1_adam.html</anchorfile>
      <anchor>a33cc65bf96984af7cce5788520ccad61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEta</name>
      <anchorfile>classshark_1_1_adam.html</anchorfile>
      <anchor>aa8cda0391795c0e586a5dfcef078b15e</anchor>
      <arglist>(double eta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta1</name>
      <anchorfile>classshark_1_1_adam.html</anchorfile>
      <anchor>afcabef3366290b075d51294876732613</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeta1</name>
      <anchorfile>classshark_1_1_adam.html</anchorfile>
      <anchor>ab57d8b444cd86e5fc5b67ae7c38c9ab7</anchor>
      <arglist>(double beta1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta2</name>
      <anchorfile>classshark_1_1_adam.html</anchorfile>
      <anchor>a13b7618dea5584ffd886c15858d02888</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeta2</name>
      <anchorfile>classshark_1_1_adam.html</anchorfile>
      <anchor>a6a33672d62b05085d9c12000c38c4ff4</anchor>
      <arglist>(double beta2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>epsilon</name>
      <anchorfile>classshark_1_1_adam.html</anchorfile>
      <anchor>a84ea9e08b7ed6e18a23e706ba63441ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEpsilon</name>
      <anchorfile>classshark_1_1_adam.html</anchorfile>
      <anchor>ad976d2e3215eca56dedbe305b327d405</anchor>
      <arglist>(double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_adam.html</anchorfile>
      <anchor>aad42982976c3e91534ac33999d7c6fc3</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_adam.html</anchorfile>
      <anchor>ab0560f21fb8e543bd040c37e3ba3a35e</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_adam.html</anchorfile>
      <anchor>aff40083e249cf987ca9232c4af82138b</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::AdditiveEpsilonIndicator</name>
    <filename>structshark_1_1_additive_epsilon_indicator.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>leastContributor</name>
      <anchorfile>structshark_1_1_additive_epsilon_indicator.html</anchorfile>
      <anchor>a10777ba88cd77e98ba5c08cbca3335aa</anchor>
      <arglist>(ParetoFrontType const &amp;front, ParetoArchive const &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>leastContributors</name>
      <anchorfile>structshark_1_1_additive_epsilon_indicator.html</anchorfile>
      <anchor>a822ea35021309c86e3f2ce76442354b9</anchor>
      <arglist>(ParetoFrontType const &amp;front, ParetoArchive const &amp;archive, std::size_t K) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structshark_1_1_additive_epsilon_indicator.html</anchorfile>
      <anchor>ae950bee1dcfc504d1ba6a4bbda7847ee</anchor>
      <arglist>(std::size_t, std::size_t, random &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_additive_epsilon_indicator.html</anchorfile>
      <anchor>a94529f7965a68a59b3a146a2f83f4654</anchor>
      <arglist>(Archive &amp;, const unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ARDKernelUnconstrained</name>
    <filename>classshark_1_1_a_r_d_kernel_unconstrained.html</filename>
    <templarg>class InputType</templarg>
    <base>shark::AbstractKernelFunction</base>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>aa226c405186bb9ef80b64e4ef994155f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstInputReference</type>
      <name>ConstInputReference</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>a0b45119b5792de5cbd4bd75308ae4fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstBatchInputReference</type>
      <name>ConstBatchInputReference</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>ac27c221548180995f36284a3f12971a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ARDKernelUnconstrained</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>aec9b075b05db8e7c15ba3ce4f9ad6d1d</anchor>
      <arglist>(unsigned int dim, double gamma_init=1.0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>ab372f8a468cce1ec1e36b9fd0f963d9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>a81946af98e00e545233603f2c66c2cff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>a7e2a65001ef2e3ff14a9611ad2462dad</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>a10715ae5fca084b6b4d6d105b32ff074</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>a756d97810b5d84179e102200c433a13e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>gammaVector</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>a6bd49c194259cde41c6dd10a0ed40116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGammaVector</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>aa311e1b077588f823db7d0db66c815c5</anchor>
      <arglist>(RealVector const &amp;newGammas)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>aed421511b861153b77d602b7440e526e</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>aec95a826f8fdfe30af8ebab640897317</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>a0a5bad6df6b7b7f7fc2ea28b50c7b97b</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>a2788b71608aaeb04b65e35bce58169e0</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficients, State const &amp;state, RealVector &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedInputDerivative</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>af6ecdacc02a669cdb85a59ffa50fed31</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficientsX2, State const &amp;state, BatchInputType &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>ab07f20b41ea7c29f6b0297ba34cf040d</anchor>
      <arglist>(InArchive &amp;ar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>a887ab2f88ec08fdde7c930ad5d9914f1</anchor>
      <arglist>(OutArchive &amp;ar) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_gammas</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>ab082dd9d73a7494f7a4343fc7deb61a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_inputDimensions</name>
      <anchorfile>classshark_1_1_a_r_d_kernel_unconstrained.html</anchorfile>
      <anchor>a03f63210b59fb4e576832033416cebeb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::BarsAndStripes</name>
    <filename>classshark_1_1_bars_and_stripes.html</filename>
    <member kind="function">
      <type></type>
      <name>BarsAndStripes</name>
      <anchorfile>classshark_1_1_bars_and_stripes.html</anchorfile>
      <anchor>a4aacf9ae2eb982898f45075e93d584d8</anchor>
      <arglist>(std::size_t batchSize=32, bool bipolar=false)</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData&lt; RealVector &gt;</type>
      <name>data</name>
      <anchorfile>classshark_1_1_bars_and_stripes.html</anchorfile>
      <anchor>aa2fc90b392018f6788e48521f48c7dc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>inputDimension</name>
      <anchorfile>classshark_1_1_bars_and_stripes.html</anchorfile>
      <anchor>a9d3b38dcb25c55e2bea3dcf1ff260c0e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::BaseDCNonDominatedSort</name>
    <filename>classshark_1_1_base_d_c_non_dominated_sort.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_base_d_c_non_dominated_sort.html</anchorfile>
      <anchor>a1b65cbbe243681b1b744d0549c4e0020</anchor>
      <arglist>(PointRange const &amp;pointRange, RankRange &amp;rankRange)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::statistics::BaseStatisticsObject</name>
    <filename>classshark_1_1statistics_1_1_base_statistics_object.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1statistics_1_1_base_statistics_object.html</anchorfile>
      <anchor>a1e45686c50637f078791e9120a4d4426</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseStatisticsObject</name>
      <anchorfile>classshark_1_1statistics_1_1_base_statistics_object.html</anchorfile>
      <anchor>a4fd8c18b01391f48d4bd9e61dc9e0ca4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealVector</type>
      <name>statistics</name>
      <anchorfile>classshark_1_1statistics_1_1_base_statistics_object.html</anchorfile>
      <anchor>ae0b7c96f1bf4a9f7a1cb810408ac5618</anchor>
      <arglist>(std::vector&lt; RealVector &gt; const &amp;points) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::Batch</name>
    <filename>structshark_1_1_batch.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="struct">
    <name>shark::Batch&lt; blas::vector&lt; T, Device &gt; &gt;</name>
    <filename>structshark_1_1_batch_3_01blas_1_1vector_3_01_t_00_01_device_01_4_01_4.html</filename>
    <templarg>class T</templarg>
    <templarg>class Device</templarg>
  </compound>
  <compound kind="struct">
    <name>shark::Batch&lt; detail::MatrixRowReference&lt; M &gt; &gt;</name>
    <filename>structshark_1_1_batch_3_01detail_1_1_matrix_row_reference_3_01_m_01_4_01_4.html</filename>
    <templarg>class M</templarg>
    <base>Batch&lt; detail::MatrixRowReference&lt; M &gt;::Vector &gt;</base>
  </compound>
  <compound kind="struct">
    <name>shark::Batch&lt; shark::blas::compressed_vector&lt; T &gt; &gt;</name>
    <filename>structshark_1_1_batch_3_01shark_1_1blas_1_1compressed__vector_3_01_t_01_4_01_4.html</filename>
    <templarg>class T</templarg>
    <member kind="typedef">
      <type>detail::MatrixRowReference&lt; type &gt;</type>
      <name>reference</name>
      <anchorfile>structshark_1_1_batch_3_01shark_1_1blas_1_1compressed__vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>ab069b3c0404e1bd4b788bca5499d1d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::MatrixRowReference&lt; const type &gt;</type>
      <name>const_reference</name>
      <anchorfile>structshark_1_1_batch_3_01shark_1_1blas_1_1compressed__vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a04c9f2152498be58f2dc1aa768959272</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProxyIterator&lt; type, value_type, reference &gt;</type>
      <name>iterator</name>
      <anchorfile>structshark_1_1_batch_3_01shark_1_1blas_1_1compressed__vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a2238b5dc7eb55874595b6b39f8113ebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProxyIterator&lt; const type, value_type, const_reference &gt;</type>
      <name>const_iterator</name>
      <anchorfile>structshark_1_1_batch_3_01shark_1_1blas_1_1compressed__vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a11d56a8c9892dc085a4b25de9130e1f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static type</type>
      <name>createBatch</name>
      <anchorfile>structshark_1_1_batch_3_01shark_1_1blas_1_1compressed__vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a7d807af16dbda22f9fa7efa6a8222843</anchor>
      <arglist>(Element const &amp;input, std::size_t size=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static type</type>
      <name>createBatchFromRange</name>
      <anchorfile>structshark_1_1_batch_3_01shark_1_1blas_1_1compressed__vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a5eab4ea5b33cefa429ba70a9dc852eb5</anchor>
      <arglist>(Iterator const &amp;start, Iterator const &amp;end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resize</name>
      <anchorfile>structshark_1_1_batch_3_01shark_1_1blas_1_1compressed__vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a818fad0d1a5ebeee0dd3d86c98bb21e0</anchor>
      <arglist>(type &amp;batch, std::size_t batchSize, std::size_t elements)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>size</name>
      <anchorfile>structshark_1_1_batch_3_01shark_1_1blas_1_1compressed__vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a5908c852091e5f4844e0ed06f359df1a</anchor>
      <arglist>(type const &amp;batch)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static reference</type>
      <name>get</name>
      <anchorfile>structshark_1_1_batch_3_01shark_1_1blas_1_1compressed__vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a2c3920e1aeac4e38b148f8b9d4aaea3c</anchor>
      <arglist>(type &amp;batch, std::size_t i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const_reference</type>
      <name>get</name>
      <anchorfile>structshark_1_1_batch_3_01shark_1_1blas_1_1compressed__vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a3ddf9dbc1210cda59d8e41f8699a9170</anchor>
      <arglist>(type const &amp;batch, std::size_t i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static iterator</type>
      <name>begin</name>
      <anchorfile>structshark_1_1_batch_3_01shark_1_1blas_1_1compressed__vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a8e061f102977183d90c6da291ab7fcd0</anchor>
      <arglist>(type &amp;batch)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const_iterator</type>
      <name>begin</name>
      <anchorfile>structshark_1_1_batch_3_01shark_1_1blas_1_1compressed__vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a4c1fae3f822d4b22206f9db24b46836d</anchor>
      <arglist>(type const &amp;batch)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static iterator</type>
      <name>end</name>
      <anchorfile>structshark_1_1_batch_3_01shark_1_1blas_1_1compressed__vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a3340fbee83054604e4198016d971bfd3</anchor>
      <arglist>(type &amp;batch)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const_iterator</type>
      <name>end</name>
      <anchorfile>structshark_1_1_batch_3_01shark_1_1blas_1_1compressed__vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>aba7ec77d468b6f7ace4a4312acab857d</anchor>
      <arglist>(type const &amp;batch)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::Batch&lt; WeightedDataPair&lt; DataType, WeightType &gt; &gt;</name>
    <filename>structshark_1_1_batch_3_01_weighted_data_pair_3_01_data_type_00_01_weight_type_01_4_01_4.html</filename>
    <templarg>class DataType</templarg>
    <templarg>class WeightType</templarg>
  </compound>
  <compound kind="struct">
    <name>shark::BatchTraits</name>
    <filename>structshark_1_1_batch_traits.html</filename>
    <templarg>class BatchType</templarg>
  </compound>
  <compound kind="struct">
    <name>shark::BatchTraits&lt; blas::compressed_matrix&lt; T &gt; &gt;</name>
    <filename>structshark_1_1_batch_traits_3_01blas_1_1compressed__matrix_3_01_t_01_4_01_4.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="struct">
    <name>shark::BatchTraits&lt; blas::dense_matrix_adaptor&lt; T, blas::row_major, Tag, Device &gt; &gt;</name>
    <filename>structshark_1_1_batch_traits_3_01blas_1_1dense__matrix__adaptor_3_01_t_00_01blas_1_1row__major_00_01_tag_00_01_device_01_4_01_4.html</filename>
    <templarg>class T</templarg>
    <templarg>class Tag</templarg>
    <templarg>class Device</templarg>
  </compound>
  <compound kind="struct">
    <name>shark::BatchTraits&lt; blas::matrix&lt; T, blas::row_major, Device &gt; &gt;</name>
    <filename>structshark_1_1_batch_traits_3_01blas_1_1matrix_3_01_t_00_01blas_1_1row__major_00_01_device_01_4_01_4.html</filename>
    <templarg>class T</templarg>
    <templarg>class Device</templarg>
  </compound>
  <compound kind="struct">
    <name>shark::BatchTraits&lt; WeightedDataBatch&lt; DataType, WeightType &gt; &gt;</name>
    <filename>structshark_1_1_batch_traits_3_01_weighted_data_batch_3_01_data_type_00_01_weight_type_01_4_01_4.html</filename>
    <templarg>class DataType</templarg>
    <templarg>class WeightType</templarg>
    <member kind="typedef">
      <type>detail::batch_to_element&lt; DataType &gt;::type</type>
      <name>DataElem</name>
      <anchorfile>structshark_1_1_batch_traits_3_01_weighted_data_batch_3_01_data_type_00_01_weight_type_01_4_01_4.html</anchorfile>
      <anchor>a83a936d6261d5d2fb60c49133a370b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::batch_to_element&lt; WeightType &gt;::type</type>
      <name>WeightElem</name>
      <anchorfile>structshark_1_1_batch_traits_3_01_weighted_data_batch_3_01_data_type_00_01_weight_type_01_4_01_4.html</anchorfile>
      <anchor>afd0031d901cc3538a3780a5b4769e077</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::BFGS</name>
    <filename>classshark_1_1_b_f_g_s.html</filename>
    <templarg>class SearchPointType</templarg>
    <base>shark::AbstractLineSearchOptimizer</base>
    <member kind="typedef">
      <type>AbstractLineSearchOptimizer&lt; SearchPointType &gt;::ObjectiveFunctionType</type>
      <name>ObjectiveFunctionType</name>
      <anchorfile>classshark_1_1_b_f_g_s.html</anchorfile>
      <anchor>aabbe0807add38cc9d7dacd5cb20184fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_b_f_g_s.html</anchorfile>
      <anchor>ad36985b805e542efdd98f4241c90943e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_b_f_g_s.html</anchorfile>
      <anchor>a1f423945c791d56e6ede294fce241531</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_b_f_g_s.html</anchorfile>
      <anchor>aa11e064ff150fe05df14d839e0b9e65c</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initModel</name>
      <anchorfile>classshark_1_1_b_f_g_s.html</anchorfile>
      <anchor>adbb2cf5040f24ced422b27595361a6ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeSearchDirection</name>
      <anchorfile>classshark_1_1_b_f_g_s.html</anchorfile>
      <anchor>a9b943472e508d91139ba51a02faeed3e</anchor>
      <arglist>(ObjectiveFunctionType const &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealMatrix</type>
      <name>m_hessian</name>
      <anchorfile>classshark_1_1_b_f_g_s.html</anchorfile>
      <anchor>ab917887560f9326feac64ebcfba5a835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::BiasSolver</name>
    <filename>classshark_1_1_bias_solver.html</filename>
    <templarg>class Matrix</templarg>
    <member kind="typedef">
      <type>Matrix::QpFloatType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_bias_solver.html</anchorfile>
      <anchor>a9cfb37309ed09ad1476ea7ad188e09ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BiasSolver</name>
      <anchorfile>classshark_1_1_bias_solver.html</anchorfile>
      <anchor>afafb19ac1d26e80b42df574068906ef0</anchor>
      <arglist>(QpMcBoxDecomp&lt; Matrix &gt; *problem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classshark_1_1_bias_solver.html</anchorfile>
      <anchor>a94431a20658c032890cbb34fa0e0cba0</anchor>
      <arglist>(RealVector &amp;bias, QpStoppingCondition &amp;stop, QpSparseArray&lt; QpFloatType &gt; const &amp;nu, bool sumToZero, QpSolutionProperties *prop=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::BiasSolverSimplex</name>
    <filename>classshark_1_1_bias_solver_simplex.html</filename>
    <templarg>class Matrix</templarg>
    <member kind="typedef">
      <type>Matrix::QpFloatType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_bias_solver_simplex.html</anchorfile>
      <anchor>a0e378330105c3585628efb53be8fa610</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BiasSolverSimplex</name>
      <anchorfile>classshark_1_1_bias_solver_simplex.html</anchorfile>
      <anchor>a63c458c8a8636282d49b4f1cba6cbd00</anchor>
      <arglist>(QpMcSimplexDecomp&lt; Matrix &gt; *problem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classshark_1_1_bias_solver_simplex.html</anchorfile>
      <anchor>a60479f4edcd9038d612da5c34d4e6022</anchor>
      <arglist>(RealVector &amp;bias, QpStoppingCondition &amp;stop, QpSparseArray&lt; QpFloatType &gt; const &amp;nu, bool sumToZero, QpSolutionProperties *prop=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::BinaryLayer</name>
    <filename>classshark_1_1_binary_layer.html</filename>
    <base>shark::ISerializable</base>
    <base>shark::IParameterizable</base>
    <member kind="typedef">
      <type>BinarySpace</type>
      <name>StateSpace</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>a0dd192fe113ecec7c0491cd7c303f1f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealVector</type>
      <name>SufficientStatistics</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>a7765cfaf85d31f7a45dd31c55e6cf387</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; SufficientStatistics &gt;::type</type>
      <name>StatisticsBatch</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>ac48b230991d6dc12efe2cd04ae7180b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const RealVector &amp;</type>
      <name>bias</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>a103a1cdde7c111a6cbb3b059bf3e61df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector &amp;</type>
      <name>bias</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>a6d404978bec6ad12e2e4d9fb3e7a85f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>baseRate</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>aaf3d98e2d4e31b3656dc9635e7aeeeeb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector &amp;</type>
      <name>baseRate</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>aef4d3de0534b88d07e4d406ff526eed0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>a443969d7e0912b0d213ca4b31de8f4aa</anchor>
      <arglist>(std::size_t newSize)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>ae87de45782acf5f56ed1d49c1c5f27cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sufficientStatistics</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>a9ce67738aea657cfba6131af44a6c0f1</anchor>
      <arglist>(Input const &amp;input, StatisticsBatch &amp;statistics, BetaVector const &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>a33b62103b6bbf8be68d767fe87b8d6e8</anchor>
      <arglist>(StatisticsBatch const &amp;statistics, Matrix &amp;state, double alpha, Rng &amp;rng) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>logProbability</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>ab776217f2bebdb728e4c377db40c4ec9</anchor>
      <arglist>(StatisticsBatch const &amp;statistics, Matrix const &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix const &amp;</type>
      <name>phi</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>ae5905132b4f335a2c8f795d026dfc8b9</anchor>
      <arglist>(Matrix const &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix const &amp;</type>
      <name>expectedPhiValue</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>a858d2d141b9b869c1ab132ae9fd28dd0</anchor>
      <arglist>(StatisticsBatch const &amp;statistics) const</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix const &amp;</type>
      <name>mean</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>a6e5e69ec1872d5633d4eb1c2261d05c4</anchor>
      <arglist>(StatisticsBatch const &amp;statistics) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>energyTerm</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>af82b2905a7c8fd6d47505a8c67c1c9bf</anchor>
      <arglist>(Matrix const &amp;state, BetaVector const &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>logMarginalize</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>a2832d25febb06b1917b596dce09af065</anchor>
      <arglist>(Input const &amp;inputs, double beta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expectedParameterDerivative</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>ae0a60ac025dea17ee48adaaf9dd47602</anchor>
      <arglist>(Vector &amp;derivative, SampleBatch const &amp;samples, WeightVector const &amp;weights) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parameterDerivative</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>abb90ca0c305f3ee67f0417834eb0f77a</anchor>
      <arglist>(Vector &amp;derivative, SampleBatch const &amp;samples, WeightVector const &amp;weights) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>ae7503f9816f24d2cd140f167e9642958</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>abd1f719bfde91c77f3b4580db5889427</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>a9ce6b841dd9f127c5e52cc29c9c8c8a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>a1c4afed5e0ebfb89c536183123c5360f</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_binary_layer.html</anchorfile>
      <anchor>a0c763de54f2b22134844f6b686615878</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::BinaryTree</name>
    <filename>classshark_1_1_binary_tree.html</filename>
    <templarg>class InputT</templarg>
    <member kind="function">
      <type></type>
      <name>BinaryTree</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>a50b781f4203ea4d3a9e1dc60a52bec4e</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BinaryTree</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>a9928e5dcb0026028ef3f4cbf56fe8721</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BinaryTree *</type>
      <name>parent</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>a86cc7ef0387f9ae7cb4aff75cf4c6bee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BinaryTree *</type>
      <name>parent</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>acf31280508b15cf67be7b7b4d30e41f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChildren</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>a8d5379344624257a1c2950d4e64ab8c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>a1876569a27c34141bbc4e3fbfe2367ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryTree *</type>
      <name>left</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>ae20385cf5cf85d7168db9b3fcf411c47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BinaryTree *</type>
      <name>left</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>a3b130767c5ff7c5233b0de89fb263221</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryTree *</type>
      <name>right</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>ae5167564abb964d90da01897693a5768</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BinaryTree *</type>
      <name>right</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>a57a5c5fd47bda6d5fc35774abfb9731f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>aa726e7311191b6617cf2079544e23662</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>nodes</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>a53cb65296bf84a1fbe0715e2ba0878bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>ac499a09353aff38530837d22a16ad24a</anchor>
      <arglist>(std::size_t point) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceFromPlane</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>aa0d859e272e40b522cb3eb328b0e1f41</anchor>
      <arglist>(value_type const &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>threshold</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>ad7e43f9fa135d67d1817b2a7aa20b434</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeft</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>a456c9994792021b1bb2557cad4ab7a3e</anchor>
      <arglist>(value_type const &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRight</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>aaf824c0062811dfa4311a66292bb38be</anchor>
      <arglist>(value_type const &amp;point) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractKernelFunction&lt; value_type &gt; const *</type>
      <name>kernel</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>a882ac1aea537378fead318573c9b301c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>squaredDistanceLowerBound</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>aa78235225476effa7b22d285f3d9e197</anchor>
      <arglist>(value_type const &amp;point) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BinaryTree</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>ac92e6cbbc2318f60cf32112bf640138e</anchor>
      <arglist>(BinaryTree *parent, std::size_t *list, std::size_t size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>funct</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>ad3bf9775a2e3122973a1b4036e8854fd</anchor>
      <arglist>(value_type const &amp;point) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Range2::iterator</type>
      <name>splitList</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>a153a6ecae3dd8bf1407209962febca55</anchor>
      <arglist>(Range1 &amp;values, Range2 &amp;points)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryTree *</type>
      <name>mep_parent</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>a100ef54d8a4904afff8c188bf4e735f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryTree *</type>
      <name>mp_left</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>a14c17e4fc65d1351cc23eceae05ce0d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryTree *</type>
      <name>mp_right</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>acc95bb731d3bfac4a896820f8de04ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t *</type>
      <name>mp_indexList</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>afdce442d41868d9a84dcfc954c78ce93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_size</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>a825e00e68228cb1654b5ac0a25f4972a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_nodes</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>ad07d8f306001f8e1bc9a321a3d11444e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_threshold</name>
      <anchorfile>classshark_1_1_binary_tree.html</anchorfile>
      <anchor>a1d2b86563df35585acbbb0364d3a7450</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::BipolarLayer</name>
    <filename>classshark_1_1_bipolar_layer.html</filename>
    <base>shark::ISerializable</base>
    <base>shark::IParameterizable</base>
    <member kind="typedef">
      <type>SymmetricBinarySpace</type>
      <name>StateSpace</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>a7e97b21d8fe5817c17e2cee66c2b8760</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealVector</type>
      <name>SufficientStatistics</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>a50437ba2ec0d1b49fa5cab84f008fb0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; SufficientStatistics &gt;::type</type>
      <name>StatisticsBatch</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>a045a6f381a6f5d318ba718313050c19c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const RealVector &amp;</type>
      <name>bias</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>abc3c1b86b1ad2692712c0e4b34f0d15d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector &amp;</type>
      <name>bias</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>a5414b1f8b92fc2861b6b73155fdd007f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>a29da721e3d84201b8620fb8d3175b402</anchor>
      <arglist>(std::size_t newSize)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>a7b10ef7574a3d07487dff51b992c3dc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sufficientStatistics</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>ab5ddcf9ae8d0e60b1570131409795857</anchor>
      <arglist>(Input const &amp;input, StatisticsBatch &amp;statistics, BetaVector const &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>a4fb877667051839acace46a03ca16e41</anchor>
      <arglist>(StatisticsBatch const &amp;statistics, Matrix &amp;state, double alpha, Rng &amp;rng) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>logProbability</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>a98d488be99ea2223e46ace483bbcc728</anchor>
      <arglist>(StatisticsBatch const &amp;statistics, Matrix const &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix const &amp;</type>
      <name>phi</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>a2e5d0f3116e5113176bc157c099606fa</anchor>
      <arglist>(Matrix const &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix</type>
      <name>expectedPhiValue</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>a4a01087ae0c8d5adb305c8683c23234b</anchor>
      <arglist>(StatisticsBatch const &amp;statistics) const</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix</type>
      <name>mean</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>a5f3b47eb09cea3761614529ae23281e8</anchor>
      <arglist>(StatisticsBatch const &amp;statistics) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>energyTerm</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>aa11e94401fb25c02f251838008d33eed</anchor>
      <arglist>(Matrix const &amp;state, BetaVector const &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>logMarginalize</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>a93a04cba139d2789df22e443ea19118a</anchor>
      <arglist>(Input const &amp;inputs, double beta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expectedParameterDerivative</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>ac31d3fb6b638ebb0fae373a1d02705d6</anchor>
      <arglist>(Vector &amp;derivative, SampleBatch const &amp;samples, WeightVector const &amp;weights) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parameterDerivative</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>a2182a946b08304704794d5d6de4c5027</anchor>
      <arglist>(Vector &amp;derivative, SampleBatch const &amp;samples, WeightVector const &amp;weights) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>ab9d2af87303f98a051ff202cd872c187</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>a18dc991922cd22819b7cb4c46f90f4f9</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>ac21d6a8be9846ba21d63aa3b6318e820</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>a978f4c7acbf8905f6ceaa60f8db7c057</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_bipolar_layer.html</anchorfile>
      <anchor>a3c3b72657fdf459e6292436dbbdd47d5</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::BitflipMutator</name>
    <filename>structshark_1_1_bitflip_mutator.html</filename>
    <member kind="function">
      <type></type>
      <name>BitflipMutator</name>
      <anchorfile>structshark_1_1_bitflip_mutator.html</anchorfile>
      <anchor>afbc4c1396a28cc2b8f26317af44e2625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structshark_1_1_bitflip_mutator.html</anchorfile>
      <anchor>ae4709fc7f40d17f105534b348f925e17</anchor>
      <arglist>(const Function &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_bitflip_mutator.html</anchorfile>
      <anchor>a05a38dc09241ab2eda7c7ff3c2a0593f</anchor>
      <arglist>(Rng &amp;rng, IndividualType &amp;ind)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_bitflip_mutator.html</anchorfile>
      <anchor>aba44f8e8cf6821f292275159de2f6a38</anchor>
      <arglist>(Archive &amp;archive, const unsigned int version)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_mutationStrength</name>
      <anchorfile>structshark_1_1_bitflip_mutator.html</anchorfile>
      <anchor>a799d19ef46cefd24798a26fdbef8f6d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::BlockMatrix2x2</name>
    <filename>classshark_1_1_block_matrix2x2.html</filename>
    <templarg>class Matrix</templarg>
    <member kind="typedef">
      <type>Matrix::QpFloatType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_block_matrix2x2.html</anchorfile>
      <anchor>ad983114753600fdbf90c81ba5bcf3839</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockMatrix2x2</name>
      <anchorfile>classshark_1_1_block_matrix2x2.html</anchorfile>
      <anchor>a4503961134dc4428dd9675c5c8289797</anchor>
      <arglist>(Matrix *base)</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_block_matrix2x2.html</anchorfile>
      <anchor>a7051ce16842666316e1567d868378c3e</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>entry</name>
      <anchorfile>classshark_1_1_block_matrix2x2.html</anchorfile>
      <anchor>a446a4eedb1e3fc6f0d72aa921da39e9a</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>classshark_1_1_block_matrix2x2.html</anchorfile>
      <anchor>a1651f0def46f95b6d1d502c409b2b187</anchor>
      <arglist>(std::size_t i, std::size_t start, std::size_t end, QpFloatType *storage) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matrix</name>
      <anchorfile>classshark_1_1_block_matrix2x2.html</anchorfile>
      <anchor>a7f56cb780421cdde2a0168d65f6c88d9</anchor>
      <arglist>(blas::matrix_expression&lt; M, blas::cpu_tag &gt; &amp;storage) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipColumnsAndRows</name>
      <anchorfile>classshark_1_1_block_matrix2x2.html</anchorfile>
      <anchor>a41f606e589ae9a8b4f98d7679b4074b3</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_block_matrix2x2.html</anchorfile>
      <anchor>ab4be517263cfd424033f5c999ec2c4a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix *</type>
      <name>m_base</name>
      <anchorfile>classshark_1_1_block_matrix2x2.html</anchorfile>
      <anchor>ab7a2a52cee90714069a86f5bd8fb0bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>m_mapping</name>
      <anchorfile>classshark_1_1_block_matrix2x2.html</anchorfile>
      <anchor>a2986a8a50723e023a3a82dafb97170eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::BoxBasedShrinkingStrategy</name>
    <filename>structshark_1_1_box_based_shrinking_strategy.html</filename>
    <templarg>class Problem</templarg>
    <member kind="typedef">
      <type>Problem::QpFloatType</type>
      <name>QpFloatType</name>
      <anchorfile>structshark_1_1_box_based_shrinking_strategy.html</anchorfile>
      <anchor>a0d3ff342a04259d796737f143756c170</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Problem::MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>structshark_1_1_box_based_shrinking_strategy.html</anchorfile>
      <anchor>a75302b71e238815a8b5c8dc663add783</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Problem::PreferedSelectionStrategy</type>
      <name>PreferedSelectionStrategy</name>
      <anchorfile>structshark_1_1_box_based_shrinking_strategy.html</anchorfile>
      <anchor>a8e49b05f112110b820b466c39ac9042e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxBasedShrinkingStrategy</name>
      <anchorfile>structshark_1_1_box_based_shrinking_strategy.html</anchorfile>
      <anchor>a80dbbcad0a023740c8d0bfa4a6ac4a99</anchor>
      <arglist>(ProblemT &amp;problem, bool shrink=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateSMO</name>
      <anchorfile>structshark_1_1_box_based_shrinking_strategy.html</anchorfile>
      <anchor>a1bddc03ff11fb5f104e2f1000c7b2093</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shrink</name>
      <anchorfile>structshark_1_1_box_based_shrinking_strategy.html</anchorfile>
      <anchor>aaa20fc55d3f28d930e26ca577621c44d</anchor>
      <arglist>(double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unshrink</name>
      <anchorfile>structshark_1_1_box_based_shrinking_strategy.html</anchorfile>
      <anchor>adff09578370110d58328cf69e965a5fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShrinking</name>
      <anchorfile>structshark_1_1_box_based_shrinking_strategy.html</anchorfile>
      <anchor>af9a1833825c43ee5492fde78d85cf0c5</anchor>
      <arglist>(bool shrinking)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialSolution</name>
      <anchorfile>structshark_1_1_box_based_shrinking_strategy.html</anchorfile>
      <anchor>a6e718159c7a2ae9bb6e828792da068e3</anchor>
      <arglist>(RealVector const &amp;alpha, RealVector const &amp;gradient, RealVector const &amp;gradientEdge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialSolution</name>
      <anchorfile>structshark_1_1_box_based_shrinking_strategy.html</anchorfile>
      <anchor>ad81b0fa8a8c66781fcfdc126c49cd27e</anchor>
      <arglist>(RealVector const &amp;alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deactivateVariable</name>
      <anchorfile>structshark_1_1_box_based_shrinking_strategy.html</anchorfile>
      <anchor>a28001ad176039adccb83869d0b0867f8</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleBoxConstraints</name>
      <anchorfile>structshark_1_1_box_based_shrinking_strategy.html</anchorfile>
      <anchor>abb019d7a60a63b0555442f946fc346e3</anchor>
      <arglist>(double factor, double variableScalingFactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinear</name>
      <anchorfile>structshark_1_1_box_based_shrinking_strategy.html</anchorfile>
      <anchor>ab68691e44171a2cc4659c19c9a0125d6</anchor>
      <arglist>(std::size_t i, double newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipCoordinates</name>
      <anchorfile>structshark_1_1_box_based_shrinking_strategy.html</anchorfile>
      <anchor>a123fe7062f93d420c0e0350500791bfa</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::BoxConstrainedProblem</name>
    <filename>classshark_1_1_box_constrained_problem.html</filename>
    <templarg>class SVMProblem</templarg>
    <member kind="typedef">
      <type>SVMProblem::QpFloatType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>ad543ba354e420a5689e44919a44d190d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SVMProblem::MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>ae6ac16940dad311fe5702588be55ce85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MaximumGainCriterion</type>
      <name>PreferedSelectionStrategy</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a9a09c817b94eb35a5b80ecf647149b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxConstrainedProblem</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a5544fa68b725cb68c8af64b4133a7c74</anchor>
      <arglist>(SVMProblem &amp;problem)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>dimensions</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a9ac86914b79e249895e9aa37a2eee055</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>active</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a0541d4c711a6d82bf2063d9cf030e551</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>boxMin</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a11b7f562555c6f3718b059eee25bf765</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>boxMax</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>ad2f65f5e6c2917efadd23806ba823ff2</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerBound</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a066c7548372975c1dd243147c0adc1a3</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperBound</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a598687378bfc492935546439156d9836</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDeactivated</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a697ec9eb72894c871731ff96c880fb26</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType &amp;</type>
      <name>quadratic</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a66e89cd77e2cebd9f47b0c1777976aa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>linear</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a73aaea4e475b7d635e48f793202716c9</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>ae0e263a6f4ea23985dd6e4b658e0a047</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>diagonal</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a4b54b554bd89a28a03d63d8dcc97f101</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gradient</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>ae716d77fe6226ae3d032e39586f54219</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>permutation</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>aa4d7bdfee487c84a8a3eea33a4848fd7</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>getUnpermutedAlpha</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>ad42a5a9b13d427f07fe532c2a02f88fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateSMO</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>ae2cc5b2f597778339bdeed341e71eff9</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>functionValue</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a9b5309afbd6858c2315e315bed865ff6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shrink</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a5d8e3e168039a9f71b9b1ed0f3b9dc23</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reshrink</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a379f06bbd07f0f7851596b5a43f53d3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unshrink</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>ac897d9b6915bf6899c7f456d63d15503</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialSolution</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a60cc7449d9f0d93d843780aa3fd36c72</anchor>
      <arglist>(RealVector const &amp;alpha, RealVector const &amp;gradient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialSolution</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>ae5182e43e8faad6b4996ab251e126032</anchor>
      <arglist>(RealVector const &amp;alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deactivateVariable</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>addce0a45f76c289e79eb03012b26efaf</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activateVariable</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a3e70b06e9879ac5d14192b7b1ed551c9</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipCoordinates</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a000d9bb8ba192023087461a40cd284d1</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinear</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a93e3a2d3665ed4a8a7e51b610e41dce9</anchor>
      <arglist>(std::size_t i, double newValue)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>checkKKT</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>af60ac2b478f7a141fca100daa8217edd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateAlphaStatus</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>ad2f62b98e7f7cd1ae112445192f27a1b</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>testShrinkVariable</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>ae85edb4b01745005489b5ced51e4253e</anchor>
      <arglist>(std::size_t a, double largestUp, double smallestDown) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SVMProblem &amp;</type>
      <name>m_problem</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a4fb5abe606ff4359daa992960634f5a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_gradient</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a3ce2ae73fbcee010525160761665fa03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_active</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>a575b8d0676d0e0f1ab8f476c0e28e434</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; char &gt;</type>
      <name>m_alphaStatus</name>
      <anchorfile>classshark_1_1_box_constrained_problem.html</anchorfile>
      <anchor>aebedd6dc4e4e1511da942671351e5acf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::BoxConstrainedShrinkingProblem</name>
    <filename>classshark_1_1_box_constrained_shrinking_problem.html</filename>
    <templarg>class Problem</templarg>
    <base>BoxBasedShrinkingStrategy&lt; BoxConstrainedProblem&lt; Problem &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>BoxConstrainedShrinkingProblem</name>
      <anchorfile>classshark_1_1_box_constrained_shrinking_problem.html</anchorfile>
      <anchor>ac8a3920dc82f084fa2bf75df70eb2134</anchor>
      <arglist>(Problem &amp;problem, bool shrink=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::BoxConstraintHandler</name>
    <filename>classshark_1_1_box_constraint_handler.html</filename>
    <templarg>class Vector</templarg>
    <base>AbstractConstraintHandler&lt; Vector &gt;</base>
    <member kind="function">
      <type></type>
      <name>BoxConstraintHandler</name>
      <anchorfile>classshark_1_1_box_constraint_handler.html</anchorfile>
      <anchor>ae234333cf7124b58f49a67b2bee42f61</anchor>
      <arglist>(Vector const &amp;lower, Vector const &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxConstraintHandler</name>
      <anchorfile>classshark_1_1_box_constraint_handler.html</anchorfile>
      <anchor>a536349ab325db6fe2df852190f2b8d21</anchor>
      <arglist>(std::size_t dim, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxConstraintHandler</name>
      <anchorfile>classshark_1_1_box_constraint_handler.html</anchorfile>
      <anchor>adfd93364ac568994b65108860a76435b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>dimensions</name>
      <anchorfile>classshark_1_1_box_constraint_handler.html</anchorfile>
      <anchor>a280f8c3a860866242596e6e2ea3ff2b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classshark_1_1_box_constraint_handler.html</anchorfile>
      <anchor>a3a87fd3165faee82fb59ab50ed7ad8aa</anchor>
      <arglist>(Vector const &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closestFeasible</name>
      <anchorfile>classshark_1_1_box_constraint_handler.html</anchorfile>
      <anchor>a791747463fd86c8988f4caafda3b6e55</anchor>
      <arglist>(Vector &amp;point) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>generateRandomPoint</name>
      <anchorfile>classshark_1_1_box_constraint_handler.html</anchorfile>
      <anchor>a7c5a1e0e7f1041abd44844d3e2083c12</anchor>
      <arglist>(random::rng_type &amp;rng, Vector &amp;startingPoint) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classshark_1_1_box_constraint_handler.html</anchorfile>
      <anchor>a51bcb77430772e37ab1b464196e5e3a7</anchor>
      <arglist>(Vector const &amp;lower, Vector const &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classshark_1_1_box_constraint_handler.html</anchorfile>
      <anchor>a8b6f3e142b99c89efb273b6b339ceb98</anchor>
      <arglist>(std::size_t dimension, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>Vector const &amp;</type>
      <name>lower</name>
      <anchorfile>classshark_1_1_box_constraint_handler.html</anchorfile>
      <anchor>a8de148cc2f808bb97a4538a0902fee5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector const &amp;</type>
      <name>upper</name>
      <anchorfile>classshark_1_1_box_constraint_handler.html</anchorfile>
      <anchor>aa205d494b0ce2c7fa9fd05c2721939d2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::BoxedSVMProblem</name>
    <filename>classshark_1_1_boxed_s_v_m_problem.html</filename>
    <templarg>class MatrixT</templarg>
    <member kind="typedef">
      <type>MatrixT</type>
      <name>MatrixType</name>
      <anchorfile>classshark_1_1_boxed_s_v_m_problem.html</anchorfile>
      <anchor>a2bd43ebb430844ffaf029e4dbe28654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::QpFloatType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_boxed_s_v_m_problem.html</anchorfile>
      <anchor>aebe162e1ac896671ad588e96fa013d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxedSVMProblem</name>
      <anchorfile>classshark_1_1_boxed_s_v_m_problem.html</anchorfile>
      <anchor>a8646da44427a08f8262f7675bcfdb4b8</anchor>
      <arglist>(MatrixType &amp;quadratic, RealVector const &amp;linear, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>dimensions</name>
      <anchorfile>classshark_1_1_boxed_s_v_m_problem.html</anchorfile>
      <anchor>a6555ea207186eaabc65404f3f5efe419</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>boxMin</name>
      <anchorfile>classshark_1_1_boxed_s_v_m_problem.html</anchorfile>
      <anchor>adb721af815d4a5d0ec6a62f8aeb1f562</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>boxMax</name>
      <anchorfile>classshark_1_1_boxed_s_v_m_problem.html</anchorfile>
      <anchor>a638209b50fe9c222fe9fe444339018f1</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipCoordinates</name>
      <anchorfile>classshark_1_1_boxed_s_v_m_problem.html</anchorfile>
      <anchor>a2896fb191f3d99344e8ec338b481806d</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleBoxConstraints</name>
      <anchorfile>classshark_1_1_boxed_s_v_m_problem.html</anchorfile>
      <anchor>ac9d26f5923f47708bdb22c58931501c8</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="variable">
      <type>MatrixType &amp;</type>
      <name>quadratic</name>
      <anchorfile>classshark_1_1_boxed_s_v_m_problem.html</anchorfile>
      <anchor>a720f758705f47d347f3c2f22cc81a860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>linear</name>
      <anchorfile>classshark_1_1_boxed_s_v_m_problem.html</anchorfile>
      <anchor>add87d9d239cadd1d20e7763d9d9a9a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>alpha</name>
      <anchorfile>classshark_1_1_boxed_s_v_m_problem.html</anchorfile>
      <anchor>a988ae36b538072637c300b438fc300bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>diagonal</name>
      <anchorfile>classshark_1_1_boxed_s_v_m_problem.html</anchorfile>
      <anchor>ab2b98b78ad4b3525df3bf0570c50ef74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>permutation</name>
      <anchorfile>classshark_1_1_boxed_s_v_m_problem.html</anchorfile>
      <anchor>a7f91836f0eec0c624f00c7bd88c13b1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CachedMatrix</name>
    <filename>classshark_1_1_cached_matrix.html</filename>
    <templarg>class Matrix</templarg>
    <member kind="typedef">
      <type>Matrix::QpFloatType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_cached_matrix.html</anchorfile>
      <anchor>acaaab3847ddd106bbcfda358609011a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CachedMatrix</name>
      <anchorfile>classshark_1_1_cached_matrix.html</anchorfile>
      <anchor>acbf86b7470e20b4176d2ec56c6be2c8a</anchor>
      <arglist>(Matrix *base, std::size_t cachesize=0x4000000)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>classshark_1_1_cached_matrix.html</anchorfile>
      <anchor>a09afc06315ddf58b64497d67886cb805</anchor>
      <arglist>(std::size_t k, std::size_t start, std::size_t end, QpFloatType *storage) const</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType *</type>
      <name>row</name>
      <anchorfile>classshark_1_1_cached_matrix.html</anchorfile>
      <anchor>a5bbb64e31e0b33409f9fe76b939d735e</anchor>
      <arglist>(std::size_t k, std::size_t start, std::size_t end)</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_cached_matrix.html</anchorfile>
      <anchor>acc663e94e28d7e35fd77b2c8b4889c07</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>entry</name>
      <anchorfile>classshark_1_1_cached_matrix.html</anchorfile>
      <anchor>a00453296e3eca46e834420e3d20a6d6f</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipColumnsAndRows</name>
      <anchorfile>classshark_1_1_cached_matrix.html</anchorfile>
      <anchor>aad2529155a7ebf9ef3de0cacf46956d0</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_cached_matrix.html</anchorfile>
      <anchor>aff0ff1f338d99ff3030a321cd292140f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getMaxCacheSize</name>
      <anchorfile>classshark_1_1_cached_matrix.html</anchorfile>
      <anchor>a4e3b71aa789c0cb4036f4bbf76313f9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCacheSize</name>
      <anchorfile>classshark_1_1_cached_matrix.html</anchorfile>
      <anchor>a53c29c87d1c481a928abf63171d45fbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCacheRowSize</name>
      <anchorfile>classshark_1_1_cached_matrix.html</anchorfile>
      <anchor>a752febb4f36dd418bce1e8eeefbc549a</anchor>
      <arglist>(std::size_t k) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCached</name>
      <anchorfile>classshark_1_1_cached_matrix.html</anchorfile>
      <anchor>a64a43716271f03ac6415a5cecc4c1e5d</anchor>
      <arglist>(std::size_t k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxCachedIndex</name>
      <anchorfile>classshark_1_1_cached_matrix.html</anchorfile>
      <anchor>af653442cee95203259116e1f4605ca35</anchor>
      <arglist>(std::size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classshark_1_1_cached_matrix.html</anchorfile>
      <anchor>ae000f8c2a306080058593b6ade36db12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix *</type>
      <name>mep_baseMatrix</name>
      <anchorfile>classshark_1_1_cached_matrix.html</anchorfile>
      <anchor>aec2edea13ec507ae67076d98cdfd687d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LRUCache&lt; QpFloatType &gt;</type>
      <name>m_cache</name>
      <anchorfile>classshark_1_1_cached_matrix.html</anchorfile>
      <anchor>a8beb8003d800373adbea3036690f85d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::CanBeCalled</name>
    <filename>structshark_1_1_can_be_called.html</filename>
    <templarg>class Functor</templarg>
    <templarg>class Argument</templarg>
    <member kind="variable" static="yes">
      <type>static bool const</type>
      <name>value</name>
      <anchorfile>structshark_1_1_can_be_called.html</anchorfile>
      <anchor>afcd8fe84c968364924b1d5870905a3d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::CanBeCalled&lt; R(*)(T), Argument &gt;</name>
    <filename>structshark_1_1_can_be_called_3_01_r_07_5_08_07_t_08_00_01_argument_01_4.html</filename>
    <templarg>class R</templarg>
    <templarg>class T</templarg>
    <templarg>class Argument</templarg>
    <member kind="variable" static="yes">
      <type>static bool const</type>
      <name>value</name>
      <anchorfile>structshark_1_1_can_be_called_3_01_r_07_5_08_07_t_08_00_01_argument_01_4.html</anchorfile>
      <anchor>a2788425b5ad00ac581d1f6b42c18528c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::CanBeCalled&lt; R(T), Argument &gt;</name>
    <filename>structshark_1_1_can_be_called_3_01_r_07_t_08_00_01_argument_01_4.html</filename>
    <templarg>class R</templarg>
    <templarg>class T</templarg>
    <templarg>class Argument</templarg>
    <member kind="variable" static="yes">
      <type>static bool const</type>
      <name>value</name>
      <anchorfile>structshark_1_1_can_be_called_3_01_r_07_t_08_00_01_argument_01_4.html</anchorfile>
      <anchor>abeb075b89ef913b8cd1960cbe80c5cec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CARTree</name>
    <filename>classshark_1_1_c_a_r_tree.html</filename>
    <templarg>class LabelType</templarg>
    <base>AbstractModel&lt; RealVector, LabelType &gt;</base>
    <class kind="struct">shark::CARTree::Node</class>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>aaf167bca3b83a14d3fbc520496b3a30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>aa2ae0547dd93ae91396f155ac603d698</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Node &gt;</type>
      <name>TreeType</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>aab9958485b60a70fd08e501555bf82ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CARTree</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>a81e32e481410512f89d6ce6f6cd7dc35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CARTree</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>a6ef5eac13f15ef4aa02f2a8874d7a787</anchor>
      <arglist>(std::size_t inputDimension, Shape const &amp;outputShape)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>abe168c9946dc394dc6216b803890b242</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>ab61230bfb1fa0dabe95576205b9dfdfc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>a4aa23de99b00a1ceeb1d4445f8344ad6</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>a63ecc465d06fff61ce17cdb3b4133131</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>a94ff10cd7a06d9a14e8a67b8b7ff3b2a</anchor>
      <arglist>(RealVector const &amp;pattern, LabelType &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>a7cf42c13416bca1cbb8b1a1d259f5dc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>a6e4f9312692c66350cdeca84237a89b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>a0ab54720cda5c7a9d3f571850f124725</anchor>
      <arglist>(RealVector const &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>aa9417860a291a1f8703c89cb0268c29c</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>aee2721f04af7597a7df6a825b4ca7777</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>UIntVector</type>
      <name>countAttributes</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>ac18ee6d585b246bbd221c08639a0cef0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>a3415c364f7cb7d30a4afef271f1f5b42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>ad304c0e7b8eafe8b7a479c55893acf2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfNodes</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>aa12bccd442cf16fb99410fc161ac1c52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node &amp;</type>
      <name>getNode</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>a05fce970ee23389c182a466aa287d207</anchor>
      <arglist>(std::size_t nodeId)</arglist>
    </member>
    <member kind="function">
      <type>Node const &amp;</type>
      <name>getNode</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>a57ae315f283118d76b57ee3526683439</anchor>
      <arglist>(std::size_t nodeId) const</arglist>
    </member>
    <member kind="function">
      <type>LabelType const &amp;</type>
      <name>getLabel</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>acbe95f0748a72c0e0ea58b682aaf79ce</anchor>
      <arglist>(std::size_t nodeId) const</arglist>
    </member>
    <member kind="function">
      <type>Node &amp;</type>
      <name>createRoot</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>ad91c08d09c8d94522cb44b7807a73ade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node &amp;</type>
      <name>transformInternalNode</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>a3cb77d15a5e99bfb46b1d5a619e5f533</anchor>
      <arglist>(std::size_t nodeId, std::size_t attributeIndex, double attributeValue)</arglist>
    </member>
    <member kind="function">
      <type>Node &amp;</type>
      <name>transformLeafNode</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>a2e1416b62cbf5b9704fb0d3ff8e3fa4d</anchor>
      <arglist>(std::size_t nodeId, LabelType const &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reorderBFS</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>ae38eaeb8b77503cb46cdefdce5d363ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>findLeaf</name>
      <anchorfile>classshark_1_1_c_a_r_tree.html</anchorfile>
      <anchor>a28c7b70a46acdcec82b2d3c234b345ed</anchor>
      <arglist>(Vector const &amp;pattern) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Centroids</name>
    <filename>classshark_1_1_centroids.html</filename>
    <base>AbstractClustering&lt; RealVector &gt;</base>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL</type>
      <name>Centroids</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>ab83a899ae20f7e40bfbe6e84688b9401</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL</type>
      <name>Centroids</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>a2679c9e18bee09d905fdc51fafead23c</anchor>
      <arglist>(std::size_t centroids, std::size_t dimension)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL</type>
      <name>Centroids</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>a26f48dd5f3fc482be5d09c8b706a883b</anchor>
      <arglist>(Data&lt; RealVector &gt; const &amp;centroids)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>a82a973c9374f34c44c68fd3c1a15f0d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>aeda09ff6d0c326df4c90eb3ebe2d214a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>a130828c5db33fe9c2b8a839a972889d3</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>a3b61acaed4a72c56a3c3e22918e0b1ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>a162b069a4d71fcec6e7dae5c8251cb2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL std::size_t</type>
      <name>numberOfClusters</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>a3a1d11a1cee40cfb080b56ba037920b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Data&lt; RealVector &gt; const &amp;</type>
      <name>centroids</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>a8dcfd9a069a3ea8456e126138f3dee37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCentroids</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>a45d2dd06b31f49dc53a4697e8d368693</anchor>
      <arglist>(Data&lt; RealVector &gt; const &amp;newCentroids)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>aac250dde37c2e65581d3f9714891e04d</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>a47f8243d170bf0c732a7c100b47574b5</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL RealVector</type>
      <name>softMembership</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>a27c10e06b07d4e747db2cfc939020e5f</anchor>
      <arglist>(RealVector const &amp;pattern) const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL RealMatrix</type>
      <name>softMembership</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>ac8b603c938cfa98e3da02cd5f704d7f8</anchor>
      <arglist>(BatchInputType const &amp;patterns) const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL RealMatrix</type>
      <name>distances</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>aa60e316c9166e3a61903dceadfdd0785</anchor>
      <arglist>(BatchInputType const &amp;patterns) const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>initFromData</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>a15454f974bdf8167ef231941a7a54c6b</anchor>
      <arglist>(ClassificationDataset const &amp;data, std::size_t noClusters=0, std::size_t noClasses=0)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>initFromData</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>a43ac4993cd3d7178e77740e7831869e5</anchor>
      <arglist>(Data&lt; RealVector &gt; const &amp;dataset, std::size_t noClusters)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SHARK_EXPORT_SYMBOL double</type>
      <name>membershipKernel</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>a76f29a0b624229842ae413d8538a7e72</anchor>
      <arglist>(double dist) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Data&lt; RealVector &gt;</type>
      <name>m_centroids</name>
      <anchorfile>classshark_1_1_centroids.html</anchorfile>
      <anchor>a8e83776854b0e78d1357e7ef880db67f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CG</name>
    <filename>classshark_1_1_c_g.html</filename>
    <templarg>class SearchPointType</templarg>
    <base>shark::AbstractLineSearchOptimizer</base>
    <member kind="typedef">
      <type>AbstractLineSearchOptimizer&lt; SearchPointType &gt;::ObjectiveFunctionType</type>
      <name>ObjectiveFunctionType</name>
      <anchorfile>classshark_1_1_c_g.html</anchorfile>
      <anchor>aa577ba85d322d93249ea48d6d31d25de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_c_g.html</anchorfile>
      <anchor>a2763e3d0e95cefaf834733d6752602af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_c_g.html</anchorfile>
      <anchor>a3a13261a94421b23929ff9290e9f92e2</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_c_g.html</anchorfile>
      <anchor>a1d597e2346a245078bfcf2679707fd25</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initModel</name>
      <anchorfile>classshark_1_1_c_g.html</anchorfile>
      <anchor>aa6aec176a373e6061cd9379ad61614a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeSearchDirection</name>
      <anchorfile>classshark_1_1_c_g.html</anchorfile>
      <anchor>a971b91d5b0e5bd780a12e82b54be4dc7</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>m_count</name>
      <anchorfile>classshark_1_1_c_g.html</anchorfile>
      <anchor>ad71c940a77cf02a297e57c7f0f61412c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Chessboard</name>
    <filename>classshark_1_1_chessboard.html</filename>
    <base>LabeledDataDistribution&lt; RealVector, unsigned int &gt;</base>
    <member kind="function">
      <type></type>
      <name>Chessboard</name>
      <anchorfile>classshark_1_1_chessboard.html</anchorfile>
      <anchor>ab98d4611c8a5c73da99449bd89711b36</anchor>
      <arglist>(unsigned int size=4, double noiselevel=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classshark_1_1_chessboard.html</anchorfile>
      <anchor>a6717822ad9bda839acd8aa21d46d2117</anchor>
      <arglist>(RealVector &amp;input, unsigned int &amp;label) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_size</name>
      <anchorfile>classshark_1_1_chessboard.html</anchorfile>
      <anchor>a3d01f428a1b2cb519a96e83df292e536</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_noiselevel</name>
      <anchorfile>classshark_1_1_chessboard.html</anchorfile>
      <anchor>a2407204a81c6eadf657692344f352cb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::Cigar</name>
    <filename>structshark_1_1benchmarks_1_1_cigar.html</filename>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>Cigar</name>
      <anchorfile>structshark_1_1benchmarks_1_1_cigar.html</anchorfile>
      <anchor>ac25b515e63e4a24272167417bce5c9af</anchor>
      <arglist>(std::size_t numberOfVariables=5, double alpha=1.E-3)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_cigar.html</anchorfile>
      <anchor>ab9805f4c6bb5fd9e5eccd3fd9f40d6a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_cigar.html</anchorfile>
      <anchor>ad32baeea93164f338ac3030b4f0c7efc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_cigar.html</anchorfile>
      <anchor>a6b1c11acfee4fbc235213b6d213d4def</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_cigar.html</anchorfile>
      <anchor>ab50e42294ea5f1b2d6f03068d3319df0</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>structshark_1_1benchmarks_1_1_cigar.html</anchorfile>
      <anchor>aecd195b4f90a5db49e588f1f42602daa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_cigar.html</anchorfile>
      <anchor>aab19245fe266e461fdc72d6c0cf809b0</anchor>
      <arglist>(const SearchPointType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>structshark_1_1benchmarks_1_1_cigar.html</anchorfile>
      <anchor>ac9fdc7cf8b3914d66f9c3c032d14d95e</anchor>
      <arglist>(SearchPointType const &amp;p, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>structshark_1_1benchmarks_1_1_cigar.html</anchorfile>
      <anchor>a36582f2e9e6c15cfadaecf47d9aaaa9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>structshark_1_1benchmarks_1_1_cigar.html</anchorfile>
      <anchor>a5dfed844c486e7df31c9b42d3c5ab3c8</anchor>
      <arglist>(double alpha)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::benchmarks::CigarDiscus</name>
    <filename>classshark_1_1benchmarks_1_1_cigar_discus.html</filename>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>CigarDiscus</name>
      <anchorfile>classshark_1_1benchmarks_1_1_cigar_discus.html</anchorfile>
      <anchor>a19caaa6a1eb8f079afe5d78d88543f2c</anchor>
      <arglist>(std::size_t numberOfVariables=5, double alpha=1E-3)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1benchmarks_1_1_cigar_discus.html</anchorfile>
      <anchor>a1e9cb8436a4c7f3b0a470469531240ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1benchmarks_1_1_cigar_discus.html</anchorfile>
      <anchor>ade71ac99b993020d10de6a1f87e17a21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>classshark_1_1benchmarks_1_1_cigar_discus.html</anchorfile>
      <anchor>a6f6615a1a19a2cc6c4ff63b9b40b60c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>classshark_1_1benchmarks_1_1_cigar_discus.html</anchorfile>
      <anchor>a2174c3d672907da2a808eab8cb8e5e29</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>classshark_1_1benchmarks_1_1_cigar_discus.html</anchorfile>
      <anchor>acb893e78074c47fb828f92c7ce3d4c08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1benchmarks_1_1_cigar_discus.html</anchorfile>
      <anchor>a08c28c2dc2d89428b1882d5776e30ffe</anchor>
      <arglist>(const SearchPointType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>classshark_1_1benchmarks_1_1_cigar_discus.html</anchorfile>
      <anchor>a60e96d8546b196dea69e0b2299f77723</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>classshark_1_1benchmarks_1_1_cigar_discus.html</anchorfile>
      <anchor>a08a1f1c629187707f07dac64b3a6fca0</anchor>
      <arglist>(double alpha)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::CIGTAB1</name>
    <filename>structshark_1_1benchmarks_1_1_c_i_g_t_a_b1.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>CIGTAB1</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b1.html</anchorfile>
      <anchor>a62c45d636c14e296c4f6827f767415cf</anchor>
      <arglist>(std::size_t numberOfVariables=5)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b1.html</anchorfile>
      <anchor>ae23931b5466e969c88c84fe0297e1b00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b1.html</anchorfile>
      <anchor>a60da03bfbedfa03a09b14c1c8457c2b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b1.html</anchorfile>
      <anchor>ab46ac9805667ec95ad33da289c65b291</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b1.html</anchorfile>
      <anchor>ad5201a02f54acd0901c54efcb0486135</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b1.html</anchorfile>
      <anchor>abd1671bf7df0847bb3a35e41d7eb6b3f</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b1.html</anchorfile>
      <anchor>aca3944500a5ff641a6953779d1a9ddcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b1.html</anchorfile>
      <anchor>af7d09d2566ec74aa08430d5526917c88</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b1.html</anchorfile>
      <anchor>a6111aa5a41a5c9f602df42e248789d5e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::CIGTAB2</name>
    <filename>structshark_1_1benchmarks_1_1_c_i_g_t_a_b2.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>CIGTAB2</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b2.html</anchorfile>
      <anchor>a378f97988070d1eb7a190f29eac23466</anchor>
      <arglist>(std::size_t numberOfVariables=5)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b2.html</anchorfile>
      <anchor>af0ba8135253cb5a6d678129678575ccf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b2.html</anchorfile>
      <anchor>a14d6a3c077f2d0b960a35d411e2b0686</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b2.html</anchorfile>
      <anchor>a9bd1901f145feb709256bc5da78b2fac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b2.html</anchorfile>
      <anchor>a30990e165b5b9629785b66085478471f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b2.html</anchorfile>
      <anchor>a945b3032f18ff14ee323af366cbe43db</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b2.html</anchorfile>
      <anchor>a378192b95c616850fa29789990702ff7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b2.html</anchorfile>
      <anchor>a1d8d400184b46a67c3cfdbf4cf425303</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>structshark_1_1benchmarks_1_1_c_i_g_t_a_b2.html</anchorfile>
      <anchor>a211035af2383fc2e8de1e345932dae0e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CircleInSquare</name>
    <filename>classshark_1_1_circle_in_square.html</filename>
    <base>LabeledDataDistribution&lt; RealVector, unsigned int &gt;</base>
    <member kind="function">
      <type></type>
      <name>CircleInSquare</name>
      <anchorfile>classshark_1_1_circle_in_square.html</anchorfile>
      <anchor>a75c2e5aa442b209a3658ef8cb0389508</anchor>
      <arglist>(unsigned int dimensions=2, double noiselevel=0.0, bool class_prob_equal=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimits</name>
      <anchorfile>classshark_1_1_circle_in_square.html</anchorfile>
      <anchor>abad338aadd74f9d0e7eeb6788c598c8d</anchor>
      <arglist>(double lower_limit, double upper_limit, double inner_radius, double outer_radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classshark_1_1_circle_in_square.html</anchorfile>
      <anchor>a69f09fa2492f510a2fd07f2020004eeb</anchor>
      <arglist>(RealVector &amp;input, unsigned int &amp;label) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_dimensions</name>
      <anchorfile>classshark_1_1_circle_in_square.html</anchorfile>
      <anchor>add4c679abb7b33b1511a15c9a84035f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_noiselevel</name>
      <anchorfile>classshark_1_1_circle_in_square.html</anchorfile>
      <anchor>a5427e914bbf910a690a7b63017f8a050</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_lowerLimit</name>
      <anchorfile>classshark_1_1_circle_in_square.html</anchorfile>
      <anchor>a22f15e5fbeb22333bba7df99e116a1b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_upperLimit</name>
      <anchorfile>classshark_1_1_circle_in_square.html</anchorfile>
      <anchor>a91ae8e519fbef45186215cc467c6fc11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_centerpoint</name>
      <anchorfile>classshark_1_1_circle_in_square.html</anchorfile>
      <anchor>a7ccd6eb3208e3ec0f0dc6208dd3b34a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_inner_radius2</name>
      <anchorfile>classshark_1_1_circle_in_square.html</anchorfile>
      <anchor>a56e17b654828286f63e06e8e6b6d3296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_outer_radius2</name>
      <anchorfile>classshark_1_1_circle_in_square.html</anchorfile>
      <anchor>a9e6f9e01e9e8e8ebb9fc684e7bdcde24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_equal_class_prob</name>
      <anchorfile>classshark_1_1_circle_in_square.html</anchorfile>
      <anchor>abbf7bf1bbdc3cadf5d98058553e9ce2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Classifier</name>
    <filename>classshark_1_1_classifier.html</filename>
    <templarg>class Model</templarg>
    <base>AbstractModel&lt; Model::InputType, unsigned int, Model::ParameterVectorType &gt;</base>
    <member kind="typedef">
      <type>Model</type>
      <name>DecisionFunctionType</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>a8ce1b873de955920b900779bf02c719e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Model::InputType</type>
      <name>InputType</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>a33186c46c8fb9472d9e2c219be2c66f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>OutputType</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>a15d0b8ab148d1ea83bee0573213d8f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; InputType &gt;::type</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>ae56c82feb436eb83115298ba4fd0c89e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; unsignedint &gt;::type</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>a997346948fcd63ecfee7be139637c2be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Model::ParameterVectorType</type>
      <name>ParameterVectorType</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>a2e36a54e9541fbc7ed0138fd91c9a6a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Classifier</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>acca41eec396129e8c9859d1115d2bb65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Classifier</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>a88985a9e17ba8ee00512dbeec74043ad</anchor>
      <arglist>(Model const &amp;decisionFunction)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>a0badc4c5bfefe6e358c03ca8b115ffdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ParameterVectorType</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>aaf00d04ae93bc8a05768c6c3055fe79e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>a0a884c2aea6696bd65f9f195536c05cf</anchor>
      <arglist>(ParameterVectorType const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>a6a538027c562c81ca3520173fd0f2802</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>ad06d269ebd28e84e9eb9774f10b4c745</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>a5a2407d446b736bb6953a467b5dc080d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>bias</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>ae97fca135ea08ed2c8e60d01b3aad117</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector &amp;</type>
      <name>bias</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>a9742c8125eb03f0e40281945dd98de46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Model const &amp;</type>
      <name>decisionFunction</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>adf58b2ed9969bad9828772dd23c59c02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Model &amp;</type>
      <name>decisionFunction</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>af29209184ee464261cc9b668d71ba6e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>aa0fe007fbef4ec06e2a67ddf844f889d</anchor>
      <arglist>(BatchInputType const &amp;input, BatchOutputType &amp;output) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>a06babaf2a8d4022a2727f5654c9e9237</anchor>
      <arglist>(BatchInputType const &amp;input, BatchOutputType &amp;output, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>a6efcef45c2cecbf50e2021dc1fab842c</anchor>
      <arglist>(InputType const &amp;pattern, OutputType &amp;output) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>acb5a2d1e5b06c0ef549b3e55d495cdc7</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_classifier.html</anchorfile>
      <anchor>a580c095f6fdbb8abb438ad7af392bc77</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ClusteringModel</name>
    <filename>classshark_1_1_clustering_model.html</filename>
    <templarg>class InputT</templarg>
    <templarg>class OutputT</templarg>
    <base>AbstractModel&lt; InputT, OutputT &gt;</base>
    <member kind="typedef">
      <type>AbstractClustering&lt; InputT &gt;</type>
      <name>ClusteringType</name>
      <anchorfile>classshark_1_1_clustering_model.html</anchorfile>
      <anchor>a729fe6709825d91c87ebec400e64aac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_clustering_model.html</anchorfile>
      <anchor>a5a8884d748c8b0c9469c9a9fa8a89395</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_clustering_model.html</anchorfile>
      <anchor>a1deee76d6cb1728c6b7d4e1eeef078f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusteringModel</name>
      <anchorfile>classshark_1_1_clustering_model.html</anchorfile>
      <anchor>aa40b5785d0746a501fbeea70510eb59c</anchor>
      <arglist>(ClusteringType *clustering)</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_clustering_model.html</anchorfile>
      <anchor>a82452bf00a5de777684ffc304e548cad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_clustering_model.html</anchorfile>
      <anchor>a3be2a88c4197789a43c6d5173f947dc7</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_clustering_model.html</anchorfile>
      <anchor>ac4af76bd1b02983286a11246d503308a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_clustering_model.html</anchorfile>
      <anchor>a9992375d324ad22ea888e0ecd4c9303f</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_clustering_model.html</anchorfile>
      <anchor>a4e2e1b22bebd57146434b0bcd5abd7d7</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_clustering_model.html</anchorfile>
      <anchor>acd41c1d0bfa8abb1efe5756b2cde9bd3</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs, State &amp;state) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ClusteringType *</type>
      <name>mep_clustering</name>
      <anchorfile>classshark_1_1_clustering_model.html</anchorfile>
      <anchor>a5d0fce468545d9074663b3a530109de3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CMA</name>
    <filename>classshark_1_1_c_m_a.html</filename>
    <base>AbstractSingleObjectiveOptimizer&lt; RealVector &gt;</base>
    <member kind="enumeration">
      <type></type>
      <name>RecombinationType</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>aafbd8e245dd9f8aad0e0e597557c9eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EQUAL</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>aafbd8e245dd9f8aad0e0e597557c9eb3addcb82a4284c2072d046f6f6c5ae354d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINEAR</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>aafbd8e245dd9f8aad0e0e597557c9eb3a8b5ed54ee62cc5823b177633b76c376c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUPERLINEAR</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>aafbd8e245dd9f8aad0e0e597557c9eb3a791798e0145d16d584a2bbb7d2deddb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EQUAL</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>aafbd8e245dd9f8aad0e0e597557c9eb3addcb82a4284c2072d046f6f6c5ae354d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINEAR</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>aafbd8e245dd9f8aad0e0e597557c9eb3a8b5ed54ee62cc5823b177633b76c376c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUPERLINEAR</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>aafbd8e245dd9f8aad0e0e597557c9eb3a791798e0145d16d584a2bbb7d2deddb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL</type>
      <name>CMA</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a87ad8d08471b5488311a53c5f0a07594</anchor>
      <arglist>(random::rng_type &amp;rng=random::globalRng)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a5552a900fb20cb35af9103467796e18e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>af043e55b471f98e30cf86e00349ddb5b</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a69554923b2647c1eddf0aa3ca5a1ab53</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a28cc4e5f5429c3a6c1b650c1f75e76db</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, SearchPointType const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a6de4377a5bdc84947c86d0394be08179</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, SearchPointType const &amp;initialSearchPoint, std::size_t lambda, std::size_t mu, double initialSigma, const boost::optional&lt; RealMatrix &gt; &amp;initialCovarianceMatrix=boost::optional&lt; RealMatrix &gt;())</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a4aa0ce8e2e580d20c5a99e5723e974b1</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialSigma</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a292d0d4952eb924db23f028fa2f9135d</anchor>
      <arglist>(double initSigma)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sigma</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a65bdf7e58529550129e284b9dc4d55a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>mean</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>ae078f86fe38152ef21788d97878dc959</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>weights</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>abe589b2e99897da15278127267247ac8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>evolutionPath</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>ad70e86120d062d0a79b11e4830586655</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>evolutionPathSigma</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a441e3888a8ec95f696cc49bd5f3c5a36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix const &amp;</type>
      <name>covarianceMatrix</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a2fe67c78f272defd3e468d0eeaa1a553</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RecombinationType</type>
      <name>recombinationType</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a013cafb7bc9296b5a07e8f400be1d538</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RecombinationType &amp;</type>
      <name>recombinationType</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a348c6dfe6ac26b96e895e0cd4548883b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>lowerBound</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a67da4539c2b2e375f2c308c190fc5b4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLowerBound</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a2f4512c82509097dfbb327971032c49f</anchor>
      <arglist>(double lowerBound)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>mu</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a5c5cd3173b9aef38c6e113517bd8b3d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMu</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>aad3d3aa0509567312d63c4a42fa90812</anchor>
      <arglist>(std::size_t mu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLambda</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a2204984f1f5de901f4c69c64a51fb765</anchor>
      <arglist>(std::size_t lambda)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>lambda</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a7beed1a597007c62fe9e397c5e6ea6f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix const &amp;</type>
      <name>eigenVectors</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a258efdafafccec607bd09eaebd9955cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>eigenValues</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a6735aa83880d1be9675f24dea483f665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>condition</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a7a80596955e5d064cc8e6f2a69498c5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfEvaluations</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a217a3a2c532ba6f3adfe58bb13b8de44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SHARK_EXPORT_SYMBOL std::size_t</type>
      <name>suggestLambda</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>afc7fa629a06f22c0f1cb09ca8c7cedd2</anchor>
      <arglist>(std::size_t dimension)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SHARK_EXPORT_SYMBOL std::size_t</type>
      <name>suggestMu</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>aa4b806974a96ecb62991bd8b5f88ae69</anchor>
      <arglist>(std::size_t lambda, RecombinationType recomb=SUPERLINEAR)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Individual&lt; RealVector, double, RealVector &gt;</type>
      <name>IndividualType</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a2544cd9f49fe9579d351e2689e3bd96f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SHARK_EXPORT_SYMBOL std::vector&lt; IndividualType &gt;</type>
      <name>generateOffspring</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a6013d0aa09665a3ed034ddc06be7f6cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>updatePopulation</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a2d4013411242e9bb5f6c4aa943242817</anchor>
      <arglist>(std::vector&lt; IndividualType &gt; const &amp;offspring)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>doInit</name>
      <anchorfile>classshark_1_1_c_m_a.html</anchorfile>
      <anchor>a862a084a4facd795a1f99267c4c4e1e1</anchor>
      <arglist>(std::vector&lt; SearchPointType &gt; const &amp;points, std::vector&lt; ResultType &gt; const &amp;functionValues, std::size_t lambda, std::size_t mu, double initialSigma)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::CMAChromosome</name>
    <filename>structshark_1_1_c_m_a_chromosome.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>IndividualSuccess</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a1f218363002ca2397630da815462d207</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Successful</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a1f218363002ca2397630da815462d207a2658107652dbc18fa1dfc1561bbc9d8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unsuccessful</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a1f218363002ca2397630da815462d207a1f723904e22cffee4ff5181b75f590a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Failure</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a1f218363002ca2397630da815462d207aab6c93c854b415c823070faca8878c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Successful</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a1f218363002ca2397630da815462d207a2658107652dbc18fa1dfc1561bbc9d8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unsuccessful</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a1f218363002ca2397630da815462d207a1f723904e22cffee4ff5181b75f590a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Failure</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a1f218363002ca2397630da815462d207aab6c93c854b415c823070faca8878c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CMAChromosome</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a3140075b6f17139924e0a45a3f0270b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CMAChromosome</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>aba46843f3412c36f04ec4c01fc8eabd8</anchor>
      <arglist>(std::size_t searchSpaceDimension, double successThreshold, double initialStepSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAsOffspring</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a6a24c38dcc70306f8204f4c83bdf59f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAsParent</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a75bc2d00ca8b695014e3c94ff1063afa</anchor>
      <arglist>(IndividualSuccess offspringSuccess)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a02412ded01f20ad747d1eac66afb1d5a</anchor>
      <arglist>(Archive &amp;archive, const unsigned int version)</arglist>
    </member>
    <member kind="variable">
      <type>MultiVariateNormalDistributionCholesky</type>
      <name>m_mutationDistribution</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a5cae82c29c7c3423e3141ec7934db090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>m_evolutionPath</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a6bf2c9b5df1dbaf02ebc2d4d353bda88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>m_lastStep</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>ada778d876f95126d15d8fffd0e569764</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>m_lastZ</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a3b0339485d78e58d3cbebb0deb1a0ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_stepSize</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a6af1a949711f8816d6365a6c6391ee86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_stepSizeDampingFactor</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a289c4958f7b199d93fdb40d6f26b66d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_stepSizeLearningRate</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>ac74fce75d02c73cc4280f891c860ee75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_successProbability</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a022346615e7fe36b57acbf3f680e3bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_targetSuccessProbability</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a0b07c3150e6f2fe503e8707bfb017ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_evolutionPathLearningRate</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a89bd872d3d439e5108c49dfca3a27d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_covarianceMatrixLearningRate</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a20bac09c3fe5303052fda9eb6482f0d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_covarianceMatrixUnlearningRate</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>a4ef9704be8fe2674fe29e69e59a122dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_successThreshold</name>
      <anchorfile>structshark_1_1_c_m_a_chromosome.html</anchorfile>
      <anchor>ab36738a46bad24a90a050702062d319c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CMACMap</name>
    <filename>classshark_1_1_c_m_a_c_map.html</filename>
    <base>AbstractModel&lt; RealVector, RealVector &gt;</base>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL</type>
      <name>CMACMap</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>ab3c645c7695685c7f79a4bbbf1eb3f9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>a5472d8dbda3cd1256d809dca83939952</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>setStructure</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>a5c3505416e7e73665b21ee7cb5a83973</anchor>
      <arglist>(Shape const &amp;inputs, Shape const &amp;outputs, std::size_t numberOfTilings, std::size_t numberOfTiles, double lower=0., double upper=1., bool randomTiles=false)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>setStructure</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>a5bd9bdcfcb262149ede0318b659b66fb</anchor>
      <arglist>(Shape const &amp;inputs, Shape const &amp;outputs, std::size_t numberOfTilings, std::size_t numberOfTiles, RealMatrix const &amp;bounds, bool randomTiles=false)</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>a62d37e3104adce826f02f83e796070ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>a014784979a9cf1516977daaa94b88c9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>a6e01866bc989b8671047e1474cace120</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>aa6e4916b5dd3ae2a04d771afa1ca5ca8</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>a692900ceb1b76ebfc7fa74d4e5eec942</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>a262bfb0a301de3af1bcac7f5718ef782</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>adb9b49636c80a28b5df84ea629e11702</anchor>
      <arglist>(const RealMatrix &amp;patterns, RealMatrix &amp;outputs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>aabb0c96494086be3b80fee2c45af694f</anchor>
      <arglist>(const RealMatrix &amp;patterns, RealMatrix &amp;outputs, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>a031287cd10309ed47498ec798d445540</anchor>
      <arglist>(RealMatrix const &amp;pattern, BatchOutputType const &amp;outputs, RealMatrix const &amp;coefficients, State const &amp;state, RealVector &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>a1af8ce06b347c7ab4c4069cd196d85dd</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>ad9597822967b16ae5a73a9d3c9af1309</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SHARK_EXPORT_SYMBOL std::size_t</type>
      <name>getArrayIndexForTiling</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>a0f4d676381fa8c601e3a7e18c67420e9</anchor>
      <arglist>(std::size_t indexOfTiling, RealVector const &amp;point) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SHARK_EXPORT_SYMBOL std::vector&lt; std::size_t &gt;</type>
      <name>getIndizes</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>a95d4ca42a05943cdea9195f6f99851e5</anchor>
      <arglist>(blas::dense_vector_adaptor&lt; double const &gt; const &amp;point) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealMatrix</type>
      <name>m_offset</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>ac4c1059f4f78b58888279e1c2674fb30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>m_dimOffset</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>acd01d7f5d8e45d4c0417a2302fed67bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealMatrix</type>
      <name>m_tileBounds</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>a8f5ac6df99e391cb3c6774c17f658062</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_tilings</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>a1f8b8b4ff4907c0211c2f174caedf62e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_parametersPerTiling</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>a7eb4aece02496b56d1a933809dd11ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Shape</type>
      <name>m_inputShape</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>affc1db09caf1b66d540713e837a00ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_inputSize</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>ab56d6a05e25bf25915d43f1cdecc38e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Shape</type>
      <name>m_outputShape</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>a6ac5cba0a943b97b03c8c7f9b37c3a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_parameters</name>
      <anchorfile>classshark_1_1_c_m_a_c_map.html</anchorfile>
      <anchor>a57c34792fcd21c26783d0542e260d47c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CMAIndividual</name>
    <filename>classshark_1_1_c_m_a_individual.html</filename>
    <templarg>class FitnessType</templarg>
    <base>Individual&lt; RealVector, FitnessType, CMAChromosome &gt;</base>
    <member kind="function">
      <type></type>
      <name>CMAIndividual</name>
      <anchorfile>classshark_1_1_c_m_a_individual.html</anchorfile>
      <anchor>ae272f1d52554bfda48aea84ee864eb07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CMAIndividual</name>
      <anchorfile>classshark_1_1_c_m_a_individual.html</anchorfile>
      <anchor>a3a9c17c12edc3b922081c35899821f6d</anchor>
      <arglist>(std::size_t searchSpaceDimension, double successThreshold=0.44, double initialStepSize=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAsParent</name>
      <anchorfile>classshark_1_1_c_m_a_individual.html</anchorfile>
      <anchor>a3f2aab9d92622e0e0e1104f2abcb06ee</anchor>
      <arglist>(CMAChromosome::IndividualSuccess offspringSuccess)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAsOffspring</name>
      <anchorfile>classshark_1_1_c_m_a_individual.html</anchorfile>
      <anchor>a287e59ca98935bfed544b810e844e2f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mutate</name>
      <anchorfile>classshark_1_1_c_m_a_individual.html</anchorfile>
      <anchor>a7cb81d9d266d24f1bfc336da863084f9</anchor>
      <arglist>(randomType &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>noSuccessfulOffspring</name>
      <anchorfile>classshark_1_1_c_m_a_individual.html</anchorfile>
      <anchor>a6275fa23d80bf170e86eaa6919db0715</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>noSuccessfulOffspring</name>
      <anchorfile>classshark_1_1_c_m_a_individual.html</anchorfile>
      <anchor>a3a9a9fb7a27a06c8ed030601d033432b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>parent</name>
      <anchorfile>classshark_1_1_c_m_a_individual.html</anchorfile>
      <anchor>a258b0b2142646e8dfae504fd50972a70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>parent</name>
      <anchorfile>classshark_1_1_c_m_a_individual.html</anchorfile>
      <anchor>af679e2b6bf0519ae145cf1cd196886c9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CMSA</name>
    <filename>classshark_1_1_c_m_s_a.html</filename>
    <base>AbstractSingleObjectiveOptimizer&lt; RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>CMSA</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>ac4578fae098a5b45e7f301a2693490d0</anchor>
      <arglist>(random::rng_type &amp;rng=random::globalRng)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>acbe8ad6fae3e5432f3e4ea206de89376</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>ae566583eb68bd89e3c728d117fea8c3a</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>ad1073e03895e4aa8983fe34fd084054d</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>a6041460c4df5667f5387827da848e066</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, SearchPointType const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>aa3d802c04d5ccd70c8375dca79417008</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, SearchPointType const &amp;initialSearchPoint, std::size_t lambda, std::size_t mu, double initialSigma, const boost::optional&lt; RealMatrix &gt; &amp;initialCovarianceMatrix=boost::optional&lt; RealMatrix &gt;())</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>ac89303e1940fd4744a1c542bc0eeb522</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialSigma</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>a95a5e9de7b67cdccc30a730dda48d3a5</anchor>
      <arglist>(double initSigma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMu</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>af843ef42c1524b922ea60a84362c937f</anchor>
      <arglist>(std::size_t mu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLambda</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>a813505a4954cb29b98eb670d5c7ba782</anchor>
      <arglist>(std::size_t lambda)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>mu</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>a642aff37e6c37deb3e437cae1fc866a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>lambda</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>acb8da1ec19b5869fcb6df0118d36ae9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>eigenValues</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>a2639d04da06486ed64bd2d25f6314f50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sigma</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>a4c32866b77047c9599b469f610925b72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Individual&lt; RealVector, double, LightChromosome &gt;</type>
      <name>IndividualType</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>a0bd0898a6c54f0c8fea60a019b48f9e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SHARK_EXPORT_SYMBOL std::vector&lt; IndividualType &gt;</type>
      <name>generateOffspring</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>a4a3fd20d9e65daf33018c06fede66540</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>updatePopulation</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>a3094288e1dfed8ff3ff47a70126724a8</anchor>
      <arglist>(std::vector&lt; IndividualType &gt; const &amp;offspring)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>doInit</name>
      <anchorfile>classshark_1_1_c_m_s_a.html</anchorfile>
      <anchor>a11fd52c599b6095432eefb1e599a14cc</anchor>
      <arglist>(std::vector&lt; SearchPointType &gt; const &amp;points, std::vector&lt; ResultType &gt; const &amp;functionValues, std::size_t lambda, std::size_t mu, double initialSigma)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CombinedObjectiveFunction</name>
    <filename>classshark_1_1_combined_objective_function.html</filename>
    <templarg>typename SearchPointType</templarg>
    <templarg>typename ResultT</templarg>
    <base>AbstractObjectiveFunction&lt; SearchPointType, ResultT &gt;</base>
    <member kind="typedef">
      <type>AbstractObjectiveFunction&lt; SearchPointType, ResultT &gt;</type>
      <name>super</name>
      <anchorfile>classshark_1_1_combined_objective_function.html</anchorfile>
      <anchor>a4d4eafb7d559cd021d3f00fcc99106dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractObjectiveFunction&lt; SearchPointType, ResultT &gt;</type>
      <name>element</name>
      <anchorfile>classshark_1_1_combined_objective_function.html</anchorfile>
      <anchor>abec8f99dbedfaae5cf3ae692462de5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CombinedObjectiveFunction</name>
      <anchorfile>classshark_1_1_combined_objective_function.html</anchorfile>
      <anchor>a435fd031ee3d4c3a21b68d843df24694</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_combined_objective_function.html</anchorfile>
      <anchor>adc7b716e211e631c987995b3da75a504</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classshark_1_1_combined_objective_function.html</anchorfile>
      <anchor>afadaacaa1f93c32f2345c422710685ee</anchor>
      <arglist>(element &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classshark_1_1_combined_objective_function.html</anchorfile>
      <anchor>a2e21cb1bcbdcdd072710bc30426de0a2</anchor>
      <arglist>(double weight, element &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classshark_1_1_combined_objective_function.html</anchorfile>
      <anchor>aa58f49e133bac3fa073958fdb238d2db</anchor>
      <arglist>(const typename super::SearchPointType &amp;input) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_combined_objective_function.html</anchorfile>
      <anchor>a84e806179b62ca8fa83a5408671f2dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_combined_objective_function.html</anchorfile>
      <anchor>a59adda766aa7c47c1cc2a106bdc4287d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>super::ResultType</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_combined_objective_function.html</anchorfile>
      <anchor>a00efd5173a498cb625ef9d8523a1d6eb</anchor>
      <arglist>(const typename super::SearchPointType &amp;input) const</arglist>
    </member>
    <member kind="function">
      <type>super::ResultType</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_combined_objective_function.html</anchorfile>
      <anchor>aa7c9a5f03c4c681f1885931391e1b983</anchor>
      <arglist>(const typename super::SearchPointType &amp;input, typename super::FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
    <member kind="function">
      <type>super::ResultType</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_combined_objective_function.html</anchorfile>
      <anchor>a58e685546d09fb3336ea42d20138197d</anchor>
      <arglist>(const typename super::SearchPointType &amp;input, typename super::SecondOrderDerivative &amp;derivative) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_weight</name>
      <anchorfile>classshark_1_1_combined_objective_function.html</anchorfile>
      <anchor>aefd0b345fe952b7c58db5ec85c84ebf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; element * &gt;</type>
      <name>m_elements</name>
      <anchorfile>classshark_1_1_combined_objective_function.html</anchorfile>
      <anchor>ab017e677f9b5818d588a94584de164c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ConcatenatedModel</name>
    <filename>classshark_1_1_concatenated_model.html</filename>
    <templarg>class VectorType</templarg>
    <base>AbstractModel&lt; VectorType, VectorType, VectorType &gt;</base>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>a40ecc555741fa16be502dea0b6558a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>a8ebf5d7a639b9bad3c97155457ab07b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ParameterVectorType</type>
      <name>ParameterVectorType</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>a070d86b2c6c81efcb1b4022e50feeb18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>aaaed213f7229e9069b8533e5448ba390</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>a0e8a68305ae5a156e2c56022a8f5d26f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>a148c74312f4b84d6b7c3d4614ab10cbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>a1131fcd2324b57789ff7239b7236294e</anchor>
      <arglist>(AbstractModel&lt; VectorType, VectorType, VectorType &gt; *layer, bool optimize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableModelOptimization</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>a8b8e20196b327ba37eaedab541a620ae</anchor>
      <arglist>(std::size_t index, bool opt)</arglist>
    </member>
    <member kind="function">
      <type>ParameterVectorType</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>a30498e619406375917645ae64be5610e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>aa92ab222aef4f76b3b5bfd36336fe9dc</anchor>
      <arglist>(ParameterVectorType const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>a1d1b7b19c2f909a24ff44ed3aa92496a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>ac474247bfc1639fe5aea49156a9b608d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BatchOutputType const &amp;</type>
      <name>hiddenResponses</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>abe9f2ff98caaab06fdd9920355549e68</anchor>
      <arglist>(State const &amp;state, std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>State const &amp;</type>
      <name>hiddenState</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>ab8afe252971bc0d46027d6bba8f861d7</anchor>
      <arglist>(State const &amp;state, std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>a4a48b011bd427db1132d92d3832529ff</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>a6ff8dcfccb5d9c3d10ef5c94b66ce9e9</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>a5a81b3d399d907f1dc6ea0ccc1e6af32</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, ParameterVectorType &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedInputDerivative</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>a881aa5af1b43ab5ffce47d2a44cc1b32</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, BatchOutputType &amp;derivatives) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>weightedDerivatives</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>a46b3208ecf225b142517c82c190a31b5</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, ParameterVectorType &amp;gradient, BatchInputType &amp;inputDerivative) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>a7106a8909f995781d3a426fd5ff85518</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_concatenated_model.html</anchorfile>
      <anchor>ae2e6d07d50968b7f8d29b194c220ab2a</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CrossEntropyMethod::ConstantNoise</name>
    <filename>classshark_1_1_cross_entropy_method_1_1_constant_noise.html</filename>
    <base>shark::CrossEntropyMethod::INoiseType</base>
    <member kind="function">
      <type></type>
      <name>ConstantNoise</name>
      <anchorfile>classshark_1_1_cross_entropy_method_1_1_constant_noise.html</anchorfile>
      <anchor>a0af64a18dea0a2cbeb8a281ad4e6ba64</anchor>
      <arglist>(double noise)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>noiseValue</name>
      <anchorfile>classshark_1_1_cross_entropy_method_1_1_constant_noise.html</anchorfile>
      <anchor>ada2ba5e9b24cfab36ee9cd6e25447f6e</anchor>
      <arglist>(int t) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_cross_entropy_method_1_1_constant_noise.html</anchorfile>
      <anchor>aa82322d10dcf82474c7bf8fdce4fcfd0</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::ConstProxyReference</name>
    <filename>structshark_1_1_const_proxy_reference.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::ConstrainedSphere</name>
    <filename>structshark_1_1benchmarks_1_1_constrained_sphere.html</filename>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>ConstrainedSphere</name>
      <anchorfile>structshark_1_1benchmarks_1_1_constrained_sphere.html</anchorfile>
      <anchor>a802dfd1afeeb99fca85c9786772540fc</anchor>
      <arglist>(std::size_t numberOfVariables=5, std::size_t m=1)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_constrained_sphere.html</anchorfile>
      <anchor>aea4689233e05b91376061312f5debaf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_constrained_sphere.html</anchorfile>
      <anchor>a4830b3abcf15959f0f449a8ee85bd82d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_constrained_sphere.html</anchorfile>
      <anchor>a226555db40171781d48bf256a4604f8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_constrained_sphere.html</anchorfile>
      <anchor>a93ee871a11bc1dfb487f2f98bb0c7cfe</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>structshark_1_1benchmarks_1_1_constrained_sphere.html</anchorfile>
      <anchor>a200e3ee72e9f1bb9071b29c1fa10bdad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>structshark_1_1benchmarks_1_1_constrained_sphere.html</anchorfile>
      <anchor>af9ea463927f9265da78256d099c6e2a2</anchor>
      <arglist>(SearchPointType const &amp;input) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_constrained_sphere.html</anchorfile>
      <anchor>a7192f76c0c697f67a672c35dcbc69c9f</anchor>
      <arglist>(const SearchPointType &amp;p) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ContrastiveDivergence</name>
    <filename>classshark_1_1_contrastive_divergence.html</filename>
    <templarg>class Operator</templarg>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="typedef">
      <type>Operator::RBM</type>
      <name>RBM</name>
      <anchorfile>classshark_1_1_contrastive_divergence.html</anchorfile>
      <anchor>a25fb98f539ea0bf360835711d7608402</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContrastiveDivergence</name>
      <anchorfile>classshark_1_1_contrastive_divergence.html</anchorfile>
      <anchor>a7b5c3fb150a0a986990ef1a5ce80c870</anchor>
      <arglist>(RBM *rbm)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_contrastive_divergence.html</anchorfile>
      <anchor>ae60eb82e6c409d2f2a0f9fb8310a81f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>classshark_1_1_contrastive_divergence.html</anchorfile>
      <anchor>a2471eeb8e6d309b0fa983fdbc5879d9b</anchor>
      <arglist>(UnlabeledData&lt; RealVector &gt; const &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setK</name>
      <anchorfile>classshark_1_1_contrastive_divergence.html</anchorfile>
      <anchor>ad2f9ab74c8ffca4d383827161fa2df90</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>classshark_1_1_contrastive_divergence.html</anchorfile>
      <anchor>ac24476a87828b2d74f9da679e8d06b57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_contrastive_divergence.html</anchorfile>
      <anchor>a30ad9c94feed0c0a74c38e6c3ac81031</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numBatches</name>
      <anchorfile>classshark_1_1_contrastive_divergence.html</anchorfile>
      <anchor>ab29e7de311d214da805621aa15e980c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>numBatches</name>
      <anchorfile>classshark_1_1_contrastive_divergence.html</anchorfile>
      <anchor>a5c0e83eb0df010209838be858670a266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRegularizer</name>
      <anchorfile>classshark_1_1_contrastive_divergence.html</anchorfile>
      <anchor>aee460b5ff7fc5f979bad66fd6d4c0cbc</anchor>
      <arglist>(double factor, SingleObjectiveFunction *regularizer)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_contrastive_divergence.html</anchorfile>
      <anchor>a62d35d6d633fd3688fcfa2fe8926ad0d</anchor>
      <arglist>(SearchPointType const &amp;parameter, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Conv2DModel</name>
    <filename>classshark_1_1_conv2_d_model.html</filename>
    <templarg>class VectorType</templarg>
    <templarg>class ActivationFunction</templarg>
    <base>shark::AbstractModel</base>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>a3d8e691008283fe9b6a68bd542c86fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>ae73b28ed0cf6fa128617f5ec57890362</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ParameterVectorType</type>
      <name>ParameterVectorType</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>a1a6bf16a226df283254eed73c480b280</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Conv2DModel</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>a6ca37037a3ff8605a970d45ecad0090b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Conv2DModel</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>adbedf083eca0fe5c44d1a2e6ee09cef2</anchor>
      <arglist>(Shape const &amp;imageShape, Shape const &amp;filterShape, Padding type=Padding::ZeroPad)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>a918f1703be09907f032fad65acabacba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>a9cfa029e47ed8ede811b331830a45061</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>ac9d63e4f9c8de8c29fe5995555581f4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ActivationFunction const &amp;</type>
      <name>activationFunction</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>af5b1b148205a549e9fd13fba87d5ad62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ActivationFunction &amp;</type>
      <name>activationFunction</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>a19617ce611c2b116d5402b33bd64ec59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParameterVectorType</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>a65a69c4c0b9fe12db3950e04d625be7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>a91a6fef53ab446352563474ea741e8b2</anchor>
      <arglist>(ParameterVectorType const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>a581e85d08aae72012f646c39eaf83661</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStructure</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>a7e816b41a71a79b5f9da6bf304837b21</anchor>
      <arglist>(Shape const &amp;imageShape, Shape const &amp;filterShape, Padding type=Padding::ZeroPad)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>aa837cb1b2e7f96cee6384c1464ad0bfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>a8465955f88c4eeb452342583b2dcb3d3</anchor>
      <arglist>(BatchInputType const &amp;inputs, BatchOutputType &amp;outputs, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>a7e08e22875a1316ee70df6fb857900c6</anchor>
      <arglist>(BatchInputType const &amp;inputs, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, ParameterVectorType &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedInputDerivative</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>a58ea7c864d76478c172a7e7799ad816d</anchor>
      <arglist>(BatchInputType const &amp;inputs, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, BatchInputType &amp;derivatives) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>ae6bb09a47a944952e12a735fc1be7d43</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_conv2_d_model.html</anchorfile>
      <anchor>a8feb74e6ec2f1ef0331b78553f142bcb</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CrossEntropy</name>
    <filename>classshark_1_1_cross_entropy.html</filename>
    <templarg>class LabelType</templarg>
    <templarg>class OutputType</templarg>
  </compound>
  <compound kind="class">
    <name>shark::CrossEntropy&lt; blas::vector&lt; T, Device &gt;, blas::vector&lt; T, Device &gt; &gt;</name>
    <filename>classshark_1_1_cross_entropy_3_01blas_1_1vector_3_01_t_00_01_device_01_4_00_01blas_1_1vector_3_01_t_00_01_device_01_4_01_4.html</filename>
    <templarg>class T</templarg>
    <templarg>class Device</templarg>
    <base>AbstractLoss&lt; blas::vector&lt; T, Device &gt;, blas::vector&lt; T, Device &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>CrossEntropy</name>
      <anchorfile>classshark_1_1_cross_entropy_3_01blas_1_1vector_3_01_t_00_01_device_01_4_00_01blas_1_1vector_3_01_t_00_01_device_01_4_01_4.html</anchorfile>
      <anchor>ab8d138b1cecc664543c1b00f07a2d492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_cross_entropy_3_01blas_1_1vector_3_01_t_00_01_device_01_4_00_01blas_1_1vector_3_01_t_00_01_device_01_4_01_4.html</anchorfile>
      <anchor>aafe39e8c9f73cb1120d6be4de61e3a5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_cross_entropy_3_01blas_1_1vector_3_01_t_00_01_device_01_4_00_01blas_1_1vector_3_01_t_00_01_device_01_4_01_4.html</anchorfile>
      <anchor>a52c65eda47c78815d1e147858134dbc8</anchor>
      <arglist>(BatchOutputType const &amp;target, BatchOutputType const &amp;prediction) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_cross_entropy_3_01blas_1_1vector_3_01_t_00_01_device_01_4_00_01blas_1_1vector_3_01_t_00_01_device_01_4_01_4.html</anchorfile>
      <anchor>a739430aadeb820d28ac52bd36b9b62a8</anchor>
      <arglist>(BatchOutputType const &amp;target, BatchOutputType const &amp;prediction, BatchOutputType &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>virtual double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_cross_entropy_3_01blas_1_1vector_3_01_t_00_01_device_01_4_00_01blas_1_1vector_3_01_t_00_01_device_01_4_01_4.html</anchorfile>
      <anchor>add4a2b4308ff290a10552824fdb33550</anchor>
      <arglist>(BatchLabelType const &amp;target, BatchOutputType const &amp;prediction) const=0</arglist>
    </member>
    <member kind="function">
      <type>virtual double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_cross_entropy_3_01blas_1_1vector_3_01_t_00_01_device_01_4_00_01blas_1_1vector_3_01_t_00_01_device_01_4_01_4.html</anchorfile>
      <anchor>a26f69483e0f62462bbc45e2734f65a4b</anchor>
      <arglist>(ConstLabelReference target, ConstOutputReference prediction) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_cross_entropy_3_01blas_1_1vector_3_01_t_00_01_device_01_4_00_01blas_1_1vector_3_01_t_00_01_device_01_4_01_4.html</anchorfile>
      <anchor>a0d53dd678d58b2cb3a213cdc829937da</anchor>
      <arglist>(Data&lt; LabelType &gt; const &amp;targets, Data&lt; OutputType &gt; const &amp;predictions) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CrossEntropy&lt; unsigned int, OutputType &gt;</name>
    <filename>classshark_1_1_cross_entropy_3_01unsigned_01int_00_01_output_type_01_4.html</filename>
    <templarg>class OutputType</templarg>
    <base>AbstractLoss&lt; unsigned int, OutputType &gt;</base>
    <member kind="function">
      <type></type>
      <name>CrossEntropy</name>
      <anchorfile>classshark_1_1_cross_entropy_3_01unsigned_01int_00_01_output_type_01_4.html</anchorfile>
      <anchor>ab3f85fac7c5cb438eeecd05d4e6a07db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_cross_entropy_3_01unsigned_01int_00_01_output_type_01_4.html</anchorfile>
      <anchor>aa508dd3b0e9621775385942be62d72fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_cross_entropy_3_01unsigned_01int_00_01_output_type_01_4.html</anchorfile>
      <anchor>a00c328589910ce17ecd13a57b59d6a4c</anchor>
      <arglist>(UIntVector const &amp;target, BatchOutputType const &amp;prediction) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_cross_entropy_3_01unsigned_01int_00_01_output_type_01_4.html</anchorfile>
      <anchor>a07fbea8cabdb5f573d4376e7bfda77e0</anchor>
      <arglist>(ConstLabelReference target, ConstOutputReference prediction) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_cross_entropy_3_01unsigned_01int_00_01_output_type_01_4.html</anchorfile>
      <anchor>a960711d6a29da49c4eb53aaffc398ef8</anchor>
      <arglist>(UIntVector const &amp;target, BatchOutputType const &amp;prediction, BatchOutputType &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_cross_entropy_3_01unsigned_01int_00_01_output_type_01_4.html</anchorfile>
      <anchor>a2377944f46db78d25811b70a9b8175ad</anchor>
      <arglist>(ConstLabelReference target, ConstOutputReference prediction, OutputType &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_cross_entropy_3_01unsigned_01int_00_01_output_type_01_4.html</anchorfile>
      <anchor>ac70b304cdf2fb8eee5f8d1aa3047b1cf</anchor>
      <arglist>(ConstLabelReference target, ConstOutputReference prediction, BatchOutputType &amp;gradient, MatrixType &amp;hessian) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CrossEntropyMethod</name>
    <filename>classshark_1_1_cross_entropy_method.html</filename>
    <base>AbstractSingleObjectiveOptimizer&lt; RealVector &gt;</base>
    <class kind="class">shark::CrossEntropyMethod::ConstantNoise</class>
    <class kind="class">shark::CrossEntropyMethod::INoiseType</class>
    <class kind="class">shark::CrossEntropyMethod::LinearNoise</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; INoiseType &gt;</type>
      <name>StrongNoisePtr</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>a5cd00f92f182f8045837763e93fc04c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL</type>
      <name>CrossEntropyMethod</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>a6cbaa9d9b87109f7616bead343cf3a93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>aa968320f9b938c9367eaab5cac3eeb6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>a51ac45a57be33ee94e76fc7024870628</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>a908b9eccea031c98b26a46357952abd7</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>a69e6fc00f991cbd03a5adf5e34b2d963</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, SearchPointType const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>af00780727abed9ac2563ce6cac472012</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, SearchPointType const &amp;initialSearchPoint, unsigned int populationSize, unsigned int selectionSize, RealVector initialSigma)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>a69f0ff106139edf53b967e7c8634471b</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function)</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>variance</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>a9c503c7cad4ee2922f3536f1e01e7973</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariance</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>a432462d9c570244fc90d6c366f495a4f</anchor>
      <arglist>(RealVector variance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariance</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>ae447f3ff67ff73b202425d58d9041b1e</anchor>
      <arglist>(double variance)</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>mean</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>afd392abee54cf3881c031afa6b375ff9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>selectionSize</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>a6644bf8a37821ba5bf71c442b99d61ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int &amp;</type>
      <name>selectionSize</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>aab7855636b4af30f52c0a7157a61c420</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>populationSize</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>aaa8990eaf10820245651f85d811f8b6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int &amp;</type>
      <name>populationSize</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>a554c37b09c488c12ad5df531d9e77cd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoiseType</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>a3727ea4cd3507b6637c7dde5343fc6ef</anchor>
      <arglist>(INoiseType *noiseType)</arglist>
    </member>
    <member kind="function">
      <type>const INoiseType &amp;</type>
      <name>getNoiseType</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>ae14731ef40261034c8d830e07ec2fbac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SHARK_EXPORT_SYMBOL unsigned</type>
      <name>suggestPopulationSize</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>adad84b965331a4c66edf77b64a03532d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SHARK_EXPORT_SYMBOL unsigned</type>
      <name>suggestSelectionSize</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>a9d185dcc48d6f045bb5bdb278c2d90ee</anchor>
      <arglist>(unsigned int populationSize)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Individual&lt; RealVector, double, RealVector &gt;</type>
      <name>IndividualType</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>acbabcff8f468967d08c6698674ba32c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>updateStrategyParameters</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>ace73082ea6c75482d9cb560ed983fbdd</anchor>
      <arglist>(std::vector&lt; IndividualType &gt; const &amp;parents)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_numberOfVariables</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>ad9ede2b41a61aed3bfb8795a4f63f005</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_selectionSize</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>aa6bc58b439c8e2895171216060551719</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_populationSize</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>a35d2e60b1fcd955b5e4fc630cbc1373a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_variance</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>a4fd98c5d17d4d963b3f478c2d3801183</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_mean</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>a4220ef22c8785fec58929087aca4f340</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>m_counter</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>a17dbfb74c2056350e1bc7b643c63d6b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StrongNoisePtr</type>
      <name>m_noise</name>
      <anchorfile>classshark_1_1_cross_entropy_method.html</anchorfile>
      <anchor>acefe67a3f3ba30e1fc0099336b536c74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CrossValidationError</name>
    <filename>classshark_1_1_cross_validation_error.html</filename>
    <templarg>class ModelTypeT</templarg>
    <templarg>class LabelTypeT</templarg>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="typedef">
      <type>ModelTypeT::InputType</type>
      <name>InputType</name>
      <anchorfile>classshark_1_1_cross_validation_error.html</anchorfile>
      <anchor>ac5a70c85054231cbf30bae549588444e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ModelTypeT::OutputType</type>
      <name>OutputType</name>
      <anchorfile>classshark_1_1_cross_validation_error.html</anchorfile>
      <anchor>a4c262d48f9b18f71d0fb20aed70a964d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabelTypeT</type>
      <name>LabelType</name>
      <anchorfile>classshark_1_1_cross_validation_error.html</anchorfile>
      <anchor>a225f8205a78912aa2136225bdbd3748d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabeledData&lt; InputType, LabelType &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_cross_validation_error.html</anchorfile>
      <anchor>a877119a7b94d00302711ebfbd19f347d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CVFolds&lt; DatasetType &gt;</type>
      <name>FoldsType</name>
      <anchorfile>classshark_1_1_cross_validation_error.html</anchorfile>
      <anchor>a98c90c12b97c150e9161f86a7b4fa29d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ModelTypeT</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_cross_validation_error.html</anchorfile>
      <anchor>a7c47bbe556f13d936e254971c06997d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractTrainer&lt; ModelType, LabelType &gt;</type>
      <name>TrainerType</name>
      <anchorfile>classshark_1_1_cross_validation_error.html</anchorfile>
      <anchor>a4a34b5f3470d34c22ebb804a25641712</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractCost&lt; LabelType, OutputType &gt;</type>
      <name>CostType</name>
      <anchorfile>classshark_1_1_cross_validation_error.html</anchorfile>
      <anchor>ab74427e33bd1a45dd51e84a3cf7c401e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrossValidationError</name>
      <anchorfile>classshark_1_1_cross_validation_error.html</anchorfile>
      <anchor>a8b8619981a0a2a7d041d367d28d212f3</anchor>
      <arglist>(FoldsType const &amp;dataFolds, IParameterizable&lt;&gt; *meta, ModelType *model, TrainerType *trainer, CostType *cost)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_cross_validation_error.html</anchorfile>
      <anchor>a0f1f477d928a0c26e7abab0ed758ed98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_cross_validation_error.html</anchorfile>
      <anchor>ae8cc06b22c49dbfe5034578e268bfdb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_cross_validation_error.html</anchorfile>
      <anchor>a8c37335d594fe383eeabcae364fa73a9</anchor>
      <arglist>(RealVector const &amp;parameters) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::CrowdingDistance</name>
    <filename>structshark_1_1_crowding_distance.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>leastContributor</name>
      <anchorfile>structshark_1_1_crowding_distance.html</anchorfile>
      <anchor>ab70a4a4d43580f6912b616d547352e1b</anchor>
      <arglist>(ParetofrontType const &amp;front, ParetoArchive const &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>leastContributors</name>
      <anchorfile>structshark_1_1_crowding_distance.html</anchorfile>
      <anchor>accb25d9b19ea166cc6ed1df68121ec63</anchor>
      <arglist>(ParetoFrontType const &amp;front, ParetoArchive const &amp;archive, std::size_t K) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structshark_1_1_crowding_distance.html</anchorfile>
      <anchor>a76fde6ed24f0c47db44ffc2e145cd2a8</anchor>
      <arglist>(std::size_t, std::size_t, random &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_crowding_distance.html</anchorfile>
      <anchor>a498f97698c24ee7411df3761c0c33436</anchor>
      <arglist>(Archive &amp;, const unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CSvmDerivative</name>
    <filename>classshark_1_1_c_svm_derivative.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class CacheType</templarg>
    <base>shark::ISerializable</base>
    <base>shark::INameable</base>
    <member kind="typedef">
      <type>CacheType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a7d5c6ca42465fd360c684d5ec3a0d133</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KernelClassifier&lt; InputType &gt;</type>
      <name>KeType</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a9ebe1e82ac4a8d09d74f8aa8db8be056</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a1a954968c2f086b9c7f16b4a68d69556</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CSvmTrainer&lt; InputType, QpFloatType &gt;</type>
      <name>TrainerType</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a854324eaf0093bae8996e5aa0edc3449</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CSvmDerivative</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a7ee628c62b706b9b7439840ae5a9546d</anchor>
      <arglist>(KeType *ke, TrainerType *trainer)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a65fc3c6c7de2ef556fdacaa9376e4acb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const KeType *</type>
      <name>ke</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>aaf377dbac6291d22025ca3c8e92d57d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TrainerType *</type>
      <name>trainer</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>ac11b2f7acd73f07958e8e1d2de9a73a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>modelCSvmParameterDerivative</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a2e46e908d670b88e6e5ab32f3482e7d8</anchor>
      <arglist>(const InputType &amp;input, RealVector &amp;derivative)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFreeSVs</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>ad9d1a0937c92a0c506baeeb36df5e2da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBoundedSVs</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a78db48a428319dd6d11d6c592ccd7935</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RealMatrix &amp;</type>
      <name>get_dalphab_dtheta</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>aad1d2282bcb2519f7ff7f31e1a1dc7c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a4a57799c4b3da25509930d480a0aed19</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>ab23ece6f8bff1fbfc3820b9c6031a874</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KernelExpansion&lt; InputType &gt; *</type>
      <name>mep_ke</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a01ce15f34ecda8ecc078af90d254946d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TrainerType *</type>
      <name>mep_tr</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>ae8a6a9c55b58567e079637463464069d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KernelType *</type>
      <name>mep_k</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a8e58aaf2f55f175568cf51728c5c86f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealMatrix &amp;</type>
      <name>m_alpha</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a389de13ed64569e21da0f57e42efc39d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Data&lt; InputType &gt; &amp;</type>
      <name>m_basis</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>aa37ffb53e952460a43a53f66d2483603</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const RealVector &amp;</type>
      <name>m_db_dParams_from_solver</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>ae64df699b30ae931165780b9e2301ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_C</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>aa6ebca73981c2e0c5998ad29305dfb71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_unconstrained</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a1ee6eca2ca7f7d17fcbd8cb0e9a6838f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_nkp</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>aa71919c545c490a4677bd05a78d6ad64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_nhp</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>ac2caaa99a014e8d38e60e17cfec5a9a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_noofFreeSVs</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>aad32ca8b5eaae5c0c00f46f05c1891d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_noofBoundedSVs</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a313f8373d924b205dd5d6c9720a29449</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>m_freeAlphaIndices</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a864c7537427ab957fa84672bda0162d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>m_boundedAlphaIndices</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a1e8289e061e797734a65706b7759a6c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_freeAlphas</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>afbd0b3dcbf7f6765a08e40bbbf9a145c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_boundedAlphas</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a4e241e0dd76c9c4542dbb11215ff27bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_boundedLabels</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>a9d4715c464f82da4b5be48d18111997e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealMatrix</type>
      <name>m_d_alphab_d_theta</name>
      <anchorfile>classshark_1_1_c_svm_derivative.html</anchorfile>
      <anchor>af618384c52d790cc609ade3a522b38d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CSVMProblem</name>
    <filename>classshark_1_1_c_s_v_m_problem.html</filename>
    <templarg>class MatrixT</templarg>
    <member kind="typedef">
      <type>MatrixT</type>
      <name>MatrixType</name>
      <anchorfile>classshark_1_1_c_s_v_m_problem.html</anchorfile>
      <anchor>ae00fca2fe283929b4eaf80ca74fc4eeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::QpFloatType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_c_s_v_m_problem.html</anchorfile>
      <anchor>a806254ac4b5c6f20caa4134a81b2457e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CSVMProblem</name>
      <anchorfile>classshark_1_1_c_s_v_m_problem.html</anchorfile>
      <anchor>a24063221b317718fb10aa445b2fc8d76</anchor>
      <arglist>(MatrixType &amp;quadratic, Data&lt; unsigned int &gt; const &amp;labels, double C)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CSVMProblem</name>
      <anchorfile>classshark_1_1_c_s_v_m_problem.html</anchorfile>
      <anchor>a601a22cd57543675bacf599f9cd1fc7c</anchor>
      <arglist>(MatrixType &amp;quadratic, Data&lt; unsigned int &gt; const &amp;labels, RealVector const &amp;regularizers)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CSVMProblem</name>
      <anchorfile>classshark_1_1_c_s_v_m_problem.html</anchorfile>
      <anchor>a2b7aab493bbff7b3308c718c1dcd2370</anchor>
      <arglist>(MatrixType &amp;quadratic, RealVector linear, Data&lt; unsigned int &gt; const &amp;labels, double C)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>dimensions</name>
      <anchorfile>classshark_1_1_c_s_v_m_problem.html</anchorfile>
      <anchor>ab8b41a5112634a8e39b6f31a71811f92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>boxMin</name>
      <anchorfile>classshark_1_1_c_s_v_m_problem.html</anchorfile>
      <anchor>ac5abe1188b5f7a69e12248ddf5cc960f</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>boxMax</name>
      <anchorfile>classshark_1_1_c_s_v_m_problem.html</anchorfile>
      <anchor>a4b1679d10868333bf4d4c8b4b4d37ed6</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipCoordinates</name>
      <anchorfile>classshark_1_1_c_s_v_m_problem.html</anchorfile>
      <anchor>af5ac4b6d0fb36dd16b52c733774bbbc0</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleBoxConstraints</name>
      <anchorfile>classshark_1_1_c_s_v_m_problem.html</anchorfile>
      <anchor>a5a44566d73a4d27244042719707a2779</anchor>
      <arglist>(double factor, double variableScalingFactor)</arglist>
    </member>
    <member kind="variable">
      <type>MatrixType &amp;</type>
      <name>quadratic</name>
      <anchorfile>classshark_1_1_c_s_v_m_problem.html</anchorfile>
      <anchor>a95ba9ddd48a101f849d216a95a4a34db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>linear</name>
      <anchorfile>classshark_1_1_c_s_v_m_problem.html</anchorfile>
      <anchor>a1939be3c160d60bdad3319d2ed82a7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>alpha</name>
      <anchorfile>classshark_1_1_c_s_v_m_problem.html</anchorfile>
      <anchor>a9b38b86e0ec6b023f7012940d4176c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>diagonal</name>
      <anchorfile>classshark_1_1_c_s_v_m_problem.html</anchorfile>
      <anchor>a83d760d8d7cb69a76756cf8b6a5db469</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>permutation</name>
      <anchorfile>classshark_1_1_c_s_v_m_problem.html</anchorfile>
      <anchor>acaa712b9668b0d27820b0fb274e76d10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CSvmTrainer</name>
    <filename>classshark_1_1_c_svm_trainer.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class CacheType</templarg>
    <base>AbstractSvmTrainer&lt; InputType, unsigned int, KernelClassifier&lt; InputType &gt;, AbstractWeightedTrainer&lt; KernelClassifier&lt; InputType &gt; &gt; &gt;</base>
    <member kind="typedef">
      <type>CacheType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_c_svm_trainer.html</anchorfile>
      <anchor>a992b58169d0ffd5be0d355b6432f32da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_c_svm_trainer.html</anchorfile>
      <anchor>abe46b77ba0322531583fe4fe08a5a0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CSvmTrainer</name>
      <anchorfile>classshark_1_1_c_svm_trainer.html</anchorfile>
      <anchor>ab9e81925c8a8a25db71614edcae230f0</anchor>
      <arglist>(KernelType *kernel, double C, bool offset, bool unconstrained=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CSvmTrainer</name>
      <anchorfile>classshark_1_1_c_svm_trainer.html</anchorfile>
      <anchor>a055a354238f55019457ffcdc7c5d8d76</anchor>
      <arglist>(KernelType *kernel, double negativeC, double positiveC, bool offset, bool unconstrained=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_c_svm_trainer.html</anchorfile>
      <anchor>a9dc25f037d2af2005d1fbfd52ceffb55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComputeBinaryDerivative</name>
      <anchorfile>classshark_1_1_c_svm_trainer.html</anchorfile>
      <anchor>a7fdb7e988fa0949ca5e96faf9c7bcf48</anchor>
      <arglist>(bool compute)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMcSvmType</name>
      <anchorfile>classshark_1_1_c_svm_trainer.html</anchorfile>
      <anchor>ac9d92bc56fc0a8fa0d73631cb3cbf323</anchor>
      <arglist>(McSvm type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_c_svm_trainer.html</anchorfile>
      <anchor>a9e801518bfba9d02e0749181a5deb0fc</anchor>
      <arglist>(KernelClassifier&lt; InputType &gt; &amp;svm, LabeledData&lt; InputType, unsigned int &gt; const &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_c_svm_trainer.html</anchorfile>
      <anchor>a5444acc9ade8ab1c3550bd2efafa4e59</anchor>
      <arglist>(KernelClassifier&lt; InputType &gt; &amp;svm, WeightedLabeledData&lt; InputType, unsigned int &gt; const &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>get_db_dParams</name>
      <anchorfile>classshark_1_1_c_svm_trainer.html</anchorfile>
      <anchor>aa41c04a121457ef9ace253feac0bf42d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CVFolds</name>
    <filename>classshark_1_1_c_v_folds.html</filename>
    <templarg>class DatasetTypeT</templarg>
    <member kind="typedef">
      <type>DatasetTypeT</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_c_v_folds.html</anchorfile>
      <anchor>a34e7cbd1c1ee70e1052194320e946574</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DatasetType::IndexSet</type>
      <name>IndexSet</name>
      <anchorfile>classshark_1_1_c_v_folds.html</anchorfile>
      <anchor>aefd7fec613275b78bcc1eedfc0694b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CVFolds</name>
      <anchorfile>classshark_1_1_c_v_folds.html</anchorfile>
      <anchor>ad1e48f9176458dbb2d1229219baafbed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CVFolds</name>
      <anchorfile>classshark_1_1_c_v_folds.html</anchorfile>
      <anchor>aca57fb2a330236dca37fa47240e89a22</anchor>
      <arglist>(DatasetType const &amp;set, std::vector&lt; IndexSet &gt; const &amp;validationIndizes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CVFolds</name>
      <anchorfile>classshark_1_1_c_v_folds.html</anchorfile>
      <anchor>a5c977743c718d50db3fdf76741ffbbdd</anchor>
      <arglist>(DatasetType const &amp;set, std::vector&lt; std::size_t &gt; const &amp;foldStart)</arglist>
    </member>
    <member kind="function">
      <type>DatasetType</type>
      <name>training</name>
      <anchorfile>classshark_1_1_c_v_folds.html</anchorfile>
      <anchor>a71a49586552161e0027348fa3a165310</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>DatasetType</type>
      <name>validation</name>
      <anchorfile>classshark_1_1_c_v_folds.html</anchorfile>
      <anchor>a02f53dc5f3585ac17b190bbbe9549b88</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>IndexSet const &amp;</type>
      <name>validationFoldIndices</name>
      <anchorfile>classshark_1_1_c_v_folds.html</anchorfile>
      <anchor>ab2345d3eba31a6b7d4d47cd8e0e6f6e7</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>IndexSet</type>
      <name>trainingFoldIndices</name>
      <anchorfile>classshark_1_1_c_v_folds.html</anchorfile>
      <anchor>a04f39c269ed88cf04953269a022f925a</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_c_v_folds.html</anchorfile>
      <anchor>a55e4d73aff1389cb61fc9e41fc1e92ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DatasetType const &amp;</type>
      <name>dataset</name>
      <anchorfile>classshark_1_1_c_v_folds.html</anchorfile>
      <anchor>ad0bbe71a5ab3021ec9b6e43d7b6555fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DatasetType &amp;</type>
      <name>dataset</name>
      <anchorfile>classshark_1_1_c_v_folds.html</anchorfile>
      <anchor>a523c99e2d2843046e679990653983839</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Data</name>
    <filename>classshark_1_1_data.html</filename>
    <templarg>class Type</templarg>
    <base>shark::ISerializable</base>
    <member kind="typedef">
      <type>batch_type &amp;</type>
      <name>batch_reference</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga79217da1dd034aa18bc553f483e9449c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>batch_type const  &amp;</type>
      <name>const_batch_reference</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gab8037000e57c8d73273e1323ec2efe72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; element_type &gt;::reference</type>
      <name>element_reference</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga976b21a33c3947dde673463e2aa19597</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; element_type &gt;::const_reference</type>
      <name>const_element_reference</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga9c2ebc84cb3ca390c09b6d4e32d5e7f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>IndexSet</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga3765fd3c920db97545a11dca09b75224</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; detail::DataElementIterator&lt; Data&lt; Type &gt; &gt; &gt;</type>
      <name>element_range</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga19638bd1cc1a7c7c5698a476b36b9753</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; detail::DataElementIterator&lt; Data&lt; Type &gt; const  &gt; &gt;</type>
      <name>const_element_range</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gacf6e101b20eb431616afae009484307d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::BatchRange&lt; Data&lt; Type &gt; &gt;</type>
      <name>batch_range</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga13c4a238cadf7bca226dee7688241a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::BatchRange&lt; Data&lt; Type &gt; const  &gt;</type>
      <name>const_batch_range</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga4fd89aed7a568dc704a56c1f1e6271df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_CONSTANT</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga425774be1ecd7d42c890d68fe58c3aa1</anchor>
      <arglist>(std::size_t, DefaultBatchSize=256)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaddb33ca1abda79975c6b458b1cecf25e</anchor>
      <arglist>(const Data&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga9c01641bb46faca7c6ee8fca1069cec9</anchor>
      <arglist>(const Data&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const_element_range</type>
      <name>elements</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gad9b0233e3adc882ed94f418f80767b09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>element_range</type>
      <name>elements</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga4d53c5d59826b9e611a19f31fcc0029d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_batch_range</type>
      <name>batches</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga4edf9849713708253a4d1f2d31e6187b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>batch_range</type>
      <name>batches</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga5cc5be820f0ff26a290778c23892cf47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfBatches</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gabd82edf467b9b82f4b0a1e70fd695311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfElements</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga814e8b0028cc90dd2af69805e8f8a04d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape const &amp;</type>
      <name>shape</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gabdfa24d4e424c86cf39851c143b2dd37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>shape</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga241d5b9008bba26301ddcd314d3df06b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga372d43fb769e6ccffdb699e5e2abe5b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>element_reference</type>
      <name>element</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga0ea72a74a21d5ff59772516b83c4a58b</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_element_reference</type>
      <name>element</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac093b3c74d84f89898ea5c8aeb6a81a8</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>batch_reference</type>
      <name>batch</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga73034ee5639176b0d45e1059859d0f0a</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_batch_reference</type>
      <name>batch</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga7222ee2998a5032cd2b07c86032e7663</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Data</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaecdfa51025bbadcfb6db99f292df82ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Data</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga08ec5cfa49cf4ac1a5ce0ca021eb0e29</anchor>
      <arglist>(std::size_t numBatches)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Data</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaddfe0e46341e78aa2c2c894b54ddc806</anchor>
      <arglist>(std::size_t size, element_type const &amp;element, std::size_t batchSize=DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gade09075aa5a3e014a4204d5589f0012c</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga85030a0dabab1040989d82ae78dd98be</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>makeIndependent</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga35fb8d4c0cbc2a8bef9ebd974e0cf0fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splitBatch</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaf9900fbc117dd6259136a3dd2056c11e</anchor>
      <arglist>(std::size_t batch, std::size_t elementIndex)</arglist>
    </member>
    <member kind="function">
      <type>Data</type>
      <name>splice</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaabc1f57dc805faf96d59ab1ff6d4a171</anchor>
      <arglist>(std::size_t batch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga55cb071b82f9cfd984a855eddb9bf51e</anchor>
      <arglist>(Data const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gadbf9ee4b9fcc8d6ae46467b3fd7721ad</anchor>
      <arglist>(const_batch_reference batch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repartition</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga43280de21c8ba42f381a555cd8f367fe</anchor>
      <arglist>(Range const &amp;batchSizes)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>getPartitioning</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga2ee51d83d9a5db03a3a9a1b0607ae696</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reorderElements</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga42c8e836dbb5860d4044d8b19732f794</anchor>
      <arglist>(Range const &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>indexedSubset</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaa2d2689f5da9dbd4eac362d3c03ebcaf</anchor>
      <arglist>(IndexSet const &amp;indices, Data &amp;subset, Data &amp;complement) const</arglist>
    </member>
    <member kind="function">
      <type>Data</type>
      <name>indexedSubset</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga6bc854de0b085583688f1d089fa608b6</anchor>
      <arglist>(IndexSet const &amp;indices) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>detail::SharedContainer&lt; Type &gt;</type>
      <name>Container</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga9ef593d49b903835ca9f5f717a701154</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Container</type>
      <name>m_data</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga2296f2d35aff4d00d07a5d6c99015197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Shape</type>
      <name>m_shape</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga232e64c2421cd25794c915c399a7cfd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaa882479ecf9824c056c73aa0a444b879</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga54bdb86caca27a90ce28a8043fe4bced</anchor>
      <arglist>(Data &amp;a, Data &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::DataDistribution</name>
    <filename>classshark_1_1_data_distribution.html</filename>
    <templarg>class InputType</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataDistribution</name>
      <anchorfile>classshark_1_1_data_distribution.html</anchorfile>
      <anchor>aa3f074650834a6551e8891eabedb396d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>classshark_1_1_data_distribution.html</anchorfile>
      <anchor>a3358c43ba05299220ff8df6d5ea7bc75</anchor>
      <arglist>(InputType &amp;input) const =0</arglist>
    </member>
    <member kind="function">
      <type>InputType</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_data_distribution.html</anchorfile>
      <anchor>a81288ff28bf77b08bfa7ae6e7dbb1c5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData&lt; InputType &gt;</type>
      <name>generateDataset</name>
      <anchorfile>classshark_1_1_data_distribution.html</anchorfile>
      <anchor>a457baebeeff07baba0785aec80e7d188</anchor>
      <arglist>(std::size_t size, std::size_t maximumBatchSize) const</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData&lt; InputType &gt;</type>
      <name>generateDataset</name>
      <anchorfile>classshark_1_1_data_distribution.html</anchorfile>
      <anchor>aaaf36928f34de97b789be2dbd26947f9</anchor>
      <arglist>(std::size_t size) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::DataView</name>
    <filename>classshark_1_1_data_view.html</filename>
    <templarg>class DatasetType</templarg>
    <member kind="typedef">
      <type>dataset_type::const_element_reference</type>
      <name>const_reference</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>af6445b99d55d8f0db60da959d9c68edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::mpl::if_&lt; std::is_const&lt; DatasetType &gt;, typenamedataset_type::const_element_reference, typenamedataset_type::element_reference &gt;::type</type>
      <name>reference</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>ae4aed6ddb082c41f4db8025b202ed236</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorBase&lt; reference, DataView&lt; DatasetType &gt; &gt;</type>
      <name>iterator</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>ab998c6011a12ee2a3fd7d9215564a582</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorBase&lt; const_reference, DataView&lt; DatasetType &gt; const &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>a8040495749c12a5d12fafe92bef9769d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataView</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>ab9a6a0d93261ae6e467ff03dc1ebdc69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataView</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>ae1cb988a3c7a5d0d4bf13eec0af75e90</anchor>
      <arglist>(DatasetType &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataView</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>a436f5cd8b4ebf4e709edd2932922f801</anchor>
      <arglist>(DataView&lt; DatasetType &gt; const &amp;view, IndexRange const &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>a096d8cc31117ca710fe41f79c46a9faf</anchor>
      <arglist>(std::size_t position)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>a4b1faee54e297b25d77ef24375d22fe2</anchor>
      <arglist>(std::size_t position) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>front</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>a7652743856e2ef532984d54ae1eb6104</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>front</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>ac3076578a2ecd9caf720e970976bec8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>back</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>af00a7bc78ffc60fcacedbe291b4d24e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>back</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>aceed1b5fafb9bf86149152708aedb979</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>a8eb1ce492f50ab67e4c222f1315f83cc</anchor>
      <arglist>(std::size_t position) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>batch</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>a4c811224fc77356555fcecfb5b41cb65</anchor>
      <arglist>(std::size_t position) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>positionInBatch</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>a892be77ecf008f78e44452b1a201980a</anchor>
      <arglist>(std::size_t position) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>a71ba14d4f067dc437d6683dac9982f77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>a3e7c59021eff4745396ed9951c2f05ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>a02edf0f65deefa88fbcaef18276b5041</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>a238dbacc7eded17835f90c6edccdcb95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>a232c001d3d8c239031040dbbb3eb7437</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>dataset_type const &amp;</type>
      <name>dataset</name>
      <anchorfile>classshark_1_1_data_view.html</anchorfile>
      <anchor>a20c3d8aa10aa6056277df2f02261033b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::DiagonalWithCircle</name>
    <filename>classshark_1_1_diagonal_with_circle.html</filename>
    <base>LabeledDataDistribution&lt; RealVector, unsigned int &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiagonalWithCircle</name>
      <anchorfile>classshark_1_1_diagonal_with_circle.html</anchorfile>
      <anchor>a5807a14d10927aed3be29c74601a842b</anchor>
      <arglist>(double radius=1.0, double noise=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classshark_1_1_diagonal_with_circle.html</anchorfile>
      <anchor>aead34d360cb03448e0ee6c8a400e0dd0</anchor>
      <arglist>(RealVector &amp;input, unsigned int &amp;label) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_radius2</name>
      <anchorfile>classshark_1_1_diagonal_with_circle.html</anchorfile>
      <anchor>a806414331502bbbb38a87b0dafe74ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_noiselevel</name>
      <anchorfile>classshark_1_1_diagonal_with_circle.html</anchorfile>
      <anchor>a488467e2c361c652080f898c5cad28c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::DifferenceKernelMatrix</name>
    <filename>classshark_1_1_difference_kernel_matrix.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class CacheType</templarg>
    <member kind="typedef">
      <type>CacheType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_difference_kernel_matrix.html</anchorfile>
      <anchor>a04b3f85bd7ce3218c2946fc6a9cc47d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DifferenceKernelMatrix</name>
      <anchorfile>classshark_1_1_difference_kernel_matrix.html</anchorfile>
      <anchor>a75322ec30dee27e1a7343e71853bd4d6</anchor>
      <arglist>(AbstractKernelFunction&lt; InputType &gt; const &amp;kernel, Data&lt; InputType &gt; const &amp;dataset, std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt; &gt; const &amp;pairs)</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_difference_kernel_matrix.html</anchorfile>
      <anchor>ac0d680c150fb59ca448ae407304f3ec6</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>entry</name>
      <anchorfile>classshark_1_1_difference_kernel_matrix.html</anchorfile>
      <anchor>ab999126ee7b40e3c33a05a38d685d81a</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>classshark_1_1_difference_kernel_matrix.html</anchorfile>
      <anchor>aac4a479d840e95943b5bcd1a79f4d24b</anchor>
      <arglist>(std::size_t i, std::size_t start, std::size_t end, QpFloatType *storage) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matrix</name>
      <anchorfile>classshark_1_1_difference_kernel_matrix.html</anchorfile>
      <anchor>adefbf742ea14714a2c1db0e59fbc418c</anchor>
      <arglist>(blas::matrix_expression&lt; M, blas::cpu_tag &gt; &amp;storage) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipColumnsAndRows</name>
      <anchorfile>classshark_1_1_difference_kernel_matrix.html</anchorfile>
      <anchor>a87178ad78ad395a321a976b3e52bd20d</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_difference_kernel_matrix.html</anchorfile>
      <anchor>a3365839ee242950f1f2e755c5634f027</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AbstractKernelFunction&lt; InputType &gt; const  &amp;</type>
      <name>m_kernel</name>
      <anchorfile>classshark_1_1_difference_kernel_matrix.html</anchorfile>
      <anchor>a5bb9c8d113193b154331c1a8fd41a1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Data&lt; InputType &gt; const  &amp;</type>
      <name>m_dataset</name>
      <anchorfile>classshark_1_1_difference_kernel_matrix.html</anchorfile>
      <anchor>a43a940b138c388c62acd5e705f676646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::tuple&lt; std::size_t, std::size_t, std::size_t, std::size_t &gt; &gt;</type>
      <name>m_indices</name>
      <anchorfile>classshark_1_1_difference_kernel_matrix.html</anchorfile>
      <anchor>ade6fb118ba57858b7985f83823c2448a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::DiffPowers</name>
    <filename>structshark_1_1benchmarks_1_1_diff_powers.html</filename>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiffPowers</name>
      <anchorfile>structshark_1_1benchmarks_1_1_diff_powers.html</anchorfile>
      <anchor>aac2a19482a4d7520779da36467e8e019</anchor>
      <arglist>(std::size_t numberOfVariables=5)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_diff_powers.html</anchorfile>
      <anchor>a4e34e79c0df357c622eea5d7829febb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_diff_powers.html</anchorfile>
      <anchor>a50fc66d2dba422c62486bd109b38ee13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_diff_powers.html</anchorfile>
      <anchor>a33a7e5251354c4abc01a779a4a3c668a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_diff_powers.html</anchorfile>
      <anchor>a6ac9ff35e6859bd8691c1201dbd199bb</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>structshark_1_1benchmarks_1_1_diff_powers.html</anchorfile>
      <anchor>a02f3f01a3022c8c7ad0c3008f8080f89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_diff_powers.html</anchorfile>
      <anchor>a8d065114748562d767411e4e3ed8b6a6</anchor>
      <arglist>(const SearchPointType &amp;p) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::DiscreteKernel</name>
    <filename>classshark_1_1_discrete_kernel.html</filename>
    <base>AbstractKernelFunction&lt; std::size_t &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteKernel</name>
      <anchorfile>classshark_1_1_discrete_kernel.html</anchorfile>
      <anchor>aa25ea901c8d3311c3187f9ac5a4824be</anchor>
      <arglist>(RealMatrix const &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_discrete_kernel.html</anchorfile>
      <anchor>a99d8f36931a15fe479753d000266e76f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_discrete_kernel.html</anchorfile>
      <anchor>a7f7a56ec81071ac947ce02df48b0778c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_discrete_kernel.html</anchorfile>
      <anchor>ad09132b3f0b52534db0591c4089980cc</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_discrete_kernel.html</anchorfile>
      <anchor>abb4b5e4d936016260165c55742788fa9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_discrete_kernel.html</anchorfile>
      <anchor>ab36fd3d4ccf16666cb6fe37f4b5e5246</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_discrete_kernel.html</anchorfile>
      <anchor>ac4ad2a25a3846fc24daa142790d15e67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_discrete_kernel.html</anchorfile>
      <anchor>a1b672aa49b9991f3bfda3d9d1d8b0619</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_discrete_kernel.html</anchorfile>
      <anchor>a90793c8b9e5ff4988d58173d43970872</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_discrete_kernel.html</anchorfile>
      <anchor>aa3df2e3e9828ad02b782546af55ffa49</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_discrete_kernel.html</anchorfile>
      <anchor>af1eb1494ee1d205dab4f4b276f332de6</anchor>
      <arglist>(InArchive &amp;ar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_discrete_kernel.html</anchorfile>
      <anchor>aa6ceb9cefe199070f62832348f9c4421</anchor>
      <arglist>(OutArchive &amp;ar) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealMatrix</type>
      <name>m_matrix</name>
      <anchorfile>classshark_1_1_discrete_kernel.html</anchorfile>
      <anchor>a587d3fa95d39fcb80e942e3d201755ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::DiscreteLoss</name>
    <filename>classshark_1_1_discrete_loss.html</filename>
    <base>AbstractLoss&lt; unsigned int, unsigned int &gt;</base>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL</type>
      <name>DiscreteLoss</name>
      <anchorfile>classshark_1_1_discrete_loss.html</anchorfile>
      <anchor>aa0d1901ba0db57d4f369277f09adbe5f</anchor>
      <arglist>(RealMatrix const &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_discrete_loss.html</anchorfile>
      <anchor>a925e823ebc196857a6057c1b987232ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_discrete_loss.html</anchorfile>
      <anchor>a4852a414feeed09857677ba5e101429a</anchor>
      <arglist>(BatchLabelType const &amp;target, BatchOutputType const &amp;prediction) const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>defineCostMatrix</name>
      <anchorfile>classshark_1_1_discrete_loss.html</anchorfile>
      <anchor>a08efa3b62b061fd8df5091d91bdabd2a</anchor>
      <arglist>(RealMatrix const &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>defineBalancedCost</name>
      <anchorfile>classshark_1_1_discrete_loss.html</anchorfile>
      <anchor>a2200c7758219e1fe8867ce5044b5528b</anchor>
      <arglist>(UnlabeledData&lt; unsigned int &gt; const &amp;labels)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealMatrix</type>
      <name>m_cost</name>
      <anchorfile>classshark_1_1_discrete_loss.html</anchorfile>
      <anchor>aaba02f422ee227ce0fbb2a39150d4253</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::tags::DiscreteSpace</name>
    <filename>structshark_1_1tags_1_1_discrete_space.html</filename>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::Discus</name>
    <filename>structshark_1_1benchmarks_1_1_discus.html</filename>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>Discus</name>
      <anchorfile>structshark_1_1benchmarks_1_1_discus.html</anchorfile>
      <anchor>a8c23292b073ea3df9192c9fa707d6ade</anchor>
      <arglist>(std::size_t numberOfVariables=5, double alpha=1.E-3)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_discus.html</anchorfile>
      <anchor>aa631f8a84a54bad0f00f447afbad374d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_discus.html</anchorfile>
      <anchor>a8bd7a64d12a573e72d154c33386b09d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_discus.html</anchorfile>
      <anchor>a826a05bc82d682d23db96146c8a16a2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_discus.html</anchorfile>
      <anchor>a723a8b1736bc79e5f5ee3a9f6dd21efd</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>structshark_1_1benchmarks_1_1_discus.html</anchorfile>
      <anchor>af9860568c22beffca9fc5f2bcea8d88d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_discus.html</anchorfile>
      <anchor>a162bfacc710ced8f072e38e62251f449</anchor>
      <arglist>(SearchPointType const &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>structshark_1_1benchmarks_1_1_discus.html</anchorfile>
      <anchor>a4f5200c7e8dae24f46b73337564992cc</anchor>
      <arglist>(SearchPointType const &amp;p, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>structshark_1_1benchmarks_1_1_discus.html</anchorfile>
      <anchor>ae02ec221dc77f717f65f99e6f2fe2aa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>structshark_1_1benchmarks_1_1_discus.html</anchorfile>
      <anchor>a96f408e05a44d05272d8534d43bbe6e4</anchor>
      <arglist>(double alpha)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::DistantModes</name>
    <filename>classshark_1_1_distant_modes.html</filename>
    <member kind="function">
      <type></type>
      <name>DistantModes</name>
      <anchorfile>classshark_1_1_distant_modes.html</anchorfile>
      <anchor>a4ff22c375621b08c4128254d0cefab02</anchor>
      <arglist>(double p=0, unsigned dim=16, unsigned modes=4, unsigned copies=2500, size_t batchSize=0)</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData&lt; RealVector &gt;</type>
      <name>data</name>
      <anchorfile>classshark_1_1_distant_modes.html</anchorfile>
      <anchor>a7557f48d41fe2476fddf7d74e769508b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>inputDimension</name>
      <anchorfile>classshark_1_1_distant_modes.html</anchorfile>
      <anchor>a0516b0c3ac1377214d2bebabe0b0f936</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::DoublePole</name>
    <filename>classshark_1_1_double_pole.html</filename>
    <member kind="function">
      <type>unsigned</type>
      <name>noVars</name>
      <anchorfile>classshark_1_1_double_pole.html</anchorfile>
      <anchor>a623d1c62e55c3df3a1c7219cefac3940</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoublePole</name>
      <anchorfile>classshark_1_1_double_pole.html</anchorfile>
      <anchor>a7ab1e7c4c87e91b6a435473488b24b94</anchor>
      <arglist>(bool markovian, bool normalize=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getState</name>
      <anchorfile>classshark_1_1_double_pole.html</anchorfile>
      <anchor>a70cf32c8d658c4b6d55fc229c2e9226e</anchor>
      <arglist>(RealVector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_double_pole.html</anchorfile>
      <anchor>a3b14136fc5153dcd09160d81a432fa81</anchor>
      <arglist>(double state2init=0.07)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initDegree</name>
      <anchorfile>classshark_1_1_double_pole.html</anchorfile>
      <anchor>a89b7eaa944fae019602a677a834eaba8</anchor>
      <arglist>(double state2init)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_double_pole.html</anchorfile>
      <anchor>a0ab0da8d67c1bdd2987615a1fb25a3f6</anchor>
      <arglist>(double a, double b, double c, double d, double e=0., double f=0.)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>failure</name>
      <anchorfile>classshark_1_1_double_pole.html</anchorfile>
      <anchor>ac24a26634511052a94f55986507ed70a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getJiggle</name>
      <anchorfile>classshark_1_1_double_pole.html</anchorfile>
      <anchor>a47aae9cea93635b74c06f27427258a1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classshark_1_1_double_pole.html</anchorfile>
      <anchor>a95065838bc7f6ceb3fa85ae568bc9def</anchor>
      <arglist>(double output)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::DropoutLayer</name>
    <filename>classshark_1_1_dropout_layer.html</filename>
    <templarg>class VectorType</templarg>
    <base>shark::AbstractModel</base>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>a8f6384ab6da747494308094f61dcb518</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>a7a1a78269526acd2e0a42b1959bd3e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ParameterVectorType</type>
      <name>ParameterVectorType</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>a5afad3ac1ca85c8745900ccf74638acb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DropoutLayer</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>a194c5518dfef32ed4391ee8838176219</anchor>
      <arglist>(Shape const &amp;inputShape, double probability=0.5, random::rng_type &amp;rng=random::globalRng)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>ab8e9310d7d4b68498cab365cb7fd2467</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ParameterVectorType</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>adeea5374f92a670be86d50c3eb054afd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>ade190bb0b883e952ea8d5a04a4699567</anchor>
      <arglist>(ParameterVectorType const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>a93d3cabf7b99d34255bf5820d169994c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>a1b3f8027154aba85b6d60192ccff825b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>a5707772833530fd29f7f81734e59af47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>a91e4f300eb52f22ca8a39c8c6b26f039</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>a2db6e780acbcf5242934c05edc46d2ad</anchor>
      <arglist>(BatchInputType const &amp;inputs, BatchOutputType &amp;outputs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>a048b1e1c1ec0609ce1791f6c5401db5d</anchor>
      <arglist>(VectorType const &amp;input, VectorType &amp;output) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>af5f9f6f4a84a406ea1153de2e634531c</anchor>
      <arglist>(BatchInputType const &amp;inputs, BatchOutputType &amp;outputs, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>a463d90503846768a7bd111881f178f6c</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, ParameterVectorType &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedInputDerivative</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>a3c09852df31dd53eca754ded34fe5531</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, BatchInputType &amp;derivative) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>a437851bcf235d76b8b9a5420f642bdea</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_dropout_layer.html</anchorfile>
      <anchor>af43aa5910f185e67e2dc2d4bb7c94406</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::DTLZ1</name>
    <filename>structshark_1_1benchmarks_1_1_d_t_l_z1.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>DTLZ1</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z1.html</anchorfile>
      <anchor>a4c5d6ea2eeda88eab3ed16522168afb2</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z1.html</anchorfile>
      <anchor>a932a5e38fa99c24b03d1cd8559e15508</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z1.html</anchorfile>
      <anchor>a1377fe88d42f98ac7b6f1609f9a8d759</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z1.html</anchorfile>
      <anchor>a39b8fad71f91126766c78a78fd5d2f95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z1.html</anchorfile>
      <anchor>aa36f08cb83c8438b3d68c1b22c858f49</anchor>
      <arglist>(std::size_t numberOfObjectives)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z1.html</anchorfile>
      <anchor>a5ac72fec315b230134c4e93b43c1660b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z1.html</anchorfile>
      <anchor>a63b0e1f75b5068ce8130022af5efb721</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z1.html</anchorfile>
      <anchor>a9b705752392171e88c5fc30d72e0fe0b</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z1.html</anchorfile>
      <anchor>a13f21cea920296bc36398c0233d8cb10</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::DTLZ2</name>
    <filename>structshark_1_1benchmarks_1_1_d_t_l_z2.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>DTLZ2</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z2.html</anchorfile>
      <anchor>a106e2305bbb62c1d2059bacbcd5d7434</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z2.html</anchorfile>
      <anchor>aaf608ae5c81fadcda860defa4b322cfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z2.html</anchorfile>
      <anchor>a6a7cbabf0eeabdb810607b8e041c4d1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z2.html</anchorfile>
      <anchor>a865ee1a32d5864bb24df3d8057d80663</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z2.html</anchorfile>
      <anchor>a17742774250c5dcbd168b7238dc86cba</anchor>
      <arglist>(std::size_t numberOfObjectives)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z2.html</anchorfile>
      <anchor>a0a7350eb1f44ebccb87066dd4570aec4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z2.html</anchorfile>
      <anchor>a21386d1a3449437fcd241a6ec8845b63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z2.html</anchorfile>
      <anchor>ab3a98b7bf9aed8be1dc0e20b5d0ed9c2</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z2.html</anchorfile>
      <anchor>adfccd6983e3d97aa6dff155a39d3b96e</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::DTLZ3</name>
    <filename>structshark_1_1benchmarks_1_1_d_t_l_z3.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>DTLZ3</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z3.html</anchorfile>
      <anchor>a2df433052b57c6be54a8c8912f268365</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z3.html</anchorfile>
      <anchor>a69b1ca1be786a9591536899df8fbd5ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z3.html</anchorfile>
      <anchor>a49d7e211caabe976836bf7cb66994ce6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z3.html</anchorfile>
      <anchor>a748940802cc119d2c7ae6b0e2f254f26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z3.html</anchorfile>
      <anchor>ac172f9a4d5c1f23ffb35bdb2ef5c40f3</anchor>
      <arglist>(std::size_t numberOfObjectives)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z3.html</anchorfile>
      <anchor>adeb7a516bbe371d44132a04093190cca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z3.html</anchorfile>
      <anchor>ad4402ad48ca3279fc408819cfe1b7646</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z3.html</anchorfile>
      <anchor>a6c5ba342ef6b84b7262ff89d02872e47</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z3.html</anchorfile>
      <anchor>a3ea75f4b76209277713ce8c7541fc782</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::DTLZ4</name>
    <filename>structshark_1_1benchmarks_1_1_d_t_l_z4.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>DTLZ4</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z4.html</anchorfile>
      <anchor>a12db9434fe782e642694eb1d9bbfd33b</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z4.html</anchorfile>
      <anchor>a9e0ac78d3a87fae03d75ef63f02f27fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z4.html</anchorfile>
      <anchor>ad8a961a37f2f49b56e9167226da36317</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z4.html</anchorfile>
      <anchor>ad78ab5bf1d352e0a87063649dfe9072f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z4.html</anchorfile>
      <anchor>a3f6f58aa4c31e83754455222272036ee</anchor>
      <arglist>(std::size_t numberOfObjectives)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z4.html</anchorfile>
      <anchor>a882ed27af77335bcd94c2fb4b53eaca5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z4.html</anchorfile>
      <anchor>ac6d6021498420815e568e8b86648c3c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z4.html</anchorfile>
      <anchor>ad8068db643545c44e3ee8e4452f47927</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z4.html</anchorfile>
      <anchor>a577e9511af80602a98f3ae9b93b3f0ce</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::DTLZ5</name>
    <filename>structshark_1_1benchmarks_1_1_d_t_l_z5.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>DTLZ5</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z5.html</anchorfile>
      <anchor>ace28d0c32fff44e6458ff535951ea6b0</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z5.html</anchorfile>
      <anchor>ad58f1fef7880c639e12317f317a94775</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z5.html</anchorfile>
      <anchor>a484ae196080674aad21bd3fe10e54d52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z5.html</anchorfile>
      <anchor>a8a6c1cd0eaacd93476eab636f9da686a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z5.html</anchorfile>
      <anchor>a2f2bbf9806ae598b1f0fd98599de72c0</anchor>
      <arglist>(std::size_t numberOfObjectives)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z5.html</anchorfile>
      <anchor>a3818729cb70ef38dd1b116466209d22f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z5.html</anchorfile>
      <anchor>a1586da1d29e86c1619394503f37d421a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z5.html</anchorfile>
      <anchor>a87a84eb1074c42742262798c3bebcdbe</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z5.html</anchorfile>
      <anchor>a175b0de1fbf7761468281a42153fd11e</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::DTLZ6</name>
    <filename>structshark_1_1benchmarks_1_1_d_t_l_z6.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>DTLZ6</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z6.html</anchorfile>
      <anchor>a3d55657fdef027b40066f03dcdf637d4</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z6.html</anchorfile>
      <anchor>a9b6db5b0f895a2ee2771fa664aed2064</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z6.html</anchorfile>
      <anchor>a9c734171ed4e38c7e2ea679509566bb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z6.html</anchorfile>
      <anchor>aab49dd123e0ab685b5b44c4e518fd1d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z6.html</anchorfile>
      <anchor>af13d3ed8ba1121f29a770ad519a397db</anchor>
      <arglist>(std::size_t numberOfObjectives)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z6.html</anchorfile>
      <anchor>a00549558010e2f07325b203bffcf50f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z6.html</anchorfile>
      <anchor>acc76bfaae7b8fb05aec0fe43927155e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z6.html</anchorfile>
      <anchor>a9c238ca026aa03406e7014c6bd3e77f7</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z6.html</anchorfile>
      <anchor>a85667643cf16c10f8dd8f907eecdc735</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::DTLZ7</name>
    <filename>structshark_1_1benchmarks_1_1_d_t_l_z7.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>DTLZ7</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z7.html</anchorfile>
      <anchor>ad6faa377418a197315752d3c5f5e67ea</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z7.html</anchorfile>
      <anchor>a28ecf1aff3370b5d3373ba3cf9c52785</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z7.html</anchorfile>
      <anchor>abfcec3e580aad60413215439deec52e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z7.html</anchorfile>
      <anchor>a3e32c7e79261e14605bc6a2810362c8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z7.html</anchorfile>
      <anchor>a7e6783833f09ba5d2de5472bf2fbffe6</anchor>
      <arglist>(std::size_t numberOfObjectives)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z7.html</anchorfile>
      <anchor>a1d7c37461d6793978f0859162f27ec65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z7.html</anchorfile>
      <anchor>a62912a74fbbf6f0ba2dcab6a45dca48b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z7.html</anchorfile>
      <anchor>abd3c1f0abf9314cc142b463728e453fe</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_d_t_l_z7.html</anchorfile>
      <anchor>ab0caa54bb6167f4c36fc907373ba3562</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ElitistCMA</name>
    <filename>classshark_1_1_elitist_c_m_a.html</filename>
    <base>AbstractSingleObjectiveOptimizer&lt; RealVector &gt;</base>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL</type>
      <name>ElitistCMA</name>
      <anchorfile>classshark_1_1_elitist_c_m_a.html</anchorfile>
      <anchor>a10540d49901609329608c4dfa5d13361</anchor>
      <arglist>(random::rng_type &amp;rng=random::globalRng)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_elitist_c_m_a.html</anchorfile>
      <anchor>a7b47ad2c14d583ce71dbcacb981dc19d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_elitist_c_m_a.html</anchorfile>
      <anchor>a1c7671e276787d93cc32ff6165d4b5f6</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_elitist_c_m_a.html</anchorfile>
      <anchor>a323034584e6ae4951ab79f9b504728fd</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_elitist_c_m_a.html</anchorfile>
      <anchor>a68ca942a72b59c681642a33d98f36e72</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, SearchPointType const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_elitist_c_m_a.html</anchorfile>
      <anchor>afd2e76bdf537a5cdf3287c4c197e1138</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>activeUpdate</name>
      <anchorfile>classshark_1_1_elitist_c_m_a.html</anchorfile>
      <anchor>a5a3da54f1bf2d73e7a96f140e3e91f61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>activeUpdate</name>
      <anchorfile>classshark_1_1_elitist_c_m_a.html</anchorfile>
      <anchor>afaccb84cce50e824d61dd043457cd44e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>constrainedPenaltyFactor</name>
      <anchorfile>classshark_1_1_elitist_c_m_a.html</anchorfile>
      <anchor>a415fd8e3a2a3698628e7cbe3bdea0ad4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>constrainedPenaltyFactor</name>
      <anchorfile>classshark_1_1_elitist_c_m_a.html</anchorfile>
      <anchor>a61ddc9606d203965e2b9f292c9acbea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sigma</name>
      <anchorfile>classshark_1_1_elitist_c_m_a.html</anchorfile>
      <anchor>a2d6e18f8d1445bcd935e98f3ff434033</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>sigma</name>
      <anchorfile>classshark_1_1_elitist_c_m_a.html</anchorfile>
      <anchor>a2a9043c1b6618883d267495170ee70a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::ElitistSelection</name>
    <filename>structshark_1_1_elitist_selection.html</filename>
    <templarg>typename Ordering</templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_elitist_selection.html</anchorfile>
      <anchor>a0293b6fc6392c8ca589bb171c122ccb4</anchor>
      <arglist>(InIterator it, InIterator itE, OutIterator out, OutIterator outE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_elitist_selection.html</anchorfile>
      <anchor>aa7613bb0cb9f46e1f32c4253b4895043</anchor>
      <arglist>(Population &amp;population, std::size_t mu)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::ELLI1</name>
    <filename>structshark_1_1benchmarks_1_1_e_l_l_i1.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>ELLI1</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i1.html</anchorfile>
      <anchor>a5fe3516d39d0bcf4ff94b68f649812fa</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i1.html</anchorfile>
      <anchor>ae38878b7514c3533cb8e08ddf2b881fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i1.html</anchorfile>
      <anchor>a82bc183478afe2f1584646809f12bc8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i1.html</anchorfile>
      <anchor>a57846bef65024e7ee2b7c6971581fa96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i1.html</anchorfile>
      <anchor>acee22d92eac2cc1e141789b5772ef906</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i1.html</anchorfile>
      <anchor>a231e390ebdf2e75ef64cea15cbffb2ac</anchor>
      <arglist>(std::size_t numVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i1.html</anchorfile>
      <anchor>abc954f9ae65aceeb13cf8872765c2282</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i1.html</anchorfile>
      <anchor>ad057f735d48694e4577bb3b664f5724b</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i1.html</anchorfile>
      <anchor>a6076013de21bd58a9ae061425ea8a2e2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::ELLI2</name>
    <filename>structshark_1_1benchmarks_1_1_e_l_l_i2.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>ELLI2</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i2.html</anchorfile>
      <anchor>ae8dec8fa3a632a623ef2a8d36426ddfb</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i2.html</anchorfile>
      <anchor>a6eb3bea91daa65d2e8dc01ef97cf8c79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i2.html</anchorfile>
      <anchor>a15881ea77d9e2b1a60cc0f1d48d7ce0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i2.html</anchorfile>
      <anchor>a9fab63d5c81cc2fa16b9da7aa7d16875</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i2.html</anchorfile>
      <anchor>a9bf5e5ebc46d91890bf4204b48e9cf33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i2.html</anchorfile>
      <anchor>aa2b9d8053bd55dcac7c91b47feb309fc</anchor>
      <arglist>(std::size_t numVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i2.html</anchorfile>
      <anchor>a77dcade2f01cddb4879bb472ee00f3be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i2.html</anchorfile>
      <anchor>aaf079391316c77a65ed34c9b557665ba</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>structshark_1_1benchmarks_1_1_e_l_l_i2.html</anchorfile>
      <anchor>a4309b3cf58d96223d42cd9087bbba6c6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::Ellipsoid</name>
    <filename>structshark_1_1benchmarks_1_1_ellipsoid.html</filename>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>Ellipsoid</name>
      <anchorfile>structshark_1_1benchmarks_1_1_ellipsoid.html</anchorfile>
      <anchor>ae2b45e4886ff78b24cfc045d9debf4dd</anchor>
      <arglist>(size_t numberOfVariables=5, double alpha=1E-3)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_ellipsoid.html</anchorfile>
      <anchor>abb15f4f16ebdb1b8883bb51567be6673</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_ellipsoid.html</anchorfile>
      <anchor>a359164f92ba3d0f3670f0f8d0d3652d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_ellipsoid.html</anchorfile>
      <anchor>adead07c767ca133aef75e07036e0f5af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_ellipsoid.html</anchorfile>
      <anchor>a70ef10cc06e38df4e393c971d6bc80ad</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>structshark_1_1benchmarks_1_1_ellipsoid.html</anchorfile>
      <anchor>a8e57d7bff2a231ce93eb809fb08f6382</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_ellipsoid.html</anchorfile>
      <anchor>aef5c824d1950e8777d3a3f764fe60258</anchor>
      <arglist>(const SearchPointType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>structshark_1_1benchmarks_1_1_ellipsoid.html</anchorfile>
      <anchor>aca3889c57e0adb5af1ac49bc38be9d78</anchor>
      <arglist>(const SearchPointType &amp;p, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>structshark_1_1benchmarks_1_1_ellipsoid.html</anchorfile>
      <anchor>a0b823473fd9f8d05d4fc096eef853773</anchor>
      <arglist>(const SearchPointType &amp;p, SecondOrderDerivative &amp;derivative) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::EmptyState</name>
    <filename>structshark_1_1_empty_state.html</filename>
    <base>shark::State</base>
  </compound>
  <compound kind="struct">
    <name>shark::Energy</name>
    <filename>structshark_1_1_energy.html</filename>
    <templarg>class RBM</templarg>
    <member kind="typedef">
      <type>RBM::HiddenType</type>
      <name>HiddenType</name>
      <anchorfile>structshark_1_1_energy.html</anchorfile>
      <anchor>aff1c0d419e5e79be2221262c2321a7c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBM::VisibleType</type>
      <name>VisibleType</name>
      <anchorfile>structshark_1_1_energy.html</anchorfile>
      <anchor>ab71e2d1ae4d13995eaccf3b4992f3593</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HiddenType::SufficientStatistics</type>
      <name>HiddenStatistics</name>
      <anchorfile>structshark_1_1_energy.html</anchorfile>
      <anchor>a5d806deb535c0978328154e4436bab50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VisibleType::SufficientStatistics</type>
      <name>VisibleStatistics</name>
      <anchorfile>structshark_1_1_energy.html</anchorfile>
      <anchor>a27298f912ce91884f0d4b26832f971b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HiddenType::StatisticsBatch</type>
      <name>HiddenStatisticsBatch</name>
      <anchorfile>structshark_1_1_energy.html</anchorfile>
      <anchor>adb7c41575f52f5cfa9ac63161fc54c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VisibleType::StatisticsBatch</type>
      <name>VisibleStatisticsBatch</name>
      <anchorfile>structshark_1_1_energy.html</anchorfile>
      <anchor>a8b34b676d95d754b53ce625e587b9250</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Energy</name>
      <anchorfile>structshark_1_1_energy.html</anchorfile>
      <anchor>a18af216e713128efcd3b7dbfbd38ec5d</anchor>
      <arglist>(RBM const &amp;rbm)</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>energy</name>
      <anchorfile>structshark_1_1_energy.html</anchorfile>
      <anchor>aa07edf12f92820285d1b51495cdafb35</anchor>
      <arglist>(RealMatrix const &amp;hidden, RealMatrix const &amp;visible) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inputHidden</name>
      <anchorfile>structshark_1_1_energy.html</anchorfile>
      <anchor>a751c81c6de87a9d563d36db38edccb92</anchor>
      <arglist>(RealMatrix &amp;inputs, RealMatrix const &amp;visibleStates) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inputVisible</name>
      <anchorfile>structshark_1_1_energy.html</anchorfile>
      <anchor>acf73968e06c43cedaf8fede5b2bf7782</anchor>
      <arglist>(RealMatrix &amp;inputs, RealMatrix const &amp;hiddenStates) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>logUnnormalizedProbabilityHidden</name>
      <anchorfile>structshark_1_1_energy.html</anchorfile>
      <anchor>afa5365f469f52d0682d3820fb071fa1b</anchor>
      <arglist>(RealMatrix const &amp;hiddenState, RealMatrix const &amp;visibleInput, BetaVector const &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>logUnnormalizedProbabilityVisible</name>
      <anchorfile>structshark_1_1_energy.html</anchorfile>
      <anchor>a7d21da0cfe60fabb495a5fa0d75cce51</anchor>
      <arglist>(RealMatrix const &amp;visibleState, RealMatrix const &amp;hiddenInput, BetaVector const &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>logUnnormalizedProbabilityVisible</name>
      <anchorfile>structshark_1_1_energy.html</anchorfile>
      <anchor>a7c5d47f64f1839574b55545cebdbea78</anchor>
      <arglist>(RealMatrix const &amp;visibleStates, BetaVector const &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>logUnnormalizedProbabilityHidden</name>
      <anchorfile>structshark_1_1_energy.html</anchorfile>
      <anchor>a3e25296fca0f1f23803bbb1535ff8f96</anchor>
      <arglist>(RealMatrix const &amp;hiddenStates, BetaVector const &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>energyFromHiddenInput</name>
      <anchorfile>structshark_1_1_energy.html</anchorfile>
      <anchor>a25ad87baa9a3500ea7b3af9a4effc933</anchor>
      <arglist>(RealMatrix const &amp;hiddenInput, RealMatrix const &amp;hidden, RealMatrix const &amp;visible) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>energyFromVisibleInput</name>
      <anchorfile>structshark_1_1_energy.html</anchorfile>
      <anchor>a9f124cd4e0a4efa781ab34ab246fca81</anchor>
      <arglist>(RealMatrix const &amp;visibleInput, RealMatrix const &amp;hidden, RealMatrix const &amp;visible) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::EnergyStoringTemperedMarkovChain</name>
    <filename>classshark_1_1_energy_storing_tempered_markov_chain.html</filename>
    <templarg>class Operator</templarg>
    <member kind="typedef">
      <type>Operator::RBM</type>
      <name>RBM</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>aec1460bd58ab50bfd1a0ab043810936f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TemperedMarkovChain&lt; Operator &gt;::SampleBatch</type>
      <name>SampleBatch</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a0440df45c63b02e09d72f4cfd9781b2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SampleBatch::reference</type>
      <name>reference</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>acb70640b149f2347d316fdf492db8a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SampleBatch::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>aa200ee423276beeffc81372037e1c926</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnergyStoringTemperedMarkovChain</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>ae7a05f61a5585d9bdd366123a231b96d</anchor>
      <arglist>(RBM *rbm, bool integrateEnergyDifferences=true)</arglist>
    </member>
    <member kind="function">
      <type>const Operator &amp;</type>
      <name>transitionOperator</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a095ed740b5339a40a8dae97f2119b97b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Operator &amp;</type>
      <name>transitionOperator</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>ab38f105395b2fe6c1b046e079726c226</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfTemperatures</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a62a2ca127f47380ec50bd859487e2e96</anchor>
      <arglist>(std::size_t temperatures)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniformTemperatureSpacing</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a2d6f3031dbae2513fa3bba83f261e69b</anchor>
      <arglist>(std::size_t temperatures)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfTemperatures</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a11d7ba7c75b98dd5809001fa8bf1ef2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBatchSize</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>afa0c9dd682454dfa5f3b08cf87a5ded2</anchor>
      <arglist>(std::size_t batchSize)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>batchSize</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a862d3a6d440f46551a810fafb39402c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeta</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a1d7b2d83d91b79b18274565db1f8b93b</anchor>
      <arglist>(std::size_t i, double beta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>ab07c1453c6cadb92927acfcf4354c5b0</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>beta</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a562f689c170cdf5e8e73e65aec437b4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>sample</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>ae2228ae158c0d70b468830469bfe90e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SampleBatch const &amp;</type>
      <name>samples</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a20fc0a86084c2e52e4c6b06c223bb21f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SampleBatch &amp;</type>
      <name>samples</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a307f9a93bd1302b472818bba62bc07b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeChain</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a21b3be14d212c43e6503cad08301d393</anchor>
      <arglist>(Data&lt; RealVector &gt; const &amp;dataSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeChain</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a5fe9dff467776481c156f52abd39bd94</anchor>
      <arglist>(RealMatrix const &amp;sampleData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a390d4deeed260f32028b2935dd5b7ddb</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix</type>
      <name>getUpDifferences</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a98bb5d7502c757a432822bc43e57dee8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix</type>
      <name>getDownDifferences</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a7efbbd03042d38540e84c5cfdbfaf283</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDifferences</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a2b1b396adf72f4143d7a22bf969bb114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>storeEnergyDifferences</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a5d6031a54692fdd85387eb9a2f410b22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>afae3cc6e7626e291e4068ae278d96f00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>computesBatch</name>
      <anchorfile>classshark_1_1_energy_storing_tempered_markov_chain.html</anchorfile>
      <anchor>a171eacad9f4a8371278220a8feae77c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Ensemble</name>
    <filename>classshark_1_1_ensemble.html</filename>
    <templarg>class ModelType</templarg>
    <templarg>class OutputType</templarg>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_ensemble.html</anchorfile>
      <anchor>a3508e39c8cbf40de08dcd387670a8f58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addModel</name>
      <anchorfile>classshark_1_1_ensemble.html</anchorfile>
      <anchor>aaa96d4139d33b84477f8a41d9d12c8bb</anchor>
      <arglist>(ModelType const &amp;model, double weight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearModels</name>
      <anchorfile>classshark_1_1_ensemble.html</anchorfile>
      <anchor>ab04ccf3f9acb405f3fdedd125ff5ed1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfModels</name>
      <anchorfile>classshark_1_1_ensemble.html</anchorfile>
      <anchor>a1e09f390e1605b270f0ec17b7845e472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::remove_pointer&lt; ModelType &gt;::type &amp;</type>
      <name>model</name>
      <anchorfile>classshark_1_1_ensemble.html</anchorfile>
      <anchor>ade2b84f506a9ca05c99b048d89a81e49</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>std::remove_pointer&lt; ModelType &gt;::type const &amp;</type>
      <name>model</name>
      <anchorfile>classshark_1_1_ensemble.html</anchorfile>
      <anchor>a9ca0daef198afeb7c77203e30c80d52e</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>double const &amp;</type>
      <name>weight</name>
      <anchorfile>classshark_1_1_ensemble.html</anchorfile>
      <anchor>a8362fb3624b7976c8260cb5c1e98f311</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>weight</name>
      <anchorfile>classshark_1_1_ensemble.html</anchorfile>
      <anchor>a2b8b29b5b1749b42ed5cd79a6aab7952</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumOfWeights</name>
      <anchorfile>classshark_1_1_ensemble.html</anchorfile>
      <anchor>a6965c4363321584b44389670044d24bd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::QpSparseArray::Entry</name>
    <filename>structshark_1_1_qp_sparse_array_1_1_entry.html</filename>
    <member kind="variable">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>structshark_1_1_qp_sparse_array_1_1_entry.html</anchorfile>
      <anchor>ad120c074740a4e514c52d1b0691f8235</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QpFloatType</type>
      <name>value</name>
      <anchorfile>structshark_1_1_qp_sparse_array_1_1_entry.html</anchorfile>
      <anchor>a91da6a71d8d5fd771875df5036c347ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::EpsilonHingeLoss</name>
    <filename>classshark_1_1_epsilon_hinge_loss.html</filename>
    <base>AbstractLoss&lt; RealVector, RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>EpsilonHingeLoss</name>
      <anchorfile>classshark_1_1_epsilon_hinge_loss.html</anchorfile>
      <anchor>a9d0a81d2b579576e7fd92b7aa5e1ba3f</anchor>
      <arglist>(double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_epsilon_hinge_loss.html</anchorfile>
      <anchor>ac4a1af84b8b2f898dca81dc81ab0d0af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_epsilon_hinge_loss.html</anchorfile>
      <anchor>aebff1ddcb9f0ce35f93d29d8d6bd458c</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_epsilon_hinge_loss.html</anchorfile>
      <anchor>a19cc6b04b744592c242c8ca2ac9eab0d</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions, BatchOutputType &amp;gradient) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::EpsilonSvmTrainer</name>
    <filename>classshark_1_1_epsilon_svm_trainer.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class CacheType</templarg>
    <base>AbstractSvmTrainer&lt; InputType, RealVector, KernelExpansion&lt; InputType &gt; &gt;</base>
    <member kind="typedef">
      <type>CacheType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_epsilon_svm_trainer.html</anchorfile>
      <anchor>a3016ebf54b283192dc08391f2160c194</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KernelMatrix&lt; InputType, QpFloatType &gt;</type>
      <name>KernelMatrixType</name>
      <anchorfile>classshark_1_1_epsilon_svm_trainer.html</anchorfile>
      <anchor>a4f9bbb0afb8eff93970e7f51f11ee86c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlockMatrix2x2&lt; KernelMatrixType &gt;</type>
      <name>BlockMatrixType</name>
      <anchorfile>classshark_1_1_epsilon_svm_trainer.html</anchorfile>
      <anchor>ae9818f09ebb48a69b1b28d3042da56da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CachedMatrix&lt; BlockMatrixType &gt;</type>
      <name>CachedBlockMatrixType</name>
      <anchorfile>classshark_1_1_epsilon_svm_trainer.html</anchorfile>
      <anchor>ac3292f6302b431cb751edc7a4dcf6c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PrecomputedMatrix&lt; BlockMatrixType &gt;</type>
      <name>PrecomputedBlockMatrixType</name>
      <anchorfile>classshark_1_1_epsilon_svm_trainer.html</anchorfile>
      <anchor>aefaf6c666566d00fcd2822f6e3e34f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractModel&lt; InputType, RealVector &gt;</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_epsilon_svm_trainer.html</anchorfile>
      <anchor>a8989b04b8588b9481f1ead75a26fae71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_epsilon_svm_trainer.html</anchorfile>
      <anchor>a5113162c6d0b5946ea23a303f6193682</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EpsilonSvmTrainer</name>
      <anchorfile>classshark_1_1_epsilon_svm_trainer.html</anchorfile>
      <anchor>a3854918319188d0e3dc58d594bf8bdb7</anchor>
      <arglist>(KernelType *kernel, double C, double epsilon, bool unconstrained=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_epsilon_svm_trainer.html</anchorfile>
      <anchor>ae4567615c33a2a3aec07382c3f2538d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>epsilon</name>
      <anchorfile>classshark_1_1_epsilon_svm_trainer.html</anchorfile>
      <anchor>a6cca95658d21c729fe2ccce525852756</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEpsilon</name>
      <anchorfile>classshark_1_1_epsilon_svm_trainer.html</anchorfile>
      <anchor>ab6bdf1036213a92736abb9930d56de5c</anchor>
      <arglist>(double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_epsilon_svm_trainer.html</anchorfile>
      <anchor>a631651231f0bfbe6d61c26117cdb4c6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_epsilon_svm_trainer.html</anchorfile>
      <anchor>a62ea3ab316e7985eb111d9b4b3172d64</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_epsilon_svm_trainer.html</anchorfile>
      <anchor>a20a2c523e7723a2b63cc9b459a865603</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_epsilon_svm_trainer.html</anchorfile>
      <anchor>a51d1821c3f6cedeff400e54f6e2b3b5d</anchor>
      <arglist>(KernelExpansion&lt; InputType &gt; &amp;svm, LabeledData&lt; InputType, RealVector &gt; const &amp;dataset)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::EPTournamentSelection</name>
    <filename>structshark_1_1_e_p_tournament_selection.html</filename>
    <templarg>typename Ordering</templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_e_p_tournament_selection.html</anchorfile>
      <anchor>a6541dc2b45bbc8b4d98bf8a7dde60e35</anchor>
      <arglist>(rng_type &amp;rng, InIterator it, InIterator itE, OutIterator out, OutIterator outE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_e_p_tournament_selection.html</anchorfile>
      <anchor>ad32dd14e09e7ab34a2bf0519d37f6426</anchor>
      <arglist>(rng_type &amp;rng, Population &amp;population, std::size_t mu)</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>tournamentSize</name>
      <anchorfile>structshark_1_1_e_p_tournament_selection.html</anchorfile>
      <anchor>a49f05d90d2ae533ec3f811582cb41cad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ErrorFunction</name>
    <filename>classshark_1_1_error_function.html</filename>
    <templarg>class SearchPointType</templarg>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="typedef">
      <type>FunctionType::ResultType</type>
      <name>ResultType</name>
      <anchorfile>classshark_1_1_error_function.html</anchorfile>
      <anchor>a3c50a0db21038a95f674d5f173806a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FunctionType::FirstOrderDerivative</type>
      <name>FirstOrderDerivative</name>
      <anchorfile>classshark_1_1_error_function.html</anchorfile>
      <anchor>ab2e6af74d458dbac22f0b2fad6fadc4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ErrorFunction</name>
      <anchorfile>classshark_1_1_error_function.html</anchorfile>
      <anchor>aa240c92f5dbf5a5ccdc245843a81a0e6</anchor>
      <arglist>(LabeledData&lt; InputType, LabelType &gt; const &amp;dataset, AbstractModel&lt; InputType, OutputType, SearchPointType &gt; *model, AbstractLoss&lt; LabelType, OutputType &gt; *loss, bool useMiniBatches=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ErrorFunction</name>
      <anchorfile>classshark_1_1_error_function.html</anchorfile>
      <anchor>a53d7766a61d4ccf85d684bfe2d6e4585</anchor>
      <arglist>(WeightedLabeledData&lt; InputType, LabelType &gt; const &amp;dataset, AbstractModel&lt; InputType, OutputType, SearchPointType &gt; *model, AbstractLoss&lt; LabelType, OutputType &gt; *loss)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ErrorFunction</name>
      <anchorfile>classshark_1_1_error_function.html</anchorfile>
      <anchor>aee0d9267985a8742305477a0701ca9bc</anchor>
      <arglist>(ErrorFunction const &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>ErrorFunction &amp;</type>
      <name>operator=</name>
      <anchorfile>classshark_1_1_error_function.html</anchorfile>
      <anchor>a4e4d6012adc12139b7757ed9b1933a76</anchor>
      <arglist>(ErrorFunction const &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_error_function.html</anchorfile>
      <anchor>abecfa779a288d737e93be61cb6bc068d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRegularizer</name>
      <anchorfile>classshark_1_1_error_function.html</anchorfile>
      <anchor>af786262cd69579e9b26d28de85b8fde9</anchor>
      <arglist>(double factor, FunctionType *regularizer)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>classshark_1_1_error_function.html</anchorfile>
      <anchor>addeffd025bf0521615ba91883451a690</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_error_function.html</anchorfile>
      <anchor>a398ed5c2c9bb868a8d45e068c5bd245b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_error_function.html</anchorfile>
      <anchor>a6ba22ddebbfc72a20503c9089e59abe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_error_function.html</anchorfile>
      <anchor>a23d586d7201fa0c9db910e2d935f7dfe</anchor>
      <arglist>(SearchPointType const &amp;input) const</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_error_function.html</anchorfile>
      <anchor>a4a037354234ee0898c8a77339c1477d6</anchor>
      <arglist>(SearchPointType const &amp;input, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::EvaluationArchive</name>
    <filename>classshark_1_1_evaluation_archive.html</filename>
    <templarg>typename PointType</templarg>
    <templarg>typename ResultT</templarg>
    <base>shark::AbstractObjectiveFunction</base>
    <class kind="class">shark::EvaluationArchive::PointResultPairType</class>
    <member kind="typedef">
      <type>base_type::SearchPointType</type>
      <name>SearchPointType</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>a3576a0054d19eaec3167458cb2f88c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ResultType</type>
      <name>ResultType</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>ae13e5ea958abc67e9e369dce00a92b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::FirstOrderDerivative</type>
      <name>FirstOrderDerivative</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>a8ba064f61154a3fb54710e6745ed1fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::SecondOrderDerivative</type>
      <name>SecondOrderDerivative</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>ac343cf727f5a1f25edc6abd7c2196298</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; PointResultPairType &gt;</type>
      <name>PointResultPairContainer</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>a4daf431052767cb6d8e85e46eeeceb5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointResultPairContainer::iterator</type>
      <name>PointResultPairIterator</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>a86b696018a50ef61a414de27468017fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointResultPairContainer::const_iterator</type>
      <name>PointResultPairConstIterator</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>a84a9cee45c1e863aec1da7bf24870a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EvaluationArchive</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>aa956ce92d2f105bc7d744519063b234d</anchor>
      <arglist>(base_type *objective)</arglist>
    </member>
    <member kind="function">
      <type>base_type *</type>
      <name>objective</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>a4de5255fedccb38db93192a82a4fce3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const base_type *</type>
      <name>objective</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>ae5bc1dc734c80632561b76dfc1879a41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>a2256ac033c4c015346fc88197d9a42c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>a41da21a960547158600fca2b91873bfa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableObjectives</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>a52d67e19ef41cc1656e7528b84acb58e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfObjectives</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>aaa3d16da93398793cb0b1438d1ed3725</anchor>
      <arglist>(std::size_t numberOfObjectives)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>ae12c833605409ece5925889fe6afc25c</anchor>
      <arglist>(const SearchPointType &amp;input) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closestFeasible</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>aa9db8a8ad6cdd5b53cb03966c7ad03a8</anchor>
      <arglist>(SearchPointType &amp;input) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>proposeStartingPoint</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>a997a476a3869a1b8794133606aec94b4</anchor>
      <arglist>(SearchPointType &amp;startingPoint) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>a6d3fa4e6d982683059714b679a0f64f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>aa398b0fa85ebc951b7273248019247de</anchor>
      <arglist>(const SearchPointType &amp;input) const</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>a33c6048db6cd5d71203e8f79c407501b</anchor>
      <arglist>(const SearchPointType &amp;input) const</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>a8799c0f6863bd80086fb1db661432200</anchor>
      <arglist>(const SearchPointType &amp;input, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>ae9a5a5832825e2087b7fb586576dde0e</anchor>
      <arglist>(const SearchPointType &amp;input, SecondOrderDerivative &amp;derivative) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>a542df27837f79d33a265a76b00c6bafd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PointResultPairIterator</type>
      <name>begin</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>ab99cdfba0518a01012dbc818a87c495c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PointResultPairConstIterator</type>
      <name>begin</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>ace5d501a77c672c497de71478429626a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PointResultPairIterator</type>
      <name>end</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>a646236f2eeab8950ce45a354fba75e90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PointResultPairConstIterator</type>
      <name>end</name>
      <anchorfile>classshark_1_1_evaluation_archive.html</anchorfile>
      <anchor>a3ddde59ff2f6a54e49e26c74f266a1b3</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ExactGradient</name>
    <filename>classshark_1_1_exact_gradient.html</filename>
    <templarg>class RBMType</templarg>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="typedef">
      <type>RBMType</type>
      <name>RBM</name>
      <anchorfile>classshark_1_1_exact_gradient.html</anchorfile>
      <anchor>a782d614ec71be0e27fb7fba3bfaa58f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExactGradient</name>
      <anchorfile>classshark_1_1_exact_gradient.html</anchorfile>
      <anchor>a866e9a502e3c7752eb1fa15e72919275</anchor>
      <arglist>(RBM *rbm)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_exact_gradient.html</anchorfile>
      <anchor>a743bdbdd708d3c13c2426ec207f1463b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>classshark_1_1_exact_gradient.html</anchorfile>
      <anchor>ad19d6ea347365af7fe15a38e243b1cdf</anchor>
      <arglist>(UnlabeledData&lt; RealVector &gt; const &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>classshark_1_1_exact_gradient.html</anchorfile>
      <anchor>a4ca798c77e7b1cf431b8459b1358b8d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_exact_gradient.html</anchorfile>
      <anchor>a4b11a51852eebba4972658b9bf41d26c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRegularizer</name>
      <anchorfile>classshark_1_1_exact_gradient.html</anchorfile>
      <anchor>a3eb3523455c880a8de64e9459f29c038</anchor>
      <arglist>(double factor, SingleObjectiveFunction *regularizer)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_exact_gradient.html</anchorfile>
      <anchor>ac633cfe3ffabe6a136ed64243e18dd66</anchor>
      <arglist>(SearchPointType const &amp;parameter) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_exact_gradient.html</anchorfile>
      <anchor>aef523213c55d8c9c6261abfe3c4c6bcf</anchor>
      <arglist>(SearchPointType const &amp;parameter, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>getLogPartition</name>
      <anchorfile>classshark_1_1_exact_gradient.html</anchorfile>
      <anchor>aebc03b4ccfbb70f873c3a932cebe9ddd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::QpMcBoxDecomp::Example</name>
    <filename>structshark_1_1_qp_mc_box_decomp_1_1_example.html</filename>
    <member kind="variable">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>structshark_1_1_qp_mc_box_decomp_1_1_example.html</anchorfile>
      <anchor>a90569256841c0dafecc015a17136fe17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>y</name>
      <anchorfile>structshark_1_1_qp_mc_box_decomp_1_1_example.html</anchorfile>
      <anchor>a1efa7e34ea82e69c406b27c3f53bf8db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>active</name>
      <anchorfile>structshark_1_1_qp_mc_box_decomp_1_1_example.html</anchorfile>
      <anchor>a82f2ee0484ef33fc059598fb81c72cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t *</type>
      <name>var</name>
      <anchorfile>structshark_1_1_qp_mc_box_decomp_1_1_example.html</anchorfile>
      <anchor>a5138b0a0cf698c18352bd38b1665b745</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t *</type>
      <name>avar</name>
      <anchorfile>structshark_1_1_qp_mc_box_decomp_1_1_example.html</anchorfile>
      <anchor>a6d34bdfac0ec42f20cd754fff82ff4c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::QpMcSimplexDecomp::Example</name>
    <filename>structshark_1_1_qp_mc_simplex_decomp_1_1_example.html</filename>
    <member kind="variable">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>structshark_1_1_qp_mc_simplex_decomp_1_1_example.html</anchorfile>
      <anchor>aab58acc2d5b87c0fe69188397f97a769</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>y</name>
      <anchorfile>structshark_1_1_qp_mc_simplex_decomp_1_1_example.html</anchorfile>
      <anchor>a289bed9316066dd53203df71f2bfb767</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>active</name>
      <anchorfile>structshark_1_1_qp_mc_simplex_decomp_1_1_example.html</anchorfile>
      <anchor>aed59b679c1979d9f8ed433f5f56716ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t *</type>
      <name>var</name>
      <anchorfile>structshark_1_1_qp_mc_simplex_decomp_1_1_example.html</anchorfile>
      <anchor>ae8e200b285451dd8bfb99672e23984b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t *</type>
      <name>avar</name>
      <anchorfile>structshark_1_1_qp_mc_simplex_decomp_1_1_example.html</anchorfile>
      <anchor>a68c607fe9a14561a3d595ca0a5e2d23d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>varsum</name>
      <anchorfile>structshark_1_1_qp_mc_simplex_decomp_1_1_example.html</anchorfile>
      <anchor>ac5aea03b47634b4edeaf71099548433c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>diagonal</name>
      <anchorfile>structshark_1_1_qp_mc_simplex_decomp_1_1_example.html</anchorfile>
      <anchor>a695f9e848d59f0ada274e8c18e283678</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ExampleModifiedKernelMatrix</name>
    <filename>classshark_1_1_example_modified_kernel_matrix.html</filename>
    <templarg>typename InputType</templarg>
    <templarg>typename CacheType</templarg>
    <member kind="typedef">
      <type>CacheType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_example_modified_kernel_matrix.html</anchorfile>
      <anchor>a745f5ec5c09ce814368fd30bd75ca4ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExampleModifiedKernelMatrix</name>
      <anchorfile>classshark_1_1_example_modified_kernel_matrix.html</anchorfile>
      <anchor>a11477f113015a5aa760ddbd930b7df2f</anchor>
      <arglist>(AbstractKernelFunction&lt; InputType &gt; const &amp;kernelfunction, Data&lt; InputType &gt; const &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_example_modified_kernel_matrix.html</anchorfile>
      <anchor>a04b1125f744d2db2f81c31a89e441862</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipColumnsAndRows</name>
      <anchorfile>classshark_1_1_example_modified_kernel_matrix.html</anchorfile>
      <anchor>a8f0d05872f35e9542fde9c6b717a4ce2</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_example_modified_kernel_matrix.html</anchorfile>
      <anchor>a5e0e6e172c9c67bfc192d8ed215f5ca3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>getAccessCount</name>
      <anchorfile>classshark_1_1_example_modified_kernel_matrix.html</anchorfile>
      <anchor>a72f151212af0f6c0ad5acbc2ee69d43d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetAccessCount</name>
      <anchorfile>classshark_1_1_example_modified_kernel_matrix.html</anchorfile>
      <anchor>a2a54aaf7381259d7541efe5cdff2cc38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>entry</name>
      <anchorfile>classshark_1_1_example_modified_kernel_matrix.html</anchorfile>
      <anchor>a0138d4fa7cfe2cb0d5228581be209e59</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>classshark_1_1_example_modified_kernel_matrix.html</anchorfile>
      <anchor>aad7d35cd53538110b06c0aa455b1e05d</anchor>
      <arglist>(std::size_t i, std::size_t start, std::size_t end, QpFloatType *storage) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matrix</name>
      <anchorfile>classshark_1_1_example_modified_kernel_matrix.html</anchorfile>
      <anchor>a2ea8da22eee5949c474d329fed8f8ce6</anchor>
      <arglist>(blas::matrix_expression&lt; M, blas::cpu_tag &gt; &amp;storage) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScalingCoefficients</name>
      <anchorfile>classshark_1_1_example_modified_kernel_matrix.html</anchorfile>
      <anchor>ac1ded007da786a92cf9424048e971e9a</anchor>
      <arglist>(const RealVector &amp;scalingCoefficients)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Data&lt; InputType &gt;::const_element_range::const_iterator</type>
      <name>PointerType</name>
      <anchorfile>classshark_1_1_example_modified_kernel_matrix.html</anchorfile>
      <anchor>aee5f5afe285add5ec8fe31eeba21731a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AbstractKernelFunction&lt; InputType &gt; const  &amp;</type>
      <name>kernel</name>
      <anchorfile>classshark_1_1_example_modified_kernel_matrix.html</anchorfile>
      <anchor>a36364a0cf08ffe188ea9b84025402ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; PointerType &gt;</type>
      <name>x</name>
      <anchorfile>classshark_1_1_example_modified_kernel_matrix.html</anchorfile>
      <anchor>a7f95535d785252cc07f6bfba36f57bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long long</type>
      <name>m_accessCounter</name>
      <anchorfile>classshark_1_1_example_modified_kernel_matrix.html</anchorfile>
      <anchor>afba580c85e7eb485c1306351cfa6f495</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Exception</name>
    <filename>classshark_1_1_exception.html</filename>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classshark_1_1_exception.html</anchorfile>
      <anchor>a016e2dad37e8aac36d87f34cd943c0ec</anchor>
      <arglist>(const std::string &amp;what=&quot;unknown reason&quot;, const std::string &amp;file=&quot;unknown&quot;, unsigned int line=0, const std::string &amp;func=&quot;function&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Exception</name>
      <anchorfile>classshark_1_1_exception.html</anchorfile>
      <anchor>a8a770d76f0b705c9117738601e7979cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>classshark_1_1_exception.html</anchorfile>
      <anchor>a65a4dde65a8c3d21783086e9aa19ed32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>file</name>
      <anchorfile>classshark_1_1_exception.html</anchorfile>
      <anchor>aba32ea731e163cf2028f85738b1359bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>line</name>
      <anchorfile>classshark_1_1_exception.html</anchorfile>
      <anchor>a95d2ea51b7cff98974705365f0603903</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_what</name>
      <anchorfile>classshark_1_1_exception.html</anchorfile>
      <anchor>ae79f2a9e42db65601cc6c236a528a677</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_file</name>
      <anchorfile>classshark_1_1_exception.html</anchorfile>
      <anchor>a39f2cdb94a17e86c09f6a16d379e6c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_line</name>
      <anchorfile>classshark_1_1_exception.html</anchorfile>
      <anchor>a865e985e7612961558fa9593a974ba72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_func</name>
      <anchorfile>classshark_1_1_exception.html</anchorfile>
      <anchor>afe8db3e3f933ba035f051e3d8415f79f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_message</name>
      <anchorfile>classshark_1_1_exception.html</anchorfile>
      <anchor>adcd67f98ee9ca2b2d9ea3c8064426517</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::FastSigmoidNeuron</name>
    <filename>structshark_1_1_fast_sigmoid_neuron.html</filename>
    <member kind="typedef">
      <type>EmptyState</type>
      <name>State</name>
      <anchorfile>structshark_1_1_fast_sigmoid_neuron.html</anchorfile>
      <anchor>a9d022ca2a90ff999ec2c8a48be81508f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalInPlace</name>
      <anchorfile>structshark_1_1_fast_sigmoid_neuron.html</anchorfile>
      <anchor>a26b41bae981ea17bc21b050bd1294ae1</anchor>
      <arglist>(Arg &amp;arg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalInPlace</name>
      <anchorfile>structshark_1_1_fast_sigmoid_neuron.html</anchorfile>
      <anchor>aeef1599cf1ebe52a8307c57fe8e0bd58</anchor>
      <arglist>(Arg &amp;arg, State &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyDerivative</name>
      <anchorfile>structshark_1_1_fast_sigmoid_neuron.html</anchorfile>
      <anchor>a94d4a892f50313b8117b7fae2a5c58a1</anchor>
      <arglist>(Output const &amp;output, Derivative &amp;der, State const &amp;state) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::FisherLDA</name>
    <filename>classshark_1_1_fisher_l_d_a.html</filename>
    <base>AbstractTrainer&lt; LinearModel&lt;&gt;, unsigned int &gt;</base>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL</type>
      <name>FisherLDA</name>
      <anchorfile>classshark_1_1_fisher_l_d_a.html</anchorfile>
      <anchor>ab4c3b1ab384d843edbac48ad473b269f</anchor>
      <arglist>(bool whitening=false, std::size_t subspaceDimension=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_fisher_l_d_a.html</anchorfile>
      <anchor>affb0188e86c275c85a6ebd6f154ff0e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubspaceDimensions</name>
      <anchorfile>classshark_1_1_fisher_l_d_a.html</anchorfile>
      <anchor>af8f8c3a891ece6c53cf53cf14c99bc67</anchor>
      <arglist>(std::size_t dimensions)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>subspaceDimensions</name>
      <anchorfile>classshark_1_1_fisher_l_d_a.html</anchorfile>
      <anchor>a1813d2f5726649dc33a4e212ded2072e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>whitening</name>
      <anchorfile>classshark_1_1_fisher_l_d_a.html</anchorfile>
      <anchor>a1c26c9088f95cd2c16993da0181d2d09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWhitening</name>
      <anchorfile>classshark_1_1_fisher_l_d_a.html</anchorfile>
      <anchor>a41aad94f4745de9e508b634d6d70a3c4</anchor>
      <arglist>(bool newWhitening)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_fisher_l_d_a.html</anchorfile>
      <anchor>ad3bc8d880446350e815a79d63ef95053</anchor>
      <arglist>(LinearModel&lt;&gt; &amp;model, LabeledData&lt; RealVector, unsigned int &gt; const &amp;dataset)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>meanAndScatter</name>
      <anchorfile>classshark_1_1_fisher_l_d_a.html</anchorfile>
      <anchor>ab5f3eb6ed8d527290ef15fb3579c90ec</anchor>
      <arglist>(LabeledData&lt; RealVector, unsigned int &gt; const &amp;dataset, RealVector &amp;mean, RealMatrix &amp;scatter)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_whitening</name>
      <anchorfile>classshark_1_1_fisher_l_d_a.html</anchorfile>
      <anchor>a51c21f980e6c7fba606824aa032ac914</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_subspaceDimensions</name>
      <anchorfile>classshark_1_1_fisher_l_d_a.html</anchorfile>
      <anchor>a45e7b8a37cb5c2a64f411e82667d0fb6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::Individual::FitnessOrdering</name>
    <filename>structshark_1_1_individual_1_1_fitness_ordering.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_individual_1_1_fitness_ordering.html</anchorfile>
      <anchor>ad7a83da604cd65a17137fe7d14327e74</anchor>
      <arglist>(Individual const &amp;individual1, Individual const &amp;individual2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::Fonseca</name>
    <filename>structshark_1_1benchmarks_1_1_fonseca.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>Fonseca</name>
      <anchorfile>structshark_1_1benchmarks_1_1_fonseca.html</anchorfile>
      <anchor>a4e57e4be62a97313fe7f88ba1f40b246</anchor>
      <arglist>(std::size_t numVariables)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_fonseca.html</anchorfile>
      <anchor>ac47881ea91eef66dba36f1612af989d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_fonseca.html</anchorfile>
      <anchor>accfd785a0c688c0f4d63e87e36813ce1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_fonseca.html</anchorfile>
      <anchor>a3772896c7492c488c6e0994ebaf4c641</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_fonseca.html</anchorfile>
      <anchor>ac9d13291d66a2c1d9860fe592e638e11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_fonseca.html</anchorfile>
      <anchor>a83c3656d7e090e71639fd7824b08df38</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_fonseca.html</anchorfile>
      <anchor>a2d635b3d70fe1fad575a4a9d9bf65a6b</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::statistics::FractionMissing</name>
    <filename>classshark_1_1statistics_1_1_fraction_missing.html</filename>
    <base>shark::statistics::BaseStatisticsObject</base>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1statistics_1_1_fraction_missing.html</anchorfile>
      <anchor>a671672c794574c1c411aa40d0f27332b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>statistics</name>
      <anchorfile>classshark_1_1statistics_1_1_fraction_missing.html</anchorfile>
      <anchor>abe8988ab94d3e0f526ec44d4f9499317</anchor>
      <arglist>(std::vector&lt; RealVector &gt; const &amp;points) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::GaussianKernelMatrix</name>
    <filename>classshark_1_1_gaussian_kernel_matrix.html</filename>
    <templarg>class T</templarg>
    <templarg>class CacheType</templarg>
    <member kind="typedef">
      <type>CacheType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_gaussian_kernel_matrix.html</anchorfile>
      <anchor>a6213a65d1bdb691ab6cd5030a2b847c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>InputType</name>
      <anchorfile>classshark_1_1_gaussian_kernel_matrix.html</anchorfile>
      <anchor>a2fb4239f6594b8dae54b61724e9a0b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianKernelMatrix</name>
      <anchorfile>classshark_1_1_gaussian_kernel_matrix.html</anchorfile>
      <anchor>a767b86dbac41de377ba0a53a16706dbe</anchor>
      <arglist>(double gamma, Data&lt; InputType &gt; const &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_gaussian_kernel_matrix.html</anchorfile>
      <anchor>a307ae446e644aab67f655efd5c7e4bc6</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>entry</name>
      <anchorfile>classshark_1_1_gaussian_kernel_matrix.html</anchorfile>
      <anchor>aa9a70aae17d2b5de64916c62a4637f9f</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>classshark_1_1_gaussian_kernel_matrix.html</anchorfile>
      <anchor>aac169d6b44199778c9a15f3434fc0a09</anchor>
      <arglist>(std::size_t i, std::size_t start, std::size_t end, QpFloatType *storage) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matrix</name>
      <anchorfile>classshark_1_1_gaussian_kernel_matrix.html</anchorfile>
      <anchor>a8a098cfdca9f397c829b51d7063a6e6b</anchor>
      <arglist>(blas::matrix_expression&lt; M, blas::cpu_tag &gt; &amp;storage) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipColumnsAndRows</name>
      <anchorfile>classshark_1_1_gaussian_kernel_matrix.html</anchorfile>
      <anchor>ac3aa3241f650b742bd675d3858b2a5f1</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_gaussian_kernel_matrix.html</anchorfile>
      <anchor>ac86ec962bc2d4f3d9e8a09a18f16d06f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>getAccessCount</name>
      <anchorfile>classshark_1_1_gaussian_kernel_matrix.html</anchorfile>
      <anchor>af1b1c4a3db861ee77657d07f3c8f048d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetAccessCount</name>
      <anchorfile>classshark_1_1_gaussian_kernel_matrix.html</anchorfile>
      <anchor>ad88e08e23144f2ccf148f35a5b357cfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Data&lt; InputType &gt;::const_element_range::iterator</type>
      <name>PointerType</name>
      <anchorfile>classshark_1_1_gaussian_kernel_matrix.html</anchorfile>
      <anchor>a75fa1e1c877b9f52b7934e7fe4905ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; PointerType &gt;</type>
      <name>x</name>
      <anchorfile>classshark_1_1_gaussian_kernel_matrix.html</anchorfile>
      <anchor>aff9adedf4ff0258147a71014bd5a43fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_squaredNorms</name>
      <anchorfile>classshark_1_1_gaussian_kernel_matrix.html</anchorfile>
      <anchor>a5ae375f1342430555363a34f1eb9ca83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_gamma</name>
      <anchorfile>classshark_1_1_gaussian_kernel_matrix.html</anchorfile>
      <anchor>a237732dde8c5e1dfb23ab82aa1262d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long long</type>
      <name>m_accessCounter</name>
      <anchorfile>classshark_1_1_gaussian_kernel_matrix.html</anchorfile>
      <anchor>a17fb1e46081d897929fb51e0b69128ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::GaussianLayer</name>
    <filename>classshark_1_1_gaussian_layer.html</filename>
    <base>shark::ISerializable</base>
    <base>shark::IParameterizable</base>
    <member kind="typedef">
      <type>RealSpace</type>
      <name>StateSpace</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>a346b4d4edf91fa583578207488fc7fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealVector</type>
      <name>SufficientStatistics</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>a4c79a6809fa54a8788fc9a73f9661759</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; SufficientStatistics &gt;::type</type>
      <name>StatisticsBatch</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>a510c15554b7b4bebec1c966e7ccaff95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const RealVector &amp;</type>
      <name>bias</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>a877687dcf1eb19c17c0a2c941e7bf0a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector &amp;</type>
      <name>bias</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>aaf729abb5e4ab69322d57f2a1b5fe39b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>ad0d61deb12bd4455dbf6546d08328b72</anchor>
      <arglist>(std::size_t newSize)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>ad2a3749d604f6e425f069726cae281d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sufficientStatistics</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>a0e768ac30ba61b25220fa17293591d0c</anchor>
      <arglist>(Input const &amp;input, StatisticsBatch &amp;statistics, BetaVector const &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>a11e7d48c8d1b8faf811d3870d9ce818a</anchor>
      <arglist>(StatisticsBatch const &amp;statistics, Matrix &amp;state, double alpha, Rng &amp;rng) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>logProbability</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>a117e4b765db5d8b37c2446ae6451937e</anchor>
      <arglist>(StatisticsBatch const &amp;statistics, Matrix const &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix const &amp;</type>
      <name>phi</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>ab7e9bdbf26ccea6190311b81ee4741cb</anchor>
      <arglist>(Matrix const &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix const &amp;</type>
      <name>expectedPhiValue</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>a9d8d02a951be66e02b06e21c9b646ab8</anchor>
      <arglist>(StatisticsBatch const &amp;statistics) const</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix const &amp;</type>
      <name>mean</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>ad8dfcc9b50d9bae82eaae02edc4a593b</anchor>
      <arglist>(StatisticsBatch const &amp;statistics) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>energyTerm</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>ae920fde3c4ed485452214e90dabbadd4</anchor>
      <arglist>(Matrix const &amp;state, BetaVector const &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>logMarginalize</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>ada4d3177d4f9f4befe18168f9281ae47</anchor>
      <arglist>(const Input &amp;inputs, double beta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expectedParameterDerivative</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>a04bb5c1a6335d0d2b199804875c0ceb8</anchor>
      <arglist>(Vector &amp;derivative, SampleBatch const &amp;samples, Vector2 const &amp;weights) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parameterDerivative</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>a0fb9583b9a3316795085314c93499e08</anchor>
      <arglist>(Vector &amp;derivative, SampleBatch const &amp;samples, WeightVector const &amp;weights) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>a4dbab4818dff8ee8011b94713513bf4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>a9ec36fc2567fe4b55fb2b976baea9be4</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>a4282e99234da5b7ee7de906abd2037cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>a8c717e6c37de891dd44a1a4640d589a0</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_gaussian_layer.html</anchorfile>
      <anchor>af6a8b46ec5a2bbef8c4fce3c17ddd565</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::GaussianRbfKernel</name>
    <filename>classshark_1_1_gaussian_rbf_kernel.html</filename>
    <templarg>class InputType</templarg>
    <base>shark::AbstractKernelFunction</base>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>a7d064811cbd4b5b0794a52ac6db459df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstInputReference</type>
      <name>ConstInputReference</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>a55e84483f00331c438161ea1e27894cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstBatchInputReference</type>
      <name>ConstBatchInputReference</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>a1c968d5375b980746aaf76203b831ee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianRbfKernel</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>a9c88ec01375ff1ffbf6b55d812c82107</anchor>
      <arglist>(double gamma=1.0, bool unconstrained=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>a916c76c0077640e12e95ffe4a46aa2c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>a10d28ce6e3267a9816007bd6aa5e5ed9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>a42aa93855cb79f438c94aed1b910f469</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>ad7368ea742fb856b0ca846684a18bc3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>aed0a3d8520b5c08499be99e860f2b2c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sigma</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>af6df6761901876c48b9318b09ceb2f49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGamma</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>a352a91e30742cfd02950472f3879eb41</anchor>
      <arglist>(double gamma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSigma</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>a09f0c248a5fb795f26b1d3295d2d47c7</anchor>
      <arglist>(double sigma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>a08353ce4a1575e9dc100e25a71b8643f</anchor>
      <arglist>(InArchive &amp;ar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>a4fd68f15eb82ff3894f4077d0cb2d284</anchor>
      <arglist>(OutArchive &amp;ar) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>a5104097639bdf4b8105c548144e87e50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>a9322aa6046cf102df6fcb2b2f84700aa</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>a055097b043074a5113dc7cb42d506cd9</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>a86e172ceab784cc77953e8d9096db0a7</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>ae3fafcbea6b5beb05aa0474f02ae5f3f</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficients, State const &amp;state, RealVector &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedInputDerivative</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>a31bb55db7ececca83348244ce1d20a78</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficientsX2, State const &amp;state, BatchInputType &amp;gradient) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_gamma</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>a7e4fbf6c367dd4adfddc85c7745cc655</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_unconstrained</name>
      <anchorfile>classshark_1_1_gaussian_rbf_kernel.html</anchorfile>
      <anchor>ab2c897f864da671ebcdaf7051a87cbd1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::GaussianTaskKernel</name>
    <filename>classshark_1_1_gaussian_task_kernel.html</filename>
    <templarg>class InputTypeT</templarg>
    <base>shark::DiscreteKernel</base>
    <member kind="typedef">
      <type>InputTypeT</type>
      <name>InputType</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>a39fef0a907da511f9b3e3c362a6417df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MultiTaskSample&lt; InputType &gt;</type>
      <name>MultiTaskSampleType</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>a74d917dde073cfd8b0e089073191458d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>a5efa4d99f65019b7b91fe009d032b8ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianTaskKernel</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>ad3cb825170b89942732ef99333e90ed3</anchor>
      <arglist>(Data&lt; MultiTaskSampleType &gt; const &amp;data, std::size_t tasks, KernelType &amp;inputkernel, double gamma)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>afcf414a6503122bed82e17c8f242a5eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>aa2b81431e43f111b7ff8d3b6ea9eda58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>a2529001b1f43ca4cd17625dc793e6f6a</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>a9d09922eb837683653e3d8db6bffd797</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfTasks</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>acd73ed4a70e91cc3d8f85c70fac37247</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>a72c07dd2a07d2b10033b758f43ba0fb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sigma</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>acddb38cbf7f7eb1ddb915020cacd9416</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGamma</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>a4fa4e4f015f87d9ec01865c4f9ecbe39</anchor>
      <arglist>(double gamma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>a0203577db9bacc51f8e9516419ae8f66</anchor>
      <arglist>(double sigma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>ac89541fe765cdc20608138848b66ac59</anchor>
      <arglist>(InArchive &amp;ar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>aa82b43af690db009d1a2c0f052451f29</anchor>
      <arglist>(OutArchive &amp;ar) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeMatrix</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>aefbd61ad0c2f8c4adb06669bd49a41f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Data&lt; MultiTaskSampleType &gt; const  &amp;</type>
      <name>m_data</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>a5e8007b13b2c708f693b06cd48872909</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KernelType *</type>
      <name>mpe_inputKernel</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>a56ca3c04e44896711e14dbea30325c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_gamma</name>
      <anchorfile>classshark_1_1_gaussian_task_kernel.html</anchorfile>
      <anchor>a5de378357c9dc154b1eca425849c1f67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::GeneralizationLoss</name>
    <filename>classshark_1_1_generalization_loss.html</filename>
    <templarg>class PointType</templarg>
    <base>shark::AbstractStoppingCriterion</base>
    <member kind="typedef">
      <type>ValidatedSingleObjectiveResultSet&lt; PointType &gt;</type>
      <name>ResultSet</name>
      <anchorfile>classshark_1_1_generalization_loss.html</anchorfile>
      <anchor>acbef2a032c71c0a28a69b74923dfe39d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizationLoss</name>
      <anchorfile>classshark_1_1_generalization_loss.html</anchorfile>
      <anchor>a9e9301fda04d339f9ec398f1a10deff1</anchor>
      <arglist>(double maxLoss)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stop</name>
      <anchorfile>classshark_1_1_generalization_loss.html</anchorfile>
      <anchor>aad6c1748d44692f8163321bb12b4e80e</anchor>
      <arglist>(const ResultSet &amp;set)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classshark_1_1_generalization_loss.html</anchorfile>
      <anchor>a986240304b8229257327128e5a35bc61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>classshark_1_1_generalization_loss.html</anchorfile>
      <anchor>a4bf2bb403942d239346e1733e0ed56a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_minTraining</name>
      <anchorfile>classshark_1_1_generalization_loss.html</anchorfile>
      <anchor>ad86076d6de3470bf35a4f9993de65ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_minValidation</name>
      <anchorfile>classshark_1_1_generalization_loss.html</anchorfile>
      <anchor>a6f6f92bfad663f79099cad36ba849d1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_maxLoss</name>
      <anchorfile>classshark_1_1_generalization_loss.html</anchorfile>
      <anchor>a0b5d786c4d3dde585c7fcf0f68ad2f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_gl</name>
      <anchorfile>classshark_1_1_generalization_loss.html</anchorfile>
      <anchor>a24c4c4191842c84b3e74aeae1ed9477f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::GeneralizationQuotient</name>
    <filename>classshark_1_1_generalization_quotient.html</filename>
    <templarg>class PointType</templarg>
    <base>shark::AbstractStoppingCriterion</base>
    <member kind="typedef">
      <type>ValidatedSingleObjectiveResultSet&lt; PointType &gt;</type>
      <name>ResultSet</name>
      <anchorfile>classshark_1_1_generalization_quotient.html</anchorfile>
      <anchor>a374f20c6f4a96f98879266b5d4798d1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizationQuotient</name>
      <anchorfile>classshark_1_1_generalization_quotient.html</anchorfile>
      <anchor>ae63e3297585fd87b441daa3efcfa9099</anchor>
      <arglist>(std::size_t intervalSize, double maxLoss)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stop</name>
      <anchorfile>classshark_1_1_generalization_quotient.html</anchorfile>
      <anchor>a33ce099f70c725a260a7bf19748fb15a</anchor>
      <arglist>(ResultSet const &amp;set)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classshark_1_1_generalization_quotient.html</anchorfile>
      <anchor>a9b4a09253f251d327ad61a9667a67582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_minTraining</name>
      <anchorfile>classshark_1_1_generalization_quotient.html</anchorfile>
      <anchor>a756726c29b9de2d8fea5e8e7fb6c4f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_maxLoss</name>
      <anchorfile>classshark_1_1_generalization_quotient.html</anchorfile>
      <anchor>a31f167df791195928dcdaf5873949330</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_meanPerformance</name>
      <anchorfile>classshark_1_1_generalization_quotient.html</anchorfile>
      <anchor>a5da3ce068ba4d32faf01004a11efdf05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::queue&lt; double &gt;</type>
      <name>m_interval</name>
      <anchorfile>classshark_1_1_generalization_quotient.html</anchorfile>
      <anchor>afc7ae6d5d12dd3a194b598c5f77683ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_intervalSize</name>
      <anchorfile>classshark_1_1_generalization_quotient.html</anchorfile>
      <anchor>a44caaabadd2928c7c7b9441dd1809724</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::GeneralQuadraticProblem</name>
    <filename>classshark_1_1_general_quadratic_problem.html</filename>
    <templarg>class MatrixT</templarg>
    <member kind="typedef">
      <type>MatrixT</type>
      <name>MatrixType</name>
      <anchorfile>classshark_1_1_general_quadratic_problem.html</anchorfile>
      <anchor>adc77a7278f5f0f3352507ff106170222</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::QpFloatType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_general_quadratic_problem.html</anchorfile>
      <anchor>a4d39a65d53e312e8f6670bca88acfcdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralQuadraticProblem</name>
      <anchorfile>classshark_1_1_general_quadratic_problem.html</anchorfile>
      <anchor>a5fac3481c122b828c0fbdc1f0dd7ad58</anchor>
      <arglist>(MatrixType &amp;quadratic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralQuadraticProblem</name>
      <anchorfile>classshark_1_1_general_quadratic_problem.html</anchorfile>
      <anchor>aeeb68a46c6b9d19b029fba3b415e0c53</anchor>
      <arglist>(MatrixType &amp;quadratic, Data&lt; unsigned int &gt; const &amp;labels, Data&lt; double &gt; const &amp;weights, RealVector const &amp;regularizers)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>dimensions</name>
      <anchorfile>classshark_1_1_general_quadratic_problem.html</anchorfile>
      <anchor>a170d8bc7b59295225e50ef670c93d12b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipCoordinates</name>
      <anchorfile>classshark_1_1_general_quadratic_problem.html</anchorfile>
      <anchor>a05d69430848ddcad3356bc5721f89847</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleBoxConstraints</name>
      <anchorfile>classshark_1_1_general_quadratic_problem.html</anchorfile>
      <anchor>ab443ebce2edcc29998fdc12ad1e59ea5</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="variable">
      <type>MatrixType &amp;</type>
      <name>quadratic</name>
      <anchorfile>classshark_1_1_general_quadratic_problem.html</anchorfile>
      <anchor>ab9f7c176af3174da94f5e3278da833ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>linear</name>
      <anchorfile>classshark_1_1_general_quadratic_problem.html</anchorfile>
      <anchor>a6238469347dc713767559ec056bba357</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>alpha</name>
      <anchorfile>classshark_1_1_general_quadratic_problem.html</anchorfile>
      <anchor>a23c9f698d8e9fe751120469495bf06dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>diagonal</name>
      <anchorfile>classshark_1_1_general_quadratic_problem.html</anchorfile>
      <anchor>a1beb985520dc9f49db3408e22918fb03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>permutation</name>
      <anchorfile>classshark_1_1_general_quadratic_problem.html</anchorfile>
      <anchor>a6825de8bb886daad689839d3c7986713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>boxMin</name>
      <anchorfile>classshark_1_1_general_quadratic_problem.html</anchorfile>
      <anchor>aa9f1ae2df5eaaf432872ded870d8787d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>boxMax</name>
      <anchorfile>classshark_1_1_general_quadratic_problem.html</anchorfile>
      <anchor>a469feeb215ab016a23c930d120071074</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::GibbsOperator</name>
    <filename>classshark_1_1_gibbs_operator.html</filename>
    <templarg>class RBMType</templarg>
    <member kind="typedef">
      <type>RBMType</type>
      <name>RBM</name>
      <anchorfile>classshark_1_1_gibbs_operator.html</anchorfile>
      <anchor>a9de44a00cd05bc1736b0503d25af6bd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::GibbsSample&lt; typename RBMType::HiddenType::SufficientStatistics &gt;</type>
      <name>HiddenSample</name>
      <anchorfile>classshark_1_1_gibbs_operator.html</anchorfile>
      <anchor>abcd709448bd459283e37ddde0d15e7fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::GibbsSample&lt; typename RBMType::VisibleType::SufficientStatistics &gt;</type>
      <name>VisibleSample</name>
      <anchorfile>classshark_1_1_gibbs_operator.html</anchorfile>
      <anchor>a41de7989f5420650970b7b4f024b7356</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; HiddenSample &gt;::type</type>
      <name>HiddenSampleBatch</name>
      <anchorfile>classshark_1_1_gibbs_operator.html</anchorfile>
      <anchor>a5b57c0bacafe33d8d3ed614d4dd5d6dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; VisibleSample &gt;::type</type>
      <name>VisibleSampleBatch</name>
      <anchorfile>classshark_1_1_gibbs_operator.html</anchorfile>
      <anchor>a0c5a9c2d399cebdb3e036a5803a1d28b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GibbsOperator</name>
      <anchorfile>classshark_1_1_gibbs_operator.html</anchorfile>
      <anchor>a0ec0371d4776aba60fc305b8f10c53fb</anchor>
      <arglist>(RBM *rbm, double alphaVisible=0, double alphaHidden=0)</arglist>
    </member>
    <member kind="function">
      <type>RBM *</type>
      <name>rbm</name>
      <anchorfile>classshark_1_1_gibbs_operator.html</anchorfile>
      <anchor>a0f5eaa3488fc9152a26be8c4a9c11c41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>precomputeHidden</name>
      <anchorfile>classshark_1_1_gibbs_operator.html</anchorfile>
      <anchor>a119948b017a9d29cdf5f10e20f4ed556</anchor>
      <arglist>(HiddenSampleBatch &amp;hiddenBatch, VisibleSampleBatch &amp;visibleBatch, BetaVector const &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>precomputeVisible</name>
      <anchorfile>classshark_1_1_gibbs_operator.html</anchorfile>
      <anchor>a196f8674930d1d17709900801f48243d</anchor>
      <arglist>(HiddenSampleBatch &amp;hiddenBatch, VisibleSampleBatch &amp;visibleBatch, BetaVector const &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleHidden</name>
      <anchorfile>classshark_1_1_gibbs_operator.html</anchorfile>
      <anchor>ab653cc8b59970aa87a87c9c633ed3c14</anchor>
      <arglist>(HiddenSampleBatch &amp;sampleBatch) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleVisible</name>
      <anchorfile>classshark_1_1_gibbs_operator.html</anchorfile>
      <anchor>a4e93543dc92f11037c60bedb0451d9be</anchor>
      <arglist>(VisibleSampleBatch &amp;sampleBatch) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stepVH</name>
      <anchorfile>classshark_1_1_gibbs_operator.html</anchorfile>
      <anchor>a25136037254735170f4abf1659a0c56f</anchor>
      <arglist>(HiddenSampleBatch &amp;hiddenBatch, VisibleSampleBatch &amp;visibleBatch, std::size_t numberOfSteps, BetaVector const &amp;beta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createSample</name>
      <anchorfile>classshark_1_1_gibbs_operator.html</anchorfile>
      <anchor>a6cf9658a4eb72ac3dc3dbaa44a51c726</anchor>
      <arglist>(HiddenSampleBatch &amp;hiddenBatch, VisibleSampleBatch &amp;visibleBatch, States const &amp;states, BetaVector const &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createSample</name>
      <anchorfile>classshark_1_1_gibbs_operator.html</anchorfile>
      <anchor>a638bbd0ab5f18d7064c2d6fb9a4ac1db</anchor>
      <arglist>(HiddenSampleBatch &amp;hiddenBatch, VisibleSampleBatch &amp;visibleBatch, States const &amp;states) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>calculateEnergy</name>
      <anchorfile>classshark_1_1_gibbs_operator.html</anchorfile>
      <anchor>a8ba4607be52c15e7e69f8c10fa9ccf65</anchor>
      <arglist>(HiddenSampleBatch const &amp;hiddenBatch, VisibleSampleBatch const &amp;visibleBatch) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>classshark_1_1_gibbs_operator.html</anchorfile>
      <anchor>a5b86661eecf7572addeb9c6c2ea50711</anchor>
      <arglist>(double newAlphaVisible, double newAlphaHidden)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::GridSearch</name>
    <filename>classshark_1_1_grid_search.html</filename>
    <base>AbstractSingleObjectiveOptimizer&lt; RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>GridSearch</name>
      <anchorfile>classshark_1_1_grid_search.html</anchorfile>
      <anchor>a165ed5b1d76b1946e377b454f1cf8477</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_grid_search.html</anchorfile>
      <anchor>a8cc649ca8e82a43be3241188771caae8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>classshark_1_1_grid_search.html</anchorfile>
      <anchor>abb3472e263958e425bb45b3556d52e7c</anchor>
      <arglist>(size_t params, double min, double max, size_t numSections)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>classshark_1_1_grid_search.html</anchorfile>
      <anchor>a8af5358813f9b5c6dc126ebaa70c55a8</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;min, const std::vector&lt; double &gt; &amp;max, const std::vector&lt; size_t &gt; &amp;sections)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>classshark_1_1_grid_search.html</anchorfile>
      <anchor>ad10a520a0811e4926f8830c42cd5b994</anchor>
      <arglist>(double min1, double max1, size_t sections1, double min2, double max2, size_t sections2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>classshark_1_1_grid_search.html</anchorfile>
      <anchor>a8529244e3398f7d97136436d5edad43b</anchor>
      <arglist>(double min1, double max1, size_t sections1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>classshark_1_1_grid_search.html</anchorfile>
      <anchor>a9f91e41fa7df5ccbf0a5d05747933a1c</anchor>
      <arglist>(size_t params, const std::vector&lt; double &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>classshark_1_1_grid_search.html</anchorfile>
      <anchor>a44d3092775b93a0a8a88f756501e3250</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;values)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_grid_search.html</anchorfile>
      <anchor>a8fa6193d9d0509929c827c59b62e3b3a</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_grid_search.html</anchorfile>
      <anchor>a3b6f1136e80165ecdea7e03df801f96f</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_grid_search.html</anchorfile>
      <anchor>aee57c542b7ca10f41028da93434bf316</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction, SearchPointType const &amp;startingPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignLinearRange</name>
      <anchorfile>classshark_1_1_grid_search.html</anchorfile>
      <anchor>a13c9339693b4c33f25a1842ca09aaea3</anchor>
      <arglist>(size_t index, size_t noOfSections, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignExponentialRange</name>
      <anchorfile>classshark_1_1_grid_search.html</anchorfile>
      <anchor>a9f7f3ace7fa5ad50b430ee33104e5fbc</anchor>
      <arglist>(size_t index, double factor, double exp_base, int min, int max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_grid_search.html</anchorfile>
      <anchor>afb6458a381e6b45cb8290289a573d642</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>m_nodeValues</name>
      <anchorfile>classshark_1_1_grid_search.html</anchorfile>
      <anchor>a940a5bb29971527ff6b0dc10638e13f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_configured</name>
      <anchorfile>classshark_1_1_grid_search.html</anchorfile>
      <anchor>a36538b13ff96f301f26a0c96e222e5cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::GSP</name>
    <filename>structshark_1_1benchmarks_1_1_g_s_p.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>GSP</name>
      <anchorfile>structshark_1_1benchmarks_1_1_g_s_p.html</anchorfile>
      <anchor>a25d575e35c0d221330e5960fd5b0e101</anchor>
      <arglist>(std::size_t numVariables=5)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_g_s_p.html</anchorfile>
      <anchor>afa72ad7e6ec033fedc4cd4e3b34db159</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_g_s_p.html</anchorfile>
      <anchor>a7e81d542842dd12d29af80b2a14dce16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_g_s_p.html</anchorfile>
      <anchor>a3a83eb2f4060f3b1a2a492581d81014f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_g_s_p.html</anchorfile>
      <anchor>a2ec99d52e35838039d6cc60a1f818eb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_g_s_p.html</anchorfile>
      <anchor>a3ffa87256f022adaf2ea5550fe82bbcc</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_g_s_p.html</anchorfile>
      <anchor>a10d5b471cd27155bbf91621fcdb0044b</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::HardClusteringModel</name>
    <filename>classshark_1_1_hard_clustering_model.html</filename>
    <templarg>class InputT</templarg>
    <base>ClusteringModel&lt; InputT, unsigned int &gt;</base>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_hard_clustering_model.html</anchorfile>
      <anchor>a71f92bc1bc376fd97323cda7e13a27b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_hard_clustering_model.html</anchorfile>
      <anchor>a25dc4fbdb9e66c4924d26d96305886e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::InputType</type>
      <name>InputType</name>
      <anchorfile>classshark_1_1_hard_clustering_model.html</anchorfile>
      <anchor>ae5a2913091b6b3f9265f9dc4320c103a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::OutputType</type>
      <name>OutputType</name>
      <anchorfile>classshark_1_1_hard_clustering_model.html</anchorfile>
      <anchor>a1345b47b08ac1911b5bdd6ed119b2e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HardClusteringModel</name>
      <anchorfile>classshark_1_1_hard_clustering_model.html</anchorfile>
      <anchor>aaeed6615968b23073897f27b7aca8926</anchor>
      <arglist>(ClusteringType *clustering)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_hard_clustering_model.html</anchorfile>
      <anchor>a895ab18a13417a1bd73525885bc7da73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_hard_clustering_model.html</anchorfile>
      <anchor>a39c6ffa9343fa4f64d51291879a4b653</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_hard_clustering_model.html</anchorfile>
      <anchor>a2036e2c4b73132196300e7d48444dc38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_hard_clustering_model.html</anchorfile>
      <anchor>a9125dbc5b7937b976adbb8c9867b77a2</anchor>
      <arglist>(InputType const &amp;pattern, OutputType &amp;output) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_hard_clustering_model.html</anchorfile>
      <anchor>ae05f53c008a1bc11b6a9ae0330798a98</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::HierarchicalClustering</name>
    <filename>classshark_1_1_hierarchical_clustering.html</filename>
    <templarg>class InputT</templarg>
    <base>shark::AbstractClustering</base>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_hierarchical_clustering.html</anchorfile>
      <anchor>a458996c3186855b3f526d3ea6cb5619d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_hierarchical_clustering.html</anchorfile>
      <anchor>af8ffb5865a040974a11cdd27f0c39ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HierarchicalClustering</name>
      <anchorfile>classshark_1_1_hierarchical_clustering.html</anchorfile>
      <anchor>a5b862ca790dce9a6988de4ddff50c278</anchor>
      <arglist>(const tree_type *tree)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_hierarchical_clustering.html</anchorfile>
      <anchor>a8945b0b34beae2ea1206f31593b5f814</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_hierarchical_clustering.html</anchorfile>
      <anchor>abee669691bdffb90189c70cc49974e78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfClusters</name>
      <anchorfile>classshark_1_1_hierarchical_clustering.html</anchorfile>
      <anchor>a39b55be35d11299ad57826de89551e4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BatchOutputType</type>
      <name>hardMembership</name>
      <anchorfile>classshark_1_1_hierarchical_clustering.html</anchorfile>
      <anchor>af55379385229c1619311fc42d6033a0c</anchor>
      <arglist>(BatchInputType const &amp;patterns) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_hierarchical_clustering.html</anchorfile>
      <anchor>a9705432311cb424191f62237f9066238</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_hierarchical_clustering.html</anchorfile>
      <anchor>a5e566b37e064fd7f1a4d8df523fbad34</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_hierarchical_clustering.html</anchorfile>
      <anchor>a80de7a7c1da8c2bb47a563f27c1bdb58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tree_type const  *</type>
      <name>mep_tree</name>
      <anchorfile>classshark_1_1_hierarchical_clustering.html</anchorfile>
      <anchor>a385537eec18cd6338802acb9d4f39078</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::Himmelblau</name>
    <filename>structshark_1_1benchmarks_1_1_himmelblau.html</filename>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>Himmelblau</name>
      <anchorfile>structshark_1_1benchmarks_1_1_himmelblau.html</anchorfile>
      <anchor>ad2379070c00da1a8a548ab2ea6d0be18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_himmelblau.html</anchorfile>
      <anchor>a886fcae54566b96d2c0c02745f86f508</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_himmelblau.html</anchorfile>
      <anchor>a8a19c463127bbf938a4f4d0ae6c517d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>structshark_1_1benchmarks_1_1_himmelblau.html</anchorfile>
      <anchor>ab023c0be9b7d3f291df132f0f315c0d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_himmelblau.html</anchorfile>
      <anchor>a0c91b82fa03768ae5c3aac9cee944013</anchor>
      <arglist>(const SearchPointType &amp;p) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::HingeLoss</name>
    <filename>classshark_1_1_hinge_loss.html</filename>
    <base>AbstractLoss&lt; unsigned int, RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>HingeLoss</name>
      <anchorfile>classshark_1_1_hinge_loss.html</anchorfile>
      <anchor>a5a99404ec85a96a17c890b13d08b3011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_hinge_loss.html</anchorfile>
      <anchor>ab4924162434e93980e73a399805b1e77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_hinge_loss.html</anchorfile>
      <anchor>a0143b583b4942d11752ca658032f1394</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_hinge_loss.html</anchorfile>
      <anchor>ae8a772f849e11c33a20b281675b028dd</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions, BatchOutputType &amp;gradient) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::HMGSelectionCriterion</name>
    <filename>classshark_1_1_h_m_g_selection_criterion.html</filename>
    <member kind="function">
      <type></type>
      <name>HMGSelectionCriterion</name>
      <anchorfile>classshark_1_1_h_m_g_selection_criterion.html</anchorfile>
      <anchor>ac808db7f292558e743cbe39564a1db22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_h_m_g_selection_criterion.html</anchorfile>
      <anchor>ab5378debaa7a2147d37bc14edfb76bcc</anchor>
      <arglist>(Problem &amp;problem, std::size_t &amp;i, std::size_t &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classshark_1_1_h_m_g_selection_criterion.html</anchorfile>
      <anchor>af4b4e8aa1266e0e9f5a7a33f1bd5caf3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::HuberLoss</name>
    <filename>classshark_1_1_huber_loss.html</filename>
    <base>AbstractLoss&lt; RealVector, RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>HuberLoss</name>
      <anchorfile>classshark_1_1_huber_loss.html</anchorfile>
      <anchor>a2a42e507982803208e0bc8f48fb94a2b</anchor>
      <arglist>(double delta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_huber_loss.html</anchorfile>
      <anchor>a9193d7d11ccc7b84a830b26ca12f21f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_huber_loss.html</anchorfile>
      <anchor>ada8b44c0681261618d2878f9ff41e718</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_huber_loss.html</anchorfile>
      <anchor>afbe4794c082f6ec570a9eab8fb1f8b2a</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions, BatchOutputType &amp;gradient) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::HypervolumeApproximator</name>
    <filename>structshark_1_1_hypervolume_approximator.html</filename>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_hypervolume_approximator.html</anchorfile>
      <anchor>a6c7042a7e0d1550769cb7d841ff35c45</anchor>
      <arglist>(Archive &amp;archive, const unsigned int version)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>epsilon</name>
      <anchorfile>structshark_1_1_hypervolume_approximator.html</anchorfile>
      <anchor>a87334159cdfae43c729c8dd02b738f1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>epsilon</name>
      <anchorfile>structshark_1_1_hypervolume_approximator.html</anchorfile>
      <anchor>a370c3d68bbfbbec92d4ca0bcfb7e79dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>delta</name>
      <anchorfile>structshark_1_1_hypervolume_approximator.html</anchorfile>
      <anchor>abfeab3928eff47a2869c542b0ed020dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>delta</name>
      <anchorfile>structshark_1_1_hypervolume_approximator.html</anchorfile>
      <anchor>affebaaa12c8b2ebd803397c157a3ec81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_hypervolume_approximator.html</anchorfile>
      <anchor>ac1bad82402367342bcb101f5d20bdfbc</anchor>
      <arglist>(Set const &amp;points, VectorType const &amp;refPoint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::HypervolumeCalculator</name>
    <filename>structshark_1_1_hypervolume_calculator.html</filename>
    <member kind="function">
      <type></type>
      <name>HypervolumeCalculator</name>
      <anchorfile>structshark_1_1_hypervolume_calculator.html</anchorfile>
      <anchor>a256ea9aa481429497727318af0aa69aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useApproximation</name>
      <anchorfile>structshark_1_1_hypervolume_calculator.html</anchorfile>
      <anchor>a3ab83da90b82f39bc53e1da85fba9d75</anchor>
      <arglist>(bool useApproximation)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>approximationEpsilon</name>
      <anchorfile>structshark_1_1_hypervolume_calculator.html</anchorfile>
      <anchor>a3ad379a89066eb0490896b3d2a2415b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>approximationEpsilon</name>
      <anchorfile>structshark_1_1_hypervolume_calculator.html</anchorfile>
      <anchor>a966d065ae8e3bd27a94c9f2edae7373b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>approximationDelta</name>
      <anchorfile>structshark_1_1_hypervolume_calculator.html</anchorfile>
      <anchor>a089a678e12c3772b6e50abab495bdcc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>approximationDelta</name>
      <anchorfile>structshark_1_1_hypervolume_calculator.html</anchorfile>
      <anchor>a58f7ff1cbe7c9ba7f7aa7562d11eabb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_hypervolume_calculator.html</anchorfile>
      <anchor>a2bc35c52be301e83b4a2de2a5d8723e2</anchor>
      <arglist>(Archive &amp;archive, const unsigned int version)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_hypervolume_calculator.html</anchorfile>
      <anchor>a0bc32696c337f742123983a70fccee92</anchor>
      <arglist>(Points const &amp;points, VectorType const &amp;refPoint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::HypervolumeCalculator2D</name>
    <filename>structshark_1_1_hypervolume_calculator2_d.html</filename>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_hypervolume_calculator2_d.html</anchorfile>
      <anchor>a42dcf0f6327590ed856ccb7c3cc0526a</anchor>
      <arglist>(Set const &amp;points, VectorType const &amp;refPoint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::HypervolumeCalculator3D</name>
    <filename>structshark_1_1_hypervolume_calculator3_d.html</filename>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_hypervolume_calculator3_d.html</anchorfile>
      <anchor>a5380fba06eafd3dcd3891e8998a61882</anchor>
      <arglist>(Set const &amp;points, VectorType const &amp;refPoint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::HypervolumeCalculatorMDHOY</name>
    <filename>structshark_1_1_hypervolume_calculator_m_d_h_o_y.html</filename>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_hypervolume_calculator_m_d_h_o_y.html</anchorfile>
      <anchor>a94c88292987b665d75b1d57cc921fc6e</anchor>
      <arglist>(Set const &amp;points, VectorType const &amp;refPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>covers</name>
      <anchorfile>structshark_1_1_hypervolume_calculator_m_d_h_o_y.html</anchorfile>
      <anchor>a36ffa75e34e89103448a624928942dfc</anchor>
      <arglist>(VectorType const &amp;cuboid, VectorType const &amp;regionLow)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>partCovers</name>
      <anchorfile>structshark_1_1_hypervolume_calculator_m_d_h_o_y.html</anchorfile>
      <anchor>a4e5d2c7e7348e7bdeb0b5962e7f5241a</anchor>
      <arglist>(VectorType const &amp;cuboid, VectorType const &amp;regionUp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>containsBoundary</name>
      <anchorfile>structshark_1_1_hypervolume_calculator_m_d_h_o_y.html</anchorfile>
      <anchor>a53fe5df7055cd030bd15ab8ea7200820</anchor>
      <arglist>(VectorType const &amp;cub, VectorType const &amp;regLow, int split)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMeasure</name>
      <anchorfile>structshark_1_1_hypervolume_calculator_m_d_h_o_y.html</anchorfile>
      <anchor>a5d79a14bb35f0179b2f32b08170570cb</anchor>
      <arglist>(const VectorType &amp;regionLow, const VectorType &amp;regionUp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isPile</name>
      <anchorfile>structshark_1_1_hypervolume_calculator_m_d_h_o_y.html</anchorfile>
      <anchor>a5b245e118623fc9bb616e7ddb0f471f0</anchor>
      <arglist>(const VectorType &amp;cuboid, const VectorType &amp;regionLow, const VectorType &amp;regionUp)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>binaryToInt</name>
      <anchorfile>structshark_1_1_hypervolume_calculator_m_d_h_o_y.html</anchorfile>
      <anchor>a6c778375e99721c6553b720de8ba2323</anchor>
      <arglist>(const VectorType &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intToBinary</name>
      <anchorfile>structshark_1_1_hypervolume_calculator_m_d_h_o_y.html</anchorfile>
      <anchor>a718f1d55fa7ea4da245e6eaf686ea61e</anchor>
      <arglist>(unsigned int i, VectorType &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeTrellis</name>
      <anchorfile>structshark_1_1_hypervolume_calculator_m_d_h_o_y.html</anchorfile>
      <anchor>affaeb9fcc85d387adb0dd5eb45949c01</anchor>
      <arglist>(const VectorType &amp;regLow, const VectorType &amp;regUp, const VectorType &amp;trellis)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMedian</name>
      <anchorfile>structshark_1_1_hypervolume_calculator_m_d_h_o_y.html</anchorfile>
      <anchor>a40450b052b12c2c9e63622776e545b3d</anchor>
      <arglist>(const VectorType &amp;bounds, int length)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stream</name>
      <anchorfile>structshark_1_1_hypervolume_calculator_m_d_h_o_y.html</anchorfile>
      <anchor>afb2637455cffec61db36d6b6dd8f6096</anchor>
      <arglist>(const VectorType &amp;regionLow, const VectorType &amp;regionUp, const Set &amp;points, int split, double cover)</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>m_sqrtNoPoints</name>
      <anchorfile>structshark_1_1_hypervolume_calculator_m_d_h_o_y.html</anchorfile>
      <anchor>a90890a02c212cb709e1083d70e29fef2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::HypervolumeCalculatorMDWFG</name>
    <filename>structshark_1_1_hypervolume_calculator_m_d_w_f_g.html</filename>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_hypervolume_calculator_m_d_w_f_g.html</anchorfile>
      <anchor>ac4647af360805724fa9bf6425ed7256c</anchor>
      <arglist>(Set const &amp;points, VectorType const &amp;refPoint) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::HypervolumeContribution</name>
    <filename>structshark_1_1_hypervolume_contribution.html</filename>
    <member kind="function">
      <type></type>
      <name>HypervolumeContribution</name>
      <anchorfile>structshark_1_1_hypervolume_contribution.html</anchorfile>
      <anchor>ab804bcf6ac35e60fcfae484ce3b30b34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useApproximation</name>
      <anchorfile>structshark_1_1_hypervolume_contribution.html</anchorfile>
      <anchor>a29198ff8cda59711f36122db30a39413</anchor>
      <arglist>(bool useApproximation)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>approximationEpsilon</name>
      <anchorfile>structshark_1_1_hypervolume_contribution.html</anchorfile>
      <anchor>a256082b054ca17a3bf55857dc0513975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>approximationEpsilon</name>
      <anchorfile>structshark_1_1_hypervolume_contribution.html</anchorfile>
      <anchor>a3b68674011cf878a1c8e0053c82aa2e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>approximationDelta</name>
      <anchorfile>structshark_1_1_hypervolume_contribution.html</anchorfile>
      <anchor>ad69390eb1fc2b938ab7c4e75b29a07de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>approximationDelta</name>
      <anchorfile>structshark_1_1_hypervolume_contribution.html</anchorfile>
      <anchor>ab9c0d9bfbfd0a7290d1dad26f6b1a7c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_hypervolume_contribution.html</anchorfile>
      <anchor>a9bc3edc57e78e822481b4a20a93e33f9</anchor>
      <arglist>(Archive &amp;archive, const unsigned int version)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>smallest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution.html</anchorfile>
      <anchor>a46626da682183658b940865fd4589506</anchor>
      <arglist>(Set const &amp;points, std::size_t k, VectorType const &amp;ref) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>largest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution.html</anchorfile>
      <anchor>ad7aba98bf20f20f16135b2e2f3b5ea2b</anchor>
      <arglist>(Set const &amp;points, std::size_t k, VectorType const &amp;ref) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>smallest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution.html</anchorfile>
      <anchor>acbf96ebbdb6fb438fb2efe64b235967d</anchor>
      <arglist>(Set const &amp;points, std::size_t k) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>largest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution.html</anchorfile>
      <anchor>aeee807833c090414b2c6dc41c1f8eca6</anchor>
      <arglist>(Set const &amp;points, std::size_t k) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::HypervolumeContribution2D</name>
    <filename>structshark_1_1_hypervolume_contribution2_d.html</filename>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>smallest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution2_d.html</anchorfile>
      <anchor>a414e72cf54c537bd456e50a733ef236a</anchor>
      <arglist>(Set const &amp;points, std::size_t k, VectorType const &amp;referencePoint) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>smallest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution2_d.html</anchorfile>
      <anchor>a36fdb6a8c4dd9920976cde328eec2610</anchor>
      <arglist>(Set const &amp;points, std::size_t k) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>largest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution2_d.html</anchorfile>
      <anchor>a28762ad8d869ae3549fe4f63394de105</anchor>
      <arglist>(Set const &amp;points, std::size_t k, VectorType const &amp;referencePoint) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>largest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution2_d.html</anchorfile>
      <anchor>adc1ef190b057c3011692be5333966176</anchor>
      <arglist>(Set const &amp;points, std::size_t k) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::HypervolumeContribution3D</name>
    <filename>structshark_1_1_hypervolume_contribution3_d.html</filename>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>smallest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution3_d.html</anchorfile>
      <anchor>ac4d761c1d24708031664aff96129c043</anchor>
      <arglist>(Set const &amp;points, std::size_t k, VectorType const &amp;ref) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>smallest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution3_d.html</anchorfile>
      <anchor>ad35f30562f9b12e8e85b9f4a268d39c3</anchor>
      <arglist>(Set const &amp;points, std::size_t k) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>largest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution3_d.html</anchorfile>
      <anchor>a21b543685d2c16e733c932f8ca4f41d9</anchor>
      <arglist>(Set const &amp;points, std::size_t k, VectorType const &amp;ref) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>largest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution3_d.html</anchorfile>
      <anchor>a62366c7be907e3f5e409b010970e2913</anchor>
      <arglist>(Set const &amp;points, std::size_t k) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::HypervolumeContributionApproximator</name>
    <filename>structshark_1_1_hypervolume_contribution_approximator.html</filename>
    <class kind="struct">shark::HypervolumeContributionApproximator::Point</class>
    <member kind="function">
      <type></type>
      <name>HypervolumeContributionApproximator</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator.html</anchorfile>
      <anchor>aceb0bba3d66b599e4762a59008da544a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>delta</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator.html</anchorfile>
      <anchor>a57c159dc8900f273d0f0fd58147ee6d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>delta</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator.html</anchorfile>
      <anchor>a32cfcca40e4510e996dd41c9e3b428e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>epsilon</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator.html</anchorfile>
      <anchor>aaa63c8502accc68b992534217eb32169</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>epsilon</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator.html</anchorfile>
      <anchor>a4bc48c99de5ede9fa446b9b65403b27e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator.html</anchorfile>
      <anchor>afd86ee5e8fa2705b792017a024295c0c</anchor>
      <arglist>(Archive &amp;archive, const unsigned int version)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>smallest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator.html</anchorfile>
      <anchor>a5d9f9832db56f043a2f389ad5a386b55</anchor>
      <arglist>(Set const &amp;points, std::size_t k, VectorType const &amp;reference) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>smallest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator.html</anchorfile>
      <anchor>a6d452284d5ae1b104a992ce605e03baa</anchor>
      <arglist>(Set const &amp;points, std::size_t k) const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_startDeltaMultiplier</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator.html</anchorfile>
      <anchor>a9171724d5683e143759001a10f9bbb2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_multiplierDelta</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator.html</anchorfile>
      <anchor>a40c556d7c0d1176e67f795cb30abbcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_minimumMultiplierDelta</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator.html</anchorfile>
      <anchor>a47929916ab69b0e384479ae4c20cdb62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_gamma</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator.html</anchorfile>
      <anchor>a16d77f5544fdf01e8bfdd0427b3e00d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_errorProbability</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator.html</anchorfile>
      <anchor>a7f253b29cea34ab461913fdf1e77017d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_errorBound</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator.html</anchorfile>
      <anchor>aa4ee55eed212e9d241500366342088d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::HypervolumeContributionMD</name>
    <filename>structshark_1_1_hypervolume_contribution_m_d.html</filename>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>smallest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_m_d.html</anchorfile>
      <anchor>acfeefc0f057455a384e88070a9383e5e</anchor>
      <arglist>(Set const &amp;points, std::size_t k, VectorType const &amp;ref) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>largest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_m_d.html</anchorfile>
      <anchor>acaab1a44fb4b791251f0fbfaa69bb55d</anchor>
      <arglist>(Set const &amp;points, std::size_t k, VectorType const &amp;ref) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>smallest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_m_d.html</anchorfile>
      <anchor>a272194e23049c553ea047be4e1bc9de1</anchor>
      <arglist>(Set const &amp;points, std::size_t k) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyValuePair&lt; double, std::size_t &gt; &gt;</type>
      <name>largest</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_m_d.html</anchorfile>
      <anchor>aa4acdc6381339c6feeb3766a3eaa173e</anchor>
      <arglist>(Set const &amp;points, std::size_t k) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::HypervolumeIndicator</name>
    <filename>structshark_1_1_hypervolume_indicator.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>leastContributor</name>
      <anchorfile>structshark_1_1_hypervolume_indicator.html</anchorfile>
      <anchor>afb990cd72ca80aed7cd71079d39aa1ca</anchor>
      <arglist>(ParetoFrontType const &amp;front, ParetoArchive const &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>leastContributors</name>
      <anchorfile>structshark_1_1_hypervolume_indicator.html</anchorfile>
      <anchor>ae06eafa811c6d1af216ef947491516c9</anchor>
      <arglist>(ParetoFrontType const &amp;front, ParetoArchive const &amp;archive, std::size_t K) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structshark_1_1_hypervolume_indicator.html</anchorfile>
      <anchor>a3f66955d9e917b7a569608238b538827</anchor>
      <arglist>(std::size_t, std::size_t, random &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReference</name>
      <anchorfile>structshark_1_1_hypervolume_indicator.html</anchorfile>
      <anchor>ada98460c62e1a24938ef9c7049df68ec</anchor>
      <arglist>(RealVector const &amp;newReference)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useApproximation</name>
      <anchorfile>structshark_1_1_hypervolume_indicator.html</anchorfile>
      <anchor>a9012e8742bcb504e20fad699b4f6aa41</anchor>
      <arglist>(bool useApproximation)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>approximationEpsilon</name>
      <anchorfile>structshark_1_1_hypervolume_indicator.html</anchorfile>
      <anchor>a5e0a00ec4eec8371553fd6971352212e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>approximationEpsilon</name>
      <anchorfile>structshark_1_1_hypervolume_indicator.html</anchorfile>
      <anchor>a92ee237bb68db2d85931b09424d96b7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>approximationDelta</name>
      <anchorfile>structshark_1_1_hypervolume_indicator.html</anchorfile>
      <anchor>a8e06f7dec5c62471fd105e6609442bb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>approximationDelta</name>
      <anchorfile>structshark_1_1_hypervolume_indicator.html</anchorfile>
      <anchor>aa798472c7a468d095a0f52c6c90de7e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_hypervolume_indicator.html</anchorfile>
      <anchor>aae8e6f737532a0b949a771f9d2be4391</anchor>
      <arglist>(Archive &amp;archive, const unsigned int version)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::HypervolumeSubsetSelection2D</name>
    <filename>structshark_1_1_hypervolume_subset_selection2_d.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_hypervolume_subset_selection2_d.html</anchorfile>
      <anchor>aa0aa8bb2bc003bc32d6a636895009ae4</anchor>
      <arglist>(Set const &amp;points, SelectedSet &amp;selected, std::size_t k, VectorType const &amp;refPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_hypervolume_subset_selection2_d.html</anchorfile>
      <anchor>a52fe369d85589e88caa8fde88615d253</anchor>
      <arglist>(Set const &amp;points, SelectedSet &amp;selected, std::size_t k)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::IHR1</name>
    <filename>structshark_1_1benchmarks_1_1_i_h_r1.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>IHR1</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r1.html</anchorfile>
      <anchor>aac9602211366da05e8268615edef5908</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r1.html</anchorfile>
      <anchor>a8f15de9125f8bbb77b5300bd331d75e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r1.html</anchorfile>
      <anchor>a559427fdb914834a4174072b9bf11758</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r1.html</anchorfile>
      <anchor>ad2b921ea908c26b1fa16f8e68076b9d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r1.html</anchorfile>
      <anchor>ad22165cfc873ad9185c36547534b19b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r1.html</anchorfile>
      <anchor>a7d7411aaf649d927553cb2d6156a03fa</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r1.html</anchorfile>
      <anchor>a12b03c97f5968b029df2deb6f798182f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r1.html</anchorfile>
      <anchor>a6f4db8d88b5604f9884d0d00635ae82b</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>h</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r1.html</anchorfile>
      <anchor>a5c545a4be01991b36c3253de6f88416d</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>hf</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r1.html</anchorfile>
      <anchor>a09b43f2ff03e5403072bdfc38394dcee</anchor>
      <arglist>(double x, double y0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>hg</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r1.html</anchorfile>
      <anchor>ab34fa888ddbc4fc8be7e3484243e244a</anchor>
      <arglist>(double x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::IHR2</name>
    <filename>structshark_1_1benchmarks_1_1_i_h_r2.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>IHR2</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r2.html</anchorfile>
      <anchor>a0dd1aa5cb15bae215cca3dedfb98cf69</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r2.html</anchorfile>
      <anchor>a9ca8e476ee207f3f3d617e8b390286ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r2.html</anchorfile>
      <anchor>a5706a7a9802cbf0452295e529fcc8594</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r2.html</anchorfile>
      <anchor>a9d097fde181ff5ca770c0df9165ea418</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r2.html</anchorfile>
      <anchor>ad68c8771dbf27252e55a25d2f0b72ff7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r2.html</anchorfile>
      <anchor>a3a5011b68b171bdc2be98af7341268dc</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r2.html</anchorfile>
      <anchor>ac577de4262b28f14877642b2853b82e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r2.html</anchorfile>
      <anchor>a26cb44d476ad02879012ba3394af9e84</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>hf</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r2.html</anchorfile>
      <anchor>a651e742ec23e30ba953de257013cd1b7</anchor>
      <arglist>(double x, double y0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>hg</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r2.html</anchorfile>
      <anchor>a18ebca42d896d11c39246e776f73c635</anchor>
      <arglist>(double x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::IHR3</name>
    <filename>structshark_1_1benchmarks_1_1_i_h_r3.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>IHR3</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r3.html</anchorfile>
      <anchor>a72926e9f6e91ada7d023657075ec8e76</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r3.html</anchorfile>
      <anchor>ad10612d66642ed3f5a10ac3167bbb995</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r3.html</anchorfile>
      <anchor>a78e39ecb7e0ce635aa82004792493256</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r3.html</anchorfile>
      <anchor>ae3344394dbc85b0d1bdb454f4fa98b81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r3.html</anchorfile>
      <anchor>a1bae6babdbd67832188fb70db58e0633</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r3.html</anchorfile>
      <anchor>a98623bb1e0c589311d7b7afa3407841d</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r3.html</anchorfile>
      <anchor>a5790f2cce54e8082b1609d51b78063e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r3.html</anchorfile>
      <anchor>a2768160840bd165202d5fbc4c41f8354</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>h</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r3.html</anchorfile>
      <anchor>a307183c3ad7fb886942b75f8b6076fa8</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>hf</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r3.html</anchorfile>
      <anchor>aeb1ee350d72de38c281e0ca1f48e3736</anchor>
      <arglist>(double x, double y0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>hg</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r3.html</anchorfile>
      <anchor>ac71207f34a5f0049d181950d0d72f60c</anchor>
      <arglist>(double x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::IHR4</name>
    <filename>structshark_1_1benchmarks_1_1_i_h_r4.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>IHR4</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r4.html</anchorfile>
      <anchor>aaae211c1b9dfab6a07d03d9a501b1779</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r4.html</anchorfile>
      <anchor>a8a9ece914953de2ce4a9604965fc3a65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r4.html</anchorfile>
      <anchor>a9a5774107709b6037dd7c8782fdf62ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r4.html</anchorfile>
      <anchor>a00aea1c3de32b95777f13f60feeb798e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r4.html</anchorfile>
      <anchor>a9d6955c00ab012b3b7aa19fd8018d001</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r4.html</anchorfile>
      <anchor>abec78a694e72d39d504a7d825924c15f</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r4.html</anchorfile>
      <anchor>af35dea9eca62492c70f9fd081b401f01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r4.html</anchorfile>
      <anchor>aaf4d03780a4727d33afada0d107a6d6a</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>h</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r4.html</anchorfile>
      <anchor>a876d50d6bd8169483159def3a89464be</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>hf</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r4.html</anchorfile>
      <anchor>ad8bd9d27379dad2425296a883346c89d</anchor>
      <arglist>(double x, double y0) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::IHR6</name>
    <filename>structshark_1_1benchmarks_1_1_i_h_r6.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>IHR6</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r6.html</anchorfile>
      <anchor>a747a16e9b279c6d9933308029054a283</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r6.html</anchorfile>
      <anchor>ad0e263a470045eba1e2b1309c795d3c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r6.html</anchorfile>
      <anchor>afd3cafc16b0c836e2ce5de6999cc2120</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r6.html</anchorfile>
      <anchor>a5c23b0a18a528488a158fc266836377f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r6.html</anchorfile>
      <anchor>a59fe3850ca1dddbd035ed7abdf18013a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r6.html</anchorfile>
      <anchor>ab2f79a4278218e5102d362747da8c5b6</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r6.html</anchorfile>
      <anchor>aaf5b811324aac739602144691c8984ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r6.html</anchorfile>
      <anchor>ac2eb5c42866cf96fb6410647b340e32d</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>h</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r6.html</anchorfile>
      <anchor>ac9c0f836ee17566ca9451fce3a3d3807</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>hf</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r6.html</anchorfile>
      <anchor>ac750c7b89bd8582192c8ec83bc17993b</anchor>
      <arglist>(double x, double y0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>hg</name>
      <anchorfile>structshark_1_1benchmarks_1_1_i_h_r6.html</anchorfile>
      <anchor>a6c943fe99549892726dc336e98db1498</anchor>
      <arglist>(double x) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ImagePatches</name>
    <filename>classshark_1_1_image_patches.html</filename>
    <base>DataDistribution&lt; RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>ImagePatches</name>
      <anchorfile>classshark_1_1_image_patches.html</anchorfile>
      <anchor>aebd3397b0cd45f13561ffc1596e95973</anchor>
      <arglist>(Data&lt; RealVector &gt; images, std::size_t imageWidth, std::size_t imageHeight, std::size_t patchWidth, std::size_t patchHeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classshark_1_1_image_patches.html</anchorfile>
      <anchor>a01400c960d4da83f22837902c459d35e</anchor>
      <arglist>(RealVector &amp;input) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::INameable</name>
    <filename>classshark_1_1_i_nameable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~INameable</name>
      <anchorfile>classshark_1_1_i_nameable.html</anchorfile>
      <anchor>a877dbdfc6b58ea836495143cea44a98c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_i_nameable.html</anchorfile>
      <anchor>a9893f99314de30cd472e649c235d0db4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::IndexedIterator</name>
    <filename>classshark_1_1_indexed_iterator.html</filename>
    <templarg>class Iterator</templarg>
    <member kind="function">
      <type></type>
      <name>IndexedIterator</name>
      <anchorfile>classshark_1_1_indexed_iterator.html</anchorfile>
      <anchor>ae36af0bf7699c067d3b9a21e160b94c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexedIterator</name>
      <anchorfile>classshark_1_1_indexed_iterator.html</anchorfile>
      <anchor>a929e1426bfedfc5224f55e735b12cc2d</anchor>
      <arglist>(IndexedIterator&lt; I &gt; const &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexedIterator</name>
      <anchorfile>classshark_1_1_indexed_iterator.html</anchorfile>
      <anchor>a6739a0cf9815492c1df78e7af5a34824</anchor>
      <arglist>(IteratorT const &amp;iterator, std::size_t startIndex)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>classshark_1_1_indexed_iterator.html</anchorfile>
      <anchor>addc567fdd49114d13a2084d2c197df33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SHARK_ITERATOR_CORE_ACCESS</name>
      <anchorfile>classshark_1_1_indexed_iterator.html</anchorfile>
      <anchor>ad04e1f8c5114da431d0d97fb42329621</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::IndexingIterator</name>
    <filename>classshark_1_1_indexing_iterator.html</filename>
    <templarg>class Container</templarg>
    <member kind="function">
      <type></type>
      <name>IndexingIterator</name>
      <anchorfile>classshark_1_1_indexing_iterator.html</anchorfile>
      <anchor>a4249c0b21e8844d0498812a289b0a970</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexingIterator</name>
      <anchorfile>classshark_1_1_indexing_iterator.html</anchorfile>
      <anchor>a4edf62d860835390b354d20eb2ee27a9</anchor>
      <arglist>(Container &amp;container, std::size_t pos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexingIterator</name>
      <anchorfile>classshark_1_1_indexing_iterator.html</anchorfile>
      <anchor>a09fd8fcfec22526fa26ba4c7a3095b12</anchor>
      <arglist>(IndexingIterator&lt; C &gt; const &amp;iterator)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IndexingIterator</name>
      <anchorfile>classshark_1_1_indexing_iterator.html</anchorfile>
      <anchor>a64210b1629f1309464c1c2faf9a08939</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SHARK_ITERATOR_CORE_ACCESS</name>
      <anchorfile>classshark_1_1_indexing_iterator.html</anchorfile>
      <anchor>ad04e1f8c5114da431d0d97fb42329621</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::IndicatorBasedMOCMA</name>
    <filename>classshark_1_1_indicator_based_m_o_c_m_a.html</filename>
    <templarg>typename Indicator</templarg>
    <base>AbstractMultiObjectiveOptimizer&lt; RealVector &gt;</base>
    <member kind="enumeration">
      <type></type>
      <name>NotionOfSuccess</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>ab3927aff6ee32e5c8cd7532aea7f7328</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IndividualBased</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>ab3927aff6ee32e5c8cd7532aea7f7328abcd10d0c0e68c0c5236ce1f9fc0391e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PopulationBased</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>ab3927aff6ee32e5c8cd7532aea7f7328aa6905c75b376e3713316c02701de72aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IndividualBased</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>ab3927aff6ee32e5c8cd7532aea7f7328abcd10d0c0e68c0c5236ce1f9fc0391e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PopulationBased</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>ab3927aff6ee32e5c8cd7532aea7f7328aa6905c75b376e3713316c02701de72aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndicatorBasedMOCMA</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>a521cbffbdca285013a94905b7ed2de0a</anchor>
      <arglist>(random::rng_type &amp;rng=random::globalRng)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>ad4787a0d2d7005ca79096a5a677ac49a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>mu</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>a091929f84adc0a2b8f61e7b8f373ec33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>mu</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>a97c65630ade355fe20c67e76dbbb5b54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numInitPoints</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>adc103eae80a1d75fa128c6912cc0061c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>initialSigma</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>a5454cbbea6a9429dabec2c285298f5c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>initialSigma</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>a27c838e2cd5c6c7e6d1c9fda356eb2bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NotionOfSuccess</type>
      <name>notionOfSuccess</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>af9ee587af00f11bff5945bd863fe8734</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NotionOfSuccess &amp;</type>
      <name>notionOfSuccess</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>a752bd6a4e6d7abff90c7fdc0a358c226</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>a5fe33e996dc9d626c2067fc02425297b</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>a5645eec5cc98342c26c9bac85e770a6d</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>a015efc8d71a2dbc53aef7a5be2895ce2</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, std::vector&lt; SearchPointType &gt; const &amp;initialSearchPoints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>a5088cd38153a92dcaf45361aae621c2b</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function)</arglist>
    </member>
    <member kind="function">
      <type>Indicator &amp;</type>
      <name>indicator</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>af2b3ebf01d425b30744c299614707d17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Indicator const &amp;</type>
      <name>indicator</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>aeae5015d4343f6883f156a30b4f11758</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>CMAIndividual&lt; RealVector &gt;</type>
      <name>IndividualType</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>ab19c079df0cdfc32f8b8f89218f829c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doInit</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>a19809c73b76ec26f8bb835cfdc416022</anchor>
      <arglist>(std::vector&lt; SearchPointType &gt; const &amp;initialSearchPoints, std::vector&lt; ResultType &gt; const &amp;functionValues, std::size_t mu, double initialSigma)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; IndividualType &gt;</type>
      <name>generateOffspring</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>a47a411e7c2204be13f8e0956cf383434</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePopulation</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>a96bd33947a8556259d18a2132dfdc058</anchor>
      <arglist>(std::vector&lt; IndividualType &gt; const &amp;offspringVec)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IndividualType &gt;</type>
      <name>m_parents</name>
      <anchorfile>classshark_1_1_indicator_based_m_o_c_m_a.html</anchorfile>
      <anchor>a8462c5c2bf9b2e43aeea223e953741b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::IndicatorBasedRealCodedNSGAII</name>
    <filename>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</filename>
    <templarg>typename Indicator</templarg>
    <base>AbstractMultiObjectiveOptimizer&lt; RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>IndicatorBasedRealCodedNSGAII</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>a1bc72e4c13869acc416e57a3da9cc6c6</anchor>
      <arglist>(random::rng_type &amp;rng=random::globalRng)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>a5132ff6593edbff4b89757bde772931c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>crossoverProbability</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>afa51910d25d0109c4da7b662bccb4064</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>crossoverProbability</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>a5eb7e6f60801295b3e03736e75ed54c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nm</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>ae279d08021a2db2a18c981b2592e3911</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>nm</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>a537b751a1916ac338c84af80b155b901</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nc</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>a303821f8bd8683e47d2b6e75e654b799</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>nc</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>ae2777ec8d6041aa0b27f293c0d845373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>mu</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>a9ab2565056d761b0a503b635753b92f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>mu</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>a828b7383c5463a3d0890c42f8bce9dbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numInitPoints</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>a7442d1a0b976d59849869677bec8dcf0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Indicator &amp;</type>
      <name>indicator</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>a74f3d8169b3677c6de5595384b70556b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Indicator const &amp;</type>
      <name>indicator</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>a8c4ab995371114f62b548d63a06d3e5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>ad65c4da2221a12a9a8598c4cda6b6700</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>abea5ac7d2dcbf9edf7018d16230b259f</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>aa7be0351f6549d3a2c25405c10c28d3e</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, std::vector&lt; SearchPointType &gt; const &amp;initialSearchPoints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>abfe4b45656f1ae018f9b6f8497117d2f</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>shark::Individual&lt; RealVector, RealVector &gt;</type>
      <name>IndividualType</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>af078c26b1f2d382bc24cdf68ccf9db9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doInit</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>a2f466440a188d08a19faa75739b5d621</anchor>
      <arglist>(std::vector&lt; SearchPointType &gt; const &amp;initialSearchPoints, std::vector&lt; ResultType &gt; const &amp;functionValues, RealVector const &amp;lowerBounds, RealVector const &amp;upperBounds, std::size_t mu, double nm, double nc, double crossover_prob)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; IndividualType &gt;</type>
      <name>generateOffspring</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>abe6c932d3babb909cad7de1cc3a1a7e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePopulation</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>a5422579de873458d491dfe5a29cd3844</anchor>
      <arglist>(std::vector&lt; IndividualType &gt; const &amp;offspringVec)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IndividualType &gt;</type>
      <name>m_parents</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>ae37ebf50192f895622587471abbded2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>random::rng_type *</type>
      <name>mpe_rng</name>
      <anchorfile>classshark_1_1_indicator_based_real_coded_n_s_g_a_i_i.html</anchorfile>
      <anchor>ac5dd0f7f65c84aad1ac1bce30be4e5c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::IndicatorBasedSelection</name>
    <filename>structshark_1_1_indicator_based_selection.html</filename>
    <templarg>typename Indicator</templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_indicator_based_selection.html</anchorfile>
      <anchor>ae1c5f7b2cd375c0abc8ec37f85ea80d8</anchor>
      <arglist>(PopulationType &amp;population, std::size_t mu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_indicator_based_selection.html</anchorfile>
      <anchor>a6bb562cc8a260239e8c5f169920d33e4</anchor>
      <arglist>(Archive &amp;archive, const unsigned int version)</arglist>
    </member>
    <member kind="function">
      <type>Indicator &amp;</type>
      <name>indicator</name>
      <anchorfile>structshark_1_1_indicator_based_selection.html</anchorfile>
      <anchor>a23d24a2c30ee496f9b62a977c35e2ad4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Indicator const &amp;</type>
      <name>indicator</name>
      <anchorfile>structshark_1_1_indicator_based_selection.html</anchorfile>
      <anchor>ad067c94f4355a03de2b7a7c95faffee2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::IndicatorBasedSteadyStateMOCMA</name>
    <filename>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</filename>
    <templarg>typename Indicator</templarg>
    <base>AbstractMultiObjectiveOptimizer&lt; RealVector &gt;</base>
    <member kind="enumeration">
      <type></type>
      <name>NotionOfSuccess</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a1c098d9a05f6242d35855b8975ae0262</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IndividualBased</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a1c098d9a05f6242d35855b8975ae0262a50899c03697ed7affc69784e104b3be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PopulationBased</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a1c098d9a05f6242d35855b8975ae0262a3d451a21b0fcd70b3158d0dbe50225f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IndividualBased</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a1c098d9a05f6242d35855b8975ae0262a50899c03697ed7affc69784e104b3be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PopulationBased</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a1c098d9a05f6242d35855b8975ae0262a3d451a21b0fcd70b3158d0dbe50225f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndicatorBasedSteadyStateMOCMA</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>acf6f4e12f2a58152ad70e8ba825a3492</anchor>
      <arglist>(random::rng_type &amp;rng=random::globalRng)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>ae6889e5fe7b013fabfc8de5d2db5b8cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>mu</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>ad2bc3222846e97663a15d19909331b7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>mu</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>ae8b16a5e372626d0ec55e8053d4461fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numInitPoints</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>ac714fa3ec030a0af97b738e80cfdbc85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>initialSigma</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a98fa0496f071f295eceba01fa0aaddb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>initialSigma</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a9f3244ac98e2f85b1820bb934484bacd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NotionOfSuccess</type>
      <name>notionOfSuccess</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a8267fd3ec2932ce91f581e8a33fe9c5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NotionOfSuccess &amp;</type>
      <name>notionOfSuccess</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a034e53b75e5d894d90ec3afbb3247480</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Indicator &amp;</type>
      <name>indicator</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a8820691e0c21676fbd4475583e0bbb1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Indicator const &amp;</type>
      <name>indicator</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a6dd038dd8ab8125c33906737722869de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>afa45b2fca7a2d0097533013ae47bed86</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a0edd4f0218582b0525b3e87e9e8a5641</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>ab04e4ddfa160150c997d059c1f656bc6</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, std::vector&lt; SearchPointType &gt; const &amp;initialSearchPoints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a2dd77d4f60a4880e27a58e9e7101f7de</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>CMAIndividual&lt; RealVector &gt;</type>
      <name>IndividualType</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a521970b9e59b8dd45c89ec32588ac105</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doInit</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a739488c5bcc99716ad99ef494f130b13</anchor>
      <arglist>(std::vector&lt; SearchPointType &gt; const &amp;initialSearchPoints, std::vector&lt; ResultType &gt; const &amp;functionValues, std::size_t mu, double initialSigma)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; IndividualType &gt;</type>
      <name>generateOffspring</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a7ea5378ceb241323bda7edb755c7ab10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePopulation</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a0a88da702cff263381c1c16e8970dda4</anchor>
      <arglist>(std::vector&lt; IndividualType &gt; const &amp;offspringVec)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IndividualType &gt;</type>
      <name>m_parents</name>
      <anchorfile>classshark_1_1_indicator_based_steady_state_m_o_c_m_a.html</anchorfile>
      <anchor>a21fe7a0d6f897ccc178db093060ee449</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Individual</name>
    <filename>classshark_1_1_individual.html</filename>
    <templarg>typename PointType</templarg>
    <templarg>class FitnessTypeT</templarg>
    <templarg>class Chromosome</templarg>
    <class kind="struct">shark::Individual::FitnessOrdering</class>
    <class kind="struct">shark::Individual::RankOrdering</class>
    <member kind="typedef">
      <type>FitnessTypeT</type>
      <name>FitnessType</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>aa09cdfd65312e4c807d0f80a9ec71da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointType</type>
      <name>SearchPointType</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>aa96e1866f7225504ba5a69965dd9d768</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Individual</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>ace77ffb9f21e486028a7264043bbf35a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType &amp;</type>
      <name>searchPoint</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>a8d6ed0dfa38f5b0e9debdeb5529e6689</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType const &amp;</type>
      <name>searchPoint</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>aad061b1db165753bae7695290c4fd232</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Chromosome &amp;</type>
      <name>chromosome</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>addfc461c9e7394ee238e6f5c18537646</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Chromosome const &amp;</type>
      <name>chromosome</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>a59707757b53f0235e2bac65271ab644c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FitnessType &amp;</type>
      <name>unpenalizedFitness</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>a27124e785660f26f56ab638568f1f5f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FitnessType const &amp;</type>
      <name>unpenalizedFitness</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>a0d7a125e227b76610e7bda016a3b387f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FitnessType &amp;</type>
      <name>penalizedFitness</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>a62d3d29935d144352503f3002bd93363</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FitnessType const &amp;</type>
      <name>penalizedFitness</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>a93503a3e970e0c59b5efce06b432e34b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rank</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>aa4a1bb36f0ccbdc08f68ae85a198d713</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int &amp;</type>
      <name>rank</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>a03f1bbca6f2eefc2dd621e14410834cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>selected</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>ae398d51a6c688bc9458694d9d47759d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>selected</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>a4a1aceb8eb60e961a1bbf4506905220b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>a26321373a70a17256dd25214e139bfe7</anchor>
      <arglist>(Archive &amp;archive, const unsigned int version)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SearchPointType</type>
      <name>m_searchPoint</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>a0a9496e526eb4959ff769a8acd205426</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Chromosome</type>
      <name>m_chromosome</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>aae9d6e09eb149ef22e25c0cba97ee2ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_rank</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>aa0d743b590b4190776d613863c2d88f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_selected</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>a5770fceb9feddc2cc92080ce9e1c2fb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FitnessType</type>
      <name>m_penalizedFitness</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>a4e8fa4f41a74a27cab74065ba37a4ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FitnessType</type>
      <name>m_unpenalizedFitness</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>a7f61d70d13c293b174868bdae680f5af</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classshark_1_1_individual.html</anchorfile>
      <anchor>a94637c55f4ded98f7e17bcbb7727da92</anchor>
      <arglist>(Individual &amp;i1, Individual &amp;i2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CrossEntropyMethod::INoiseType</name>
    <filename>classshark_1_1_cross_entropy_method_1_1_i_noise_type.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>noiseValue</name>
      <anchorfile>classshark_1_1_cross_entropy_method_1_1_i_noise_type.html</anchorfile>
      <anchor>aeb003589c15cf765f869f41c02ea731b</anchor>
      <arglist>(int t) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_cross_entropy_method_1_1_i_noise_type.html</anchorfile>
      <anchor>acedfc8d3e4b0665558d1514664b68e21</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::IParameterizable</name>
    <filename>classshark_1_1_i_parameterizable.html</filename>
    <templarg>class VectorType</templarg>
    <member kind="typedef">
      <type>VectorType</type>
      <name>ParameterVectorType</name>
      <anchorfile>classshark_1_1_i_parameterizable.html</anchorfile>
      <anchor>a2ad5e2e60b2b352988b41f46024d790b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IParameterizable</name>
      <anchorfile>classshark_1_1_i_parameterizable.html</anchorfile>
      <anchor>a9e3a11172e74d1aa7292f3de4e2b6ebc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterVectorType</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_i_parameterizable.html</anchorfile>
      <anchor>afaa2ba692ab64a0edbff60d7ee6794db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_i_parameterizable.html</anchorfile>
      <anchor>ad5e35d1a10ff36fa72ea787baa40e9ad</anchor>
      <arglist>(ParameterVectorType const &amp;newParameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_i_parameterizable.html</anchorfile>
      <anchor>aed1e8d1d4dbde387e2f6a25141ed3a20</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ISerializable</name>
    <filename>classshark_1_1_i_serializable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ISerializable</name>
      <anchorfile>classshark_1_1_i_serializable.html</anchorfile>
      <anchor>a7baa9ce108d7278822297ce15882782a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_i_serializable.html</anchorfile>
      <anchor>ad4ad9a7c274deff642f91e98417fbc63</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_i_serializable.html</anchorfile>
      <anchor>a9bddedd42933c922e323b73131f62f12</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classshark_1_1_i_serializable.html</anchorfile>
      <anchor>abdda0c5b8e065b8afbac2cba8f58e841</anchor>
      <arglist>(InArchive &amp;archive, unsigned int version)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classshark_1_1_i_serializable.html</anchorfile>
      <anchor>a5bf66fa8db15cc529bec98976a2f5255</anchor>
      <arglist>(OutArchive &amp;archive, unsigned int version) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_SERIALIZATION_SPLIT_MEMBER</name>
      <anchorfile>classshark_1_1_i_serializable.html</anchorfile>
      <anchor>a4560a94e8f4908fe8627e41e7d965735</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::IterativeNNQuery</name>
    <filename>classshark_1_1_iterative_n_n_query.html</filename>
    <templarg>class DataContainer</templarg>
    <member kind="function">
      <type></type>
      <name>IterativeNNQuery</name>
      <anchorfile>classshark_1_1_iterative_n_n_query.html</anchorfile>
      <anchor>a02c6b80d059c5bd4964ed64a7420ede0</anchor>
      <arglist>(tree_type const *tree, DataContainer const &amp;data, value_type const &amp;point)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IterativeNNQuery</name>
      <anchorfile>classshark_1_1_iterative_n_n_query.html</anchorfile>
      <anchor>af4917cb856b7b71d313d42978793e011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>neighbors</name>
      <anchorfile>classshark_1_1_iterative_n_n_query.html</anchorfile>
      <anchor>a8eadbf00c36ad200cbb2d75efed07c7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>next</name>
      <anchorfile>classshark_1_1_iterative_n_n_query.html</anchorfile>
      <anchor>ac980e389bfdd03966ab9eee72491f520</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>queuesize</name>
      <anchorfile>classshark_1_1_iterative_n_n_query.html</anchorfile>
      <anchor>ac55c632054e204acc14e0b554320d9a9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::JaakkolaHeuristic</name>
    <filename>classshark_1_1_jaakkola_heuristic.html</filename>
    <member kind="function">
      <type></type>
      <name>JaakkolaHeuristic</name>
      <anchorfile>classshark_1_1_jaakkola_heuristic.html</anchorfile>
      <anchor>a7ca97a37b35ece86f17396682b77e8ec</anchor>
      <arglist>(LabeledData&lt; InputType, unsigned int &gt; const &amp;dataset, bool nearestFalseNeighbor=true)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sigma</name>
      <anchorfile>classshark_1_1_jaakkola_heuristic.html</anchorfile>
      <anchor>aa020badc9e213efd8be49004b8e8a58b</anchor>
      <arglist>(double quantile=0.5)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>classshark_1_1_jaakkola_heuristic.html</anchorfile>
      <anchor>ae5e25ff2cd4a047ff31900f1f1aa3b55</anchor>
      <arglist>(double quantile=0.5)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::KDTree</name>
    <filename>classshark_1_1_k_d_tree.html</filename>
    <templarg>class InputT</templarg>
    <base>shark::BinaryTree</base>
    <member kind="function">
      <type></type>
      <name>KDTree</name>
      <anchorfile>classshark_1_1_k_d_tree.html</anchorfile>
      <anchor>a3fe6b43b26ecb3a907753b0e275515c0</anchor>
      <arglist>(Data&lt; InputT &gt; const &amp;dataset, TreeConstruction tc=TreeConstruction())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lower</name>
      <anchorfile>classshark_1_1_k_d_tree.html</anchorfile>
      <anchor>aefe4d7d7a1833f518b5b3a3ad1adb520</anchor>
      <arglist>(std::size_t dim) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>upper</name>
      <anchorfile>classshark_1_1_k_d_tree.html</anchorfile>
      <anchor>a80d8c03cbb03aa01f1b8a310bb7cf55d</anchor>
      <arglist>(std::size_t dim) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>squaredDistanceLowerBound</name>
      <anchorfile>classshark_1_1_k_d_tree.html</anchorfile>
      <anchor>a68e44a697dc289c700c65658af6b3893</anchor>
      <arglist>(InputT const &amp;reference) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>KDTree</name>
      <anchorfile>classshark_1_1_k_d_tree.html</anchorfile>
      <anchor>aa30ad7dbf305495db5d052ba3eea483a</anchor>
      <arglist>(KDTree *parent, std::size_t *list, std::size_t size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildTree</name>
      <anchorfile>classshark_1_1_k_d_tree.html</anchorfile>
      <anchor>a7ca41c2db8a6d814deef326dd0bbfa44</anchor>
      <arglist>(TreeConstruction tc, Range &amp;points)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::size_t</type>
      <name>calculateCuttingDimension</name>
      <anchorfile>classshark_1_1_k_d_tree.html</anchorfile>
      <anchor>a7d49ee634a593c727aa4896c4d0683fc</anchor>
      <arglist>(Range const &amp;points) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>funct</name>
      <anchorfile>classshark_1_1_k_d_tree.html</anchorfile>
      <anchor>a54181d202a7a437f2dc0d632b06fca60</anchor>
      <arglist>(InputT const &amp;reference) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_cutDim</name>
      <anchorfile>classshark_1_1_k_d_tree.html</anchorfile>
      <anchor>a34933db0a72046a41df17937fd4f5fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryTree *</type>
      <name>mep_parent</name>
      <anchorfile>classshark_1_1_k_d_tree.html</anchorfile>
      <anchor>a100ef54d8a4904afff8c188bf4e735f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryTree *</type>
      <name>mp_left</name>
      <anchorfile>classshark_1_1_k_d_tree.html</anchorfile>
      <anchor>a14c17e4fc65d1351cc23eceae05ce0d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryTree *</type>
      <name>mp_right</name>
      <anchorfile>classshark_1_1_k_d_tree.html</anchorfile>
      <anchor>acc95bb731d3bfac4a896820f8de04ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t *</type>
      <name>mp_indexList</name>
      <anchorfile>classshark_1_1_k_d_tree.html</anchorfile>
      <anchor>afdce442d41868d9a84dcfc954c78ce93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_size</name>
      <anchorfile>classshark_1_1_k_d_tree.html</anchorfile>
      <anchor>a825e00e68228cb1654b5ac0a25f4972a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_nodes</name>
      <anchorfile>classshark_1_1_k_d_tree.html</anchorfile>
      <anchor>ad07d8f306001f8e1bc9a321a3d11444e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::KernelBudgetedSGDTrainer</name>
    <filename>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class CacheType</templarg>
    <base>AbstractTrainer&lt; KernelClassifier&lt; InputType &gt; &gt;</base>
    <base>shark::IParameterizable</base>
    <member kind="enumeration">
      <type></type>
      <name>preInitializationMethod</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>ab2bbffc9336fbe61c3b667f8f3f0672e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>ab2bbffc9336fbe61c3b667f8f3f0672ea3481ccda012741ec6f194790c8fa81b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RANDOM</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>ab2bbffc9336fbe61c3b667f8f3f0672eaa780ebd48025014f013b4fa68cc4ae45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a2e358ce3d8b3397c0f53bbf04d9c5493</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KernelClassifier&lt; InputType &gt;</type>
      <name>ClassifierType</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>aabd1a7c1a563d9c29039fabc8f1a57c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KernelExpansion&lt; InputType &gt;</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a62a15b8334075f72a3dfd0827d6d28e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractLoss&lt; unsigned int, RealVector &gt;</type>
      <name>LossType</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a06bca64eeb1641f17d435da555a78c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstProxyReference&lt; typenameBatch&lt; InputType &gt;::typeconst &gt;::type</type>
      <name>ConstBatchInputReference</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a1f29257150948ec40a72088b71509195</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CacheType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a46a5cbca5391f2985a52e84ab9fa99fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabeledData&lt; InputType, unsignedint &gt;::element_type</type>
      <name>ElementType</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a5b834dccb79cf2bd9623ad3caf374aa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KernelMatrix&lt; InputType, QpFloatType &gt;</type>
      <name>KernelMatrixType</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a60fcdf9770f6f859edaead4ff9a2684e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartlyPrecomputedMatrix&lt; KernelMatrixType &gt;</type>
      <name>PartlyPrecomputedMatrixType</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a86c3c80eefc4b570704a0d8bbc5a0f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>ab2bbffc9336fbe61c3b667f8f3f0672ea3481ccda012741ec6f194790c8fa81b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RANDOM</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>ab2bbffc9336fbe61c3b667f8f3f0672eaa780ebd48025014f013b4fa68cc4ae45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KernelBudgetedSGDTrainer</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>aab286ceb068bacf0dcdd21b43c48c231</anchor>
      <arglist>(KernelType *kernel, const LossType *loss, double C, bool offset, bool unconstrained=false, size_t budgetSize=500, AbstractBudgetMaintenanceStrategy&lt; InputType &gt; *budgetMaintenanceStrategy=NULL, size_t epochs=1, size_t preInitializationMethod=NONE, double minMargin=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>budgetSize</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a1f1e8961c4e22246f2fe3d023335c571</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBudgetSize</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>ae45eb76dbab8216393c04a45272c078a</anchor>
      <arglist>(std::size_t budgetSize)</arglist>
    </member>
    <member kind="function">
      <type>AbstractBudgetMaintenanceStrategy&lt; InputType &gt; *</type>
      <name>budgetMaintenanceStrategy</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>aacf277842f28d9d49b1aea197ba710ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBudgetMaintenanceStrategy</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a4f87b77aab4f3bc93ab429994d51caf3</anchor>
      <arglist>(AbstractBudgetMaintenanceStrategy&lt; InputType &gt; *budgetMaintenanceStrategy)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minMargin</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a7711ed0cef0489dc1bca0a9cb26e12fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinMargin</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a9f083a7f478269c13cf1550e3fe0c469</anchor>
      <arglist>(double minMargin)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a6479254636b6c638beec35a3ba495f5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>afc6eff8c84cf39de20aaec579f1716b0</anchor>
      <arglist>(ClassifierType &amp;classifier, const LabeledData&lt; InputType, unsigned int &gt; &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>epochs</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a512de58a73a790ce3159452b73c1f892</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEpochs</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>ad5bd681e0b7e4f64f8ef3f031fe15396</anchor>
      <arglist>(std::size_t value)</arglist>
    </member>
    <member kind="function">
      <type>KernelType *</type>
      <name>kernel</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a5a0280688fb9600606ea098dfa9fb3a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const KernelType *</type>
      <name>kernel</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>abe6e3c9bc8d82159fde4d0d6ce77a29c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKernel</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a197676a5f5247401a286c9f2c54db720</anchor>
      <arglist>(KernelType *kernel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnconstrained</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>af9ee46318c066f68346a9f95b0a9d89b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>C</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a55681941faf8293971193dce813c5651</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setC</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a901e47531bcb1c010bbaa859a4666f11</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trainOffset</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>aed3f039e3cfb8b26115d75838453707b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>ae4573dfb8f348f21bc95c74eddc97b48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a5150b09e061a93c353990fef1c4bd0a2</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a66b3bfe5605e929520855fe6d5b95584</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KernelType *</type>
      <name>m_kernel</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a80076005339d5be37635648497fd8ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const LossType *</type>
      <name>m_loss</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>ab625d21676430dfcbab2dfce0d0a71f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_C</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a6c9ddc984e879808a91364668b27da4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_offset</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a745df296984693159dcd99dce89e3d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_unconstrained</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a8cdbe89d6b1e2890ef965f6fd01a747e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_budgetSize</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>adefa2c47996b1323231f69b96c0be778</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AbstractBudgetMaintenanceStrategy&lt; InputType &gt; *</type>
      <name>m_budgetMaintenanceStrategy</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a02e70a83231e2f686b861b9d353ffe23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_epochs</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a70e4a98aa96a4a85f15dd0fecb2956f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_preInitializationMethod</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>a014dcb01ea4274f8f7fc83887573c769</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_minMargin</name>
      <anchorfile>classshark_1_1_kernel_budgeted_s_g_d_trainer.html</anchorfile>
      <anchor>ace0f955650ddfcfcec23ed5eb3d33307</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::KernelClassifier</name>
    <filename>structshark_1_1_kernel_classifier.html</filename>
    <templarg>class InputType</templarg>
    <base>Classifier&lt; KernelExpansion&lt; InputType &gt; &gt;</base>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>structshark_1_1_kernel_classifier.html</anchorfile>
      <anchor>a32caf409ea245eefc2a2e9ae4b43e3af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KernelExpansion&lt; InputType &gt;</type>
      <name>KernelExpansionType</name>
      <anchorfile>structshark_1_1_kernel_classifier.html</anchorfile>
      <anchor>a0ad5452841ff48ec90a093d9b9936361</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KernelClassifier</name>
      <anchorfile>structshark_1_1_kernel_classifier.html</anchorfile>
      <anchor>a98f0d025a766e0b91627b9a2b98b88bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KernelClassifier</name>
      <anchorfile>structshark_1_1_kernel_classifier.html</anchorfile>
      <anchor>a5b168d3d8d19b54f6beeaf4e7966642a</anchor>
      <arglist>(KernelType *kernel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KernelClassifier</name>
      <anchorfile>structshark_1_1_kernel_classifier.html</anchorfile>
      <anchor>aef914da86d750dfaaec6959a65cb1895</anchor>
      <arglist>(KernelExpansionType const &amp;decisionFunction)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1_kernel_classifier.html</anchorfile>
      <anchor>abbef74538d798ab544d102d5a957b1eb</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::KernelExpansion</name>
    <filename>classshark_1_1_kernel_expansion.html</filename>
    <templarg>class InputType</templarg>
    <base>AbstractModel&lt; InputType, RealVector &gt;</base>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>ac5836d98d072c8ea288209ca3fa2f1c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a651c84963d3935af5324530e1722830b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a3d47bea3d1bb6b1c5044c9208f1dfd09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KernelExpansion</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>abd97e2ccc82763bbea0c884c5f5bce88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KernelExpansion</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a0279e9ce4677fd9fc4da82711a85a9d1</anchor>
      <arglist>(KernelType *kernel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KernelExpansion</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a76b322fd10b132fac5afc80405301e64</anchor>
      <arglist>(KernelType *kernel, Data&lt; InputType &gt; const &amp;basis, bool offset, std::size_t outputs=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStructure</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a38c97766f52bf00e5b0120c46c15f37f</anchor>
      <arglist>(KernelType *kernel, Data&lt; InputType &gt; const &amp;basis, bool offset, std::size_t outputs=1)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>ac7cf9023daedf1951882dcf76956cbff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a251b1a2dec182d8433b8010fc2df0787</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>aafda4afa8142b463e1b316d8bd4e342f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KernelType const *</type>
      <name>kernel</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>aa7f672e5b1a367ce00545f550596bb0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KernelType *</type>
      <name>kernel</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a082027bb23accf964937433638e57281</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKernel</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>aa3050c994b3b804dc52e3cac195d927c</anchor>
      <arglist>(KernelType *kernel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOffset</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>afb02d63dd18cb3ba534d1393c092752f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix &amp;</type>
      <name>alpha</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a3c65dfd17f38eaa461f6400d302fae48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix const &amp;</type>
      <name>alpha</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a96b806bd045ac5cae655399d487c9666</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>alpha</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a86269e46881882b7d56f0de924cb9dbe</anchor>
      <arglist>(std::size_t example, std::size_t cls)</arglist>
    </member>
    <member kind="function">
      <type>double const &amp;</type>
      <name>alpha</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>acfe64c8c40cdedf4e011fc0c76957365</anchor>
      <arglist>(std::size_t example, std::size_t cls) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector &amp;</type>
      <name>offset</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a1c89cb50933ee211d67af90e6366e0ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>offset</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a2494359ab8d8be134b2b9adccc458a33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>offset</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a47023a21733e5230af9d3e5253422721</anchor>
      <arglist>(std::size_t cls)</arglist>
    </member>
    <member kind="function">
      <type>double const &amp;</type>
      <name>offset</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a514768f8a9709bde70dc9b993892e2e1</anchor>
      <arglist>(std::size_t cls) const</arglist>
    </member>
    <member kind="function">
      <type>Data&lt; InputType &gt; const &amp;</type>
      <name>basis</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a48c4d31664d347f477cfb305a7b98d61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Data&lt; InputType &gt; &amp;</type>
      <name>basis</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a97db6773c7ab9c69e1c88cb44a83634e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sparsify</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a503aaebca6ce5e7d8a6f79e5e039bd9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a6b91222bf74774ac83e049f95d03f6c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a0c1c29a9e9251d908d5d35c4f5998725</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>acef45b855141ee8cae89b468c72bcb85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>ae4764c8830fd7f7b65e43e3e4210dba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a9a55c5a7f5e4b7f447f299c1b19050e2</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;output) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>aa8c82d18e6ac27bae8155c751f552bda</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a3b4d90a82af13e81f0ddb9bbc133a2a8</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a962e6ea8753f0146c69ff41002c4e413</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KernelType *</type>
      <name>mep_kernel</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>af9b56d462d08ee86692de5f92e1a61ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Data&lt; InputType &gt;</type>
      <name>m_basis</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a3c17d9a2d90c6dc919d09431fa4a9bc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealMatrix</type>
      <name>m_alpha</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>a923db4c417f36a23a7c7e5ba496a5265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_b</name>
      <anchorfile>classshark_1_1_kernel_expansion.html</anchorfile>
      <anchor>aa9c87c7314a2142b790272324e8793b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::KernelMatrix</name>
    <filename>classshark_1_1_kernel_matrix.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class CacheType</templarg>
    <member kind="typedef">
      <type>CacheType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_kernel_matrix.html</anchorfile>
      <anchor>ac4a1b86d81dc86652e3226b7d0a79f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KernelMatrix</name>
      <anchorfile>classshark_1_1_kernel_matrix.html</anchorfile>
      <anchor>aa486dd918e3c6d34246eeacd348cba93</anchor>
      <arglist>(AbstractKernelFunction&lt; InputType &gt; const &amp;kernelfunction, Data&lt; InputType &gt; const &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_kernel_matrix.html</anchorfile>
      <anchor>af9ce0968195cf9ca49c7e77ba7c5d3c6</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>entry</name>
      <anchorfile>classshark_1_1_kernel_matrix.html</anchorfile>
      <anchor>ac3cfe068368969d7cdc5a84e64edf416</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>classshark_1_1_kernel_matrix.html</anchorfile>
      <anchor>a3ebcd91ea57f440376d14741e7697c6d</anchor>
      <arglist>(std::size_t i, std::size_t start, std::size_t end, QpFloatType *storage) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matrix</name>
      <anchorfile>classshark_1_1_kernel_matrix.html</anchorfile>
      <anchor>ad5365d1a9d11ca1175b6bb35607db6d1</anchor>
      <arglist>(blas::matrix_expression&lt; M, blas::cpu_tag &gt; &amp;storage) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipColumnsAndRows</name>
      <anchorfile>classshark_1_1_kernel_matrix.html</anchorfile>
      <anchor>a45ad0d3cc5b9ea58069eb93713289015</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_kernel_matrix.html</anchorfile>
      <anchor>ad2bb6df532f1e6aa39fa30f6efad5222</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>getAccessCount</name>
      <anchorfile>classshark_1_1_kernel_matrix.html</anchorfile>
      <anchor>a834648ff97fe9d3269a8a821299026ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetAccessCount</name>
      <anchorfile>classshark_1_1_kernel_matrix.html</anchorfile>
      <anchor>ad76f1daf43dd80689ad630cab48a111a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Batch&lt; InputType &gt;::const_iterator</type>
      <name>PointerType</name>
      <anchorfile>classshark_1_1_kernel_matrix.html</anchorfile>
      <anchor>ab4e409d88bff0f586ad51d92b04efc24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const AbstractKernelFunction&lt; InputType &gt; &amp;</type>
      <name>kernel</name>
      <anchorfile>classshark_1_1_kernel_matrix.html</anchorfile>
      <anchor>a2dfb1fc5283492a93ff13de7109300e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Data&lt; InputType &gt;</type>
      <name>m_data</name>
      <anchorfile>classshark_1_1_kernel_matrix.html</anchorfile>
      <anchor>a741a640e9f67a6c381c7d298b36ee1b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; PointerType &gt;</type>
      <name>x</name>
      <anchorfile>classshark_1_1_kernel_matrix.html</anchorfile>
      <anchor>a5ef24d74bc029e4a66dd456408103dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long long</type>
      <name>m_accessCounter</name>
      <anchorfile>classshark_1_1_kernel_matrix.html</anchorfile>
      <anchor>ad16c20b5f5548be63756ff22c3d33926</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::KernelMeanClassifier</name>
    <filename>classshark_1_1_kernel_mean_classifier.html</filename>
    <templarg>class InputType</templarg>
    <base>AbstractWeightedTrainer&lt; KernelClassifier&lt; InputType &gt;, unsigned int &gt;</base>
    <member kind="function">
      <type></type>
      <name>KernelMeanClassifier</name>
      <anchorfile>classshark_1_1_kernel_mean_classifier.html</anchorfile>
      <anchor>a005f4bc1711987b639d5aea79526a497</anchor>
      <arglist>(AbstractKernelFunction&lt; InputType &gt; *kernel)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_kernel_mean_classifier.html</anchorfile>
      <anchor>aadb6d7c949ff748325c4a4f57c5b31ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_kernel_mean_classifier.html</anchorfile>
      <anchor>a81f1f20f6bedb854fab0193d3174dac2</anchor>
      <arglist>(KernelClassifier&lt; InputType &gt; &amp;model, WeightedLabeledData&lt; InputType, unsigned int &gt; const &amp;dataset)</arglist>
    </member>
    <member kind="variable">
      <type>AbstractKernelFunction&lt; InputType &gt; *</type>
      <name>mpe_kernel</name>
      <anchorfile>classshark_1_1_kernel_mean_classifier.html</anchorfile>
      <anchor>aa3d65c3cfebd511aa4014cbc49ac729b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::KernelSGDTrainer</name>
    <filename>classshark_1_1_kernel_s_g_d_trainer.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class CacheType</templarg>
    <base>AbstractTrainer&lt; KernelClassifier&lt; InputType &gt; &gt;</base>
    <base>shark::IParameterizable</base>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a606dc86cf240c1fe43791df0ce24998e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KernelClassifier&lt; InputType &gt;</type>
      <name>ClassifierType</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a5488cda990c715d893dfba057fa88b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KernelExpansion&lt; InputType &gt;</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a438d0be0a607dac285103e8a264705ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractLoss&lt; unsigned int, RealVector &gt;</type>
      <name>LossType</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>afcfe228a0df389b8f56733d0e9ec90dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstProxyReference&lt; typenameBatch&lt; InputType &gt;::typeconst &gt;::type</type>
      <name>ConstBatchInputReference</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a74cd4fda9509abea240aa92b0475cd19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CacheType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a6097a25678eae9b9152d2b906157dea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KernelMatrix&lt; InputType, QpFloatType &gt;</type>
      <name>KernelMatrixType</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a65ceba570e60a98afd4669f648332674</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartlyPrecomputedMatrix&lt; KernelMatrixType &gt;</type>
      <name>PartlyPrecomputedMatrixType</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>adf916f6e4f7e0593ba14ef630f9a449d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KernelSGDTrainer</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>adc23910b5eddd9a8190fe796ff9291f4</anchor>
      <arglist>(KernelType *kernel, const LossType *loss, double C, bool offset, bool unconstrained=false, size_t cacheSize=0x4000000)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cacheSize</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>ac0183963a7f82e77ba7333666e05f895</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCacheSize</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>ab17a0f3738e21dc766e74cfd6e8e05ff</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a5adb31bcd362569c1e123a6325329be9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a31c7513f29d280ad3165d18100962391</anchor>
      <arglist>(ClassifierType &amp;classifier, const LabeledData&lt; InputType, unsigned int &gt; &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>epochs</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>ae7b9d884f5389bad153a8d9780cd494f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEpochs</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>acc7519d465974fcbb2c059debcedcc8e</anchor>
      <arglist>(std::size_t value)</arglist>
    </member>
    <member kind="function">
      <type>KernelType *</type>
      <name>kernel</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>ade8ab81af9b2934ae72b442b8c98e9d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const KernelType *</type>
      <name>kernel</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>ae8547043f53fd4f9a0fabbc0b30633e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKernel</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>ac9b2d2d0ca5dc5bdf44194d1cbffe607</anchor>
      <arglist>(KernelType *kernel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnconstrained</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a5f52c070bb985c7bf1f7063c7b4c695a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>C</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a442f481e2e8f97156994ed478ec5d91f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setC</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a7b5805e9aedbf6a043c19aa802255837</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trainOffset</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a09fa50917fb4f3deda0e6b0c29977d07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>ab9e4920082ba0a7a88a9589d82024326</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a60e89b698e5ff7d10ad7c613e369f0ac</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a9acfcaf7fee65d405706e35c16d43bb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KernelType *</type>
      <name>m_kernel</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>ada7a1e197b8d2721ac531c68988dfd17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const LossType *</type>
      <name>m_loss</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>ada9d9dbb9f3abd4cbf09c53e0bb92fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_C</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a374547615c259b8b19ca846fac2a9753</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_offset</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a2222af2e7de2a6c68b18678f0fff1cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_unconstrained</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>acc37f18ac6b0d7bf0a526f960ad4c4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_epochs</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a0230c6c90039fd6dbc20dd5192c69c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_cacheSize</name>
      <anchorfile>classshark_1_1_kernel_s_g_d_trainer.html</anchorfile>
      <anchor>a3266b159eb84e746be2d35ff719c26bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::KernelTargetAlignment</name>
    <filename>classshark_1_1_kernel_target_alignment.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class LabelType</templarg>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>KernelTargetAlignment</name>
      <anchorfile>classshark_1_1_kernel_target_alignment.html</anchorfile>
      <anchor>a87271aa945bc1f3e0801fffadccd80b6</anchor>
      <arglist>(LabeledData&lt; InputType, LabelType &gt; const &amp;dataset, AbstractKernelFunction&lt; InputType &gt; *kernel, bool centering=true)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_kernel_target_alignment.html</anchorfile>
      <anchor>a018b6911e9c8eac5aa28c4f89f4c5a93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>classshark_1_1_kernel_target_alignment.html</anchorfile>
      <anchor>a5743503781d8d4c9ea42164e0662a281</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_kernel_target_alignment.html</anchorfile>
      <anchor>a942e20f87c2c2b7df9fe5ec25f81ef1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_kernel_target_alignment.html</anchorfile>
      <anchor>a7def66b8de8f3008c5e5382e78509cc8</anchor>
      <arglist>(RealVector const &amp;input) const</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_kernel_target_alignment.html</anchorfile>
      <anchor>ad1f1d75eea4b7a91498a4b62972b4efb</anchor>
      <arglist>(const SearchPointType &amp;input, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::KeyValuePair</name>
    <filename>structshark_1_1_key_value_pair.html</filename>
    <templarg>class Key</templarg>
    <templarg>class Value</templarg>
    <member kind="function">
      <type></type>
      <name>KeyValuePair</name>
      <anchorfile>structshark_1_1_key_value_pair.html</anchorfile>
      <anchor>afdefb964bd18ebe5c1df623fcdbbe946</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyValuePair</name>
      <anchorfile>structshark_1_1_key_value_pair.html</anchorfile>
      <anchor>aae063591728adea84bcb156291e989be</anchor>
      <arglist>(Key const &amp;key, Value const &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyValuePair</name>
      <anchorfile>structshark_1_1_key_value_pair.html</anchorfile>
      <anchor>aa98337eef17b7cee0560258d00c24ff5</anchor>
      <arglist>(KeyValuePair&lt; K, V &gt; const &amp;pair)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structshark_1_1_key_value_pair.html</anchorfile>
      <anchor>a7d2e3d38c7bd1ce214076c1eeab1e8bf</anchor>
      <arglist>(KeyValuePair&lt; K, V &gt; const &amp;pair) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structshark_1_1_key_value_pair.html</anchorfile>
      <anchor>a67d68e8fb63b2d3f377a1f02a72e3348</anchor>
      <arglist>(KeyValuePair&lt; K, V &gt; const &amp;pair) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structshark_1_1_key_value_pair.html</anchorfile>
      <anchor>aa75aa423b997870fca2aaa62f61c710a</anchor>
      <arglist>(KeyValuePair&lt; K, V &gt; const &amp;pair) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structshark_1_1_key_value_pair.html</anchorfile>
      <anchor>a505d666f6bed4f5bd174e5488705abe3</anchor>
      <arglist>(KeyValuePair&lt; K, V &gt; const &amp;pair) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structshark_1_1_key_value_pair.html</anchorfile>
      <anchor>a0313d81d9e123bf514f1f1bde0f3f02a</anchor>
      <arglist>(KeyValuePair&lt; K, V &gt; const &amp;pair) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structshark_1_1_key_value_pair.html</anchorfile>
      <anchor>a0b659e6c3659e7c1885c76e0ff5da7ca</anchor>
      <arglist>(KeyValuePair&lt; K, V &gt; const &amp;pair) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_key_value_pair.html</anchorfile>
      <anchor>af36e24a040d7ab4927f07a66c0053a27</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="variable">
      <type>Key</type>
      <name>key</name>
      <anchorfile>structshark_1_1_key_value_pair.html</anchorfile>
      <anchor>a930660f644c6402e0029063a7228c836</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Value</type>
      <name>value</name>
      <anchorfile>structshark_1_1_key_value_pair.html</anchorfile>
      <anchor>a17a95cec6457d457a4c1da366fb8283f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::KHCTree</name>
    <filename>classshark_1_1_k_h_c_tree.html</filename>
    <templarg>class Container</templarg>
    <templarg>int CuttingAccuracy</templarg>
    <base>BinaryTree&lt; Container::value_type &gt;</base>
    <member kind="typedef">
      <type>IndexedIterator&lt; typename boost::range_iterator&lt; Container const  &gt;::type &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classshark_1_1_k_h_c_tree.html</anchorfile>
      <anchor>ad38d5c94143d0fdb8e1c0677edee6a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KHCTree</name>
      <anchorfile>classshark_1_1_k_h_c_tree.html</anchorfile>
      <anchor>a44fbdc20c35370cf39cdaada4bd76620</anchor>
      <arglist>(Container const &amp;points, kernel_type const *kernel, TreeConstruction tc=TreeConstruction())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>squaredDistanceLowerBound</name>
      <anchorfile>classshark_1_1_k_h_c_tree.html</anchorfile>
      <anchor>a266d14a6be4ace74d919d7244a967cd8</anchor>
      <arglist>(value_type const &amp;reference) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>KHCTree</name>
      <anchorfile>classshark_1_1_k_h_c_tree.html</anchorfile>
      <anchor>a2adecacb10d6e1d61d1d6a626ea22cfd</anchor>
      <arglist>(KHCTree *parent, std::size_t *list, std::size_t size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildTree</name>
      <anchorfile>classshark_1_1_k_h_c_tree.html</anchorfile>
      <anchor>a96ac23e4df78cfa576aae64ba7600b97</anchor>
      <arglist>(TreeConstruction tc, Range &amp;points)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateNormal</name>
      <anchorfile>classshark_1_1_k_h_c_tree.html</anchorfile>
      <anchor>a3af2b2683dfe8b119f248e54c1c5d044</anchor>
      <arglist>(Range const &amp;samples)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>funct</name>
      <anchorfile>classshark_1_1_k_h_c_tree.html</anchorfile>
      <anchor>a98f61360f2c9a9a6ebc9b9ad995c77a7</anchor>
      <arglist>(value_type const &amp;reference) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>kernel_type const  *</type>
      <name>mep_kernel</name>
      <anchorfile>classshark_1_1_k_h_c_tree.html</anchorfile>
      <anchor>acd6aae2b85d97855361171d95de281b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const_iterator</type>
      <name>mep_positive</name>
      <anchorfile>classshark_1_1_k_h_c_tree.html</anchorfile>
      <anchor>a62c2a26944e5c4d7f6ce9a93208b4956</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const_iterator</type>
      <name>mep_negative</name>
      <anchorfile>classshark_1_1_k_h_c_tree.html</anchorfile>
      <anchor>a65a65d149ed69d95c9c8782e42cd0226</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_normalInvNorm</name>
      <anchorfile>classshark_1_1_k_h_c_tree.html</anchorfile>
      <anchor>a55cfdcc3419ef36d6f4fa2455ebb54ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryTree *</type>
      <name>mep_parent</name>
      <anchorfile>classshark_1_1_k_h_c_tree.html</anchorfile>
      <anchor>a100ef54d8a4904afff8c188bf4e735f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryTree *</type>
      <name>mp_left</name>
      <anchorfile>classshark_1_1_k_h_c_tree.html</anchorfile>
      <anchor>a14c17e4fc65d1351cc23eceae05ce0d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryTree *</type>
      <name>mp_right</name>
      <anchorfile>classshark_1_1_k_h_c_tree.html</anchorfile>
      <anchor>acc95bb731d3bfac4a896820f8de04ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t *</type>
      <name>mp_indexList</name>
      <anchorfile>classshark_1_1_k_h_c_tree.html</anchorfile>
      <anchor>afdce442d41868d9a84dcfc954c78ce93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_size</name>
      <anchorfile>classshark_1_1_k_h_c_tree.html</anchorfile>
      <anchor>a825e00e68228cb1654b5ac0a25f4972a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_nodes</name>
      <anchorfile>classshark_1_1_k_h_c_tree.html</anchorfile>
      <anchor>ad07d8f306001f8e1bc9a321a3d11444e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LabeledData</name>
    <filename>classshark_1_1_labeled_data.html</filename>
    <templarg>class InputT</templarg>
    <templarg>class LabelT</templarg>
    <base>shark::ISerializable</base>
    <member kind="typedef">
      <type>InputT</type>
      <name>InputType</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga95ca0435602c7446d1e5120d07f970af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabelT</type>
      <name>LabelType</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gafce8ad49b878be9a9a00d43c2f0e7855</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnlabeledData&lt; InputT &gt;</type>
      <name>InputContainer</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga625c6a82bf244c493a35c90b029f8c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Data&lt; LabelT &gt;</type>
      <name>LabelContainer</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaf481fd43ec8fb355cd2cc7f8076b3962</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InputContainer::IndexSet</type>
      <name>IndexSet</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaee99a1f7070bf91bd40cd660fc9411b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InputLabelBatch&lt; typename Batch&lt; InputType &gt;::type &amp;, typename Batch&lt; LabelType &gt;::type &amp; &gt;</type>
      <name>batch_reference</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga6dcbd080f9f9ab3fa3e1e90ba7ca9dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InputLabelBatch&lt; typename Batch&lt; InputType &gt;::type const  &amp;, typename Batch&lt; LabelType &gt;::type const  &amp; &gt;</type>
      <name>const_batch_reference</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga4068b98a58ae69560e458afc8f57c511</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>batch_reference::reference</type>
      <name>element_reference</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga5c44f3de22b4fa1d1f28a86fafcf96b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_batch_reference::const_reference</type>
      <name>const_element_reference</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga04ea4c6c5368461a8bafa49001695b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; detail::DataElementIterator&lt; LabeledData&lt; InputType, LabelType &gt; &gt; &gt;</type>
      <name>element_range</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gab4e8fae144bffa51788924d868cace1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; detail::DataElementIterator&lt; LabeledData&lt; InputType, LabelType &gt; const  &gt; &gt;</type>
      <name>const_element_range</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga768dbd90d9f89fa968cd4c2c279a68eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::BatchRange&lt; LabeledData&lt; InputType, LabelType &gt; &gt;</type>
      <name>batch_range</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gab3dadfd210c18bfe97b897d25eb49ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::BatchRange&lt; LabeledData&lt; InputType, LabelType &gt; const  &gt;</type>
      <name>const_batch_range</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gae5270d17d2c684dca942c8b23f0b083f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const_element_range</type>
      <name>elements</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga63e2615845814fee2e8b5773a9d4048f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>element_range</type>
      <name>elements</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga0ab86bfc3c2251f6c4990ddd277c3569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_batch_range</type>
      <name>batches</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga6c3b7d09e870412534ef27988b950fc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>batch_range</type>
      <name>batches</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaf5d88e084735a9b685c79a73c133ee7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfBatches</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaca4b1e6083184385dba76a21b4c1d42b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfElements</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga5333445992cd6b14392cd80a1ab5403c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga30ea533b248897b6d97bc1d62293e362</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InputContainer const &amp;</type>
      <name>inputs</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga6f74e657c7e0c8a32b2456fb328bd653</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InputContainer &amp;</type>
      <name>inputs</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga07aca32d61711242a04d299db7be73a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LabelContainer const &amp;</type>
      <name>labels</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga6328a5aa2570c01a5ac5f25076071663</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LabelContainer &amp;</type>
      <name>labels</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gafecc4ffc759f9535a1ffbabfaa6e6c11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gacb49015294f7ca2d8d79e3cd90814468</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gab30206d1bdfee9c8676048979a6abc8d</anchor>
      <arglist>(std::size_t numBatches)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gab1c3ece164521531ad9d35f236740370</anchor>
      <arglist>(std::size_t size, element_type const &amp;element, std::size_t batchSize=DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga8bd9251209d0aa390d1da4d6e839861e</anchor>
      <arglist>(Data&lt; InputType &gt; const &amp;inputs, Data&lt; LabelType &gt; const &amp;labels)</arglist>
    </member>
    <member kind="function">
      <type>element_reference</type>
      <name>element</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaec57b5f22b3e8d2d67ad4b621f30fd54</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_element_reference</type>
      <name>element</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga958caad3a5b350e5687df89bf9833587</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>batch_reference</type>
      <name>batch</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga192f5eced10acf38f3ae723a3c400d98</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_batch_reference</type>
      <name>batch</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga575c51a098b17178c4443c6ffe98d8db</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>Shape const &amp;</type>
      <name>inputShape</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga134d41e34c69c494346367a570bf4ff8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>inputShape</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga3eace53afd7b57c7ba1b1619a43a1f97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Shape const &amp;</type>
      <name>labelShape</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga7f3308a970a6f4fe96aebf23755a6430</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>labelShape</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga71c45aa6968c8e9ea6ca43ab13f4b9a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga846df24c10a85b0454cf06cabe55dcc2</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gad2c0f1e5f794eb3c7e1c9d644ac6d0c1</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>makeIndependent</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga5a4a7922424072317ec868221e19e075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splitBatch</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac30b58de795e18e98901cd96b6b22d45</anchor>
      <arglist>(std::size_t batch, std::size_t elementIndex)</arglist>
    </member>
    <member kind="function">
      <type>LabeledData</type>
      <name>splice</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaf0ea94e3e28b6df4e12fcbe8040293ac</anchor>
      <arglist>(std::size_t batch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga3c9be5eff818d2c5eb10b35f7b47ee14</anchor>
      <arglist>(LabeledData const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga5b3eb1f239a148b1f9b004b12150fddd</anchor>
      <arglist>(typename Batch&lt; InputType &gt;::type const &amp;inputs, typename Batch&lt; LabelType &gt;::type const &amp;labels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga7bed012a832b567129949a7844525f3a</anchor>
      <arglist>(const_batch_reference batch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repartition</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga298a81625c3bcd482c3b68daf815c70b</anchor>
      <arglist>(Range const &amp;batchSizes)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>getPartitioning</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga2ef8f53cd23e5eb804b9f9dda6b25c31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reorderElements</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gae98f8421736e774da09ea3f15d985cfe</anchor>
      <arglist>(Range const &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shuffle</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga96ea65352abe5e2c0787e4154a48972f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LabeledData</type>
      <name>indexedSubset</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gae0d1826d38c41637eaaf99b3813ad133</anchor>
      <arglist>(IndexSet const &amp;indices) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::size_t</type>
      <name>DefaultBatchSize</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gad0796fae6f819e8ca309dea4247621be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InputContainer</type>
      <name>m_data</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga209379fc66f7caed4c18928e854dcf84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LabelContainer</type>
      <name>m_label</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaa5002076abc056a907733e0dfb6a4710</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaa3cac8411f8423f5de504e86e4ef8291</anchor>
      <arglist>(LabeledData &amp;a, LabeledData &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LabeledDataDistribution</name>
    <filename>classshark_1_1_labeled_data_distribution.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class LabelType</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LabeledDataDistribution</name>
      <anchorfile>classshark_1_1_labeled_data_distribution.html</anchorfile>
      <anchor>a179adab2dc89217d47fe1d0736679c46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>classshark_1_1_labeled_data_distribution.html</anchorfile>
      <anchor>ace4a2b81e54f0944d241b92a54f1a4c2</anchor>
      <arglist>(InputType &amp;input, LabelType &amp;label) const =0</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; InputType, LabelType &gt;</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_labeled_data_distribution.html</anchorfile>
      <anchor>a198219fda4f514aa5bba30629e57dd8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LabeledData&lt; InputType, LabelType &gt;</type>
      <name>generateDataset</name>
      <anchorfile>classshark_1_1_labeled_data_distribution.html</anchorfile>
      <anchor>ace15c1b51c87cd4b553427a55416b155</anchor>
      <arglist>(std::size_t size, std::size_t maximumBatchSize) const</arglist>
    </member>
    <member kind="function">
      <type>LabeledData&lt; InputType, LabelType &gt;</type>
      <name>generateDataset</name>
      <anchorfile>classshark_1_1_labeled_data_distribution.html</anchorfile>
      <anchor>a812eed2420c425e7943e73503dcf1155</anchor>
      <arglist>(std::size_t size) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LabelOrder</name>
    <filename>classshark_1_1_label_order.html</filename>
    <base>shark::INameable</base>
    <member kind="function">
      <type></type>
      <name>LabelOrder</name>
      <anchorfile>classshark_1_1_label_order.html</anchorfile>
      <anchor>afc8707eeb4e64581cfdecedcdb3fe831</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LabelOrder</name>
      <anchorfile>classshark_1_1_label_order.html</anchorfile>
      <anchor>afd943d9a642d6a6fb5cd383f91926c06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_label_order.html</anchorfile>
      <anchor>a4a00d32766c50892a6c02114fdc2ebae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalizeLabels</name>
      <anchorfile>classshark_1_1_label_order.html</anchorfile>
      <anchor>ab1dc3f2600d83fd8a1837cc4acf0ca4d</anchor>
      <arglist>(LabeledData&lt; RealVector, unsigned int &gt; &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreOriginalLabels</name>
      <anchorfile>classshark_1_1_label_order.html</anchorfile>
      <anchor>ac3a45a99342f3d066d85bc8b2bbbe86b</anchor>
      <arglist>(LabeledData&lt; RealVector, unsigned int &gt; &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLabelOrder</name>
      <anchorfile>classshark_1_1_label_order.html</anchorfile>
      <anchor>a24ebab5ae45adf6079880cac185b1784</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; &amp;labelOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLabelOrder</name>
      <anchorfile>classshark_1_1_label_order.html</anchorfile>
      <anchor>ac6205d51992b997a94c1eea179d6393e</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; const &amp;labelOrder)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>m_labelOrder</name>
      <anchorfile>classshark_1_1_label_order.html</anchorfile>
      <anchor>a6e16817308ef791fe7a7d8285a55b490</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LassoRegression</name>
    <filename>classshark_1_1_lasso_regression.html</filename>
    <templarg>class InputVectorType</templarg>
    <base>shark::AbstractTrainer</base>
    <base>shark::IParameterizable</base>
    <member kind="typedef">
      <type>LinearModel&lt; InputVectorType &gt;</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_lasso_regression.html</anchorfile>
      <anchor>aaa5953a1525e6777f08097307bf5b792</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabeledData&lt; InputVectorType, RealVector &gt;</type>
      <name>DataType</name>
      <anchorfile>classshark_1_1_lasso_regression.html</anchorfile>
      <anchor>ad09457449981c6e602f53d65d184c1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LassoRegression</name>
      <anchorfile>classshark_1_1_lasso_regression.html</anchorfile>
      <anchor>a6d72b15b0f10134187f75ecf51d2dde2</anchor>
      <arglist>(double lambda, double accuracy=0.01)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_lasso_regression.html</anchorfile>
      <anchor>ad8508272dd9a2c5821c85587c26dd3b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lambda</name>
      <anchorfile>classshark_1_1_lasso_regression.html</anchorfile>
      <anchor>a424828aaade483a29aab0382ebbaceb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLambda</name>
      <anchorfile>classshark_1_1_lasso_regression.html</anchorfile>
      <anchor>ad0a5195a4cf6ad535238f9330e61abd9</anchor>
      <arglist>(double lambda)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>accuracy</name>
      <anchorfile>classshark_1_1_lasso_regression.html</anchorfile>
      <anchor>a9b0659679b615f23713ac8a3669e6de1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccuracy</name>
      <anchorfile>classshark_1_1_lasso_regression.html</anchorfile>
      <anchor>a02b6de49b279a6bb90e1fcbd213a889f</anchor>
      <arglist>(double accuracy)</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_lasso_regression.html</anchorfile>
      <anchor>aa23ec16704158ce8b7f5d7f501f4429a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_lasso_regression.html</anchorfile>
      <anchor>ac51f1a84959f0084f23490a7dcf2b7cb</anchor>
      <arglist>(const RealVector &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_lasso_regression.html</anchorfile>
      <anchor>a5ed477193272500aedbb7f1191fb8e29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_lasso_regression.html</anchorfile>
      <anchor>acf451db20a82eef8547629c28db9db4e</anchor>
      <arglist>(ModelType &amp;model, DataType const &amp;dataset)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_lambda</name>
      <anchorfile>classshark_1_1_lasso_regression.html</anchorfile>
      <anchor>a5cb2b80c46682ceaf024501043bd6cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_accuracy</name>
      <anchorfile>classshark_1_1_lasso_regression.html</anchorfile>
      <anchor>af10df12bdcf1d2b03a71c5867a51cd9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LBFGS</name>
    <filename>classshark_1_1_l_b_f_g_s.html</filename>
    <templarg>class SearchPointType</templarg>
    <base>shark::AbstractLineSearchOptimizer</base>
    <member kind="typedef">
      <type>AbstractLineSearchOptimizer&lt; SearchPointType &gt;::ObjectiveFunctionType</type>
      <name>ObjectiveFunctionType</name>
      <anchorfile>classshark_1_1_l_b_f_g_s.html</anchorfile>
      <anchor>a547abec1b43a6f6ad1a06749dc3c217f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LBFGS</name>
      <anchorfile>classshark_1_1_l_b_f_g_s.html</anchorfile>
      <anchor>af1a1c3e07e77e4183383cd506ce121da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_l_b_f_g_s.html</anchorfile>
      <anchor>a9166b5a6d3a92af54895ab7308223de2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHistCount</name>
      <anchorfile>classshark_1_1_l_b_f_g_s.html</anchorfile>
      <anchor>a57f205e2184f5a1c4d57a6ac99ec94fa</anchor>
      <arglist>(unsigned int numhist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_l_b_f_g_s.html</anchorfile>
      <anchor>adbf39210c8d5255385700e2f5fb6e019</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_l_b_f_g_s.html</anchorfile>
      <anchor>ab5341c7990a3411e81bf04dd00b0983d</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initModel</name>
      <anchorfile>classshark_1_1_l_b_f_g_s.html</anchorfile>
      <anchor>aeee8fae6dba7fd99c3e4099fe6427797</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeSearchDirection</name>
      <anchorfile>classshark_1_1_l_b_f_g_s.html</anchorfile>
      <anchor>a2cf819c6eb6e886395ae71df403edc6e</anchor>
      <arglist>(ObjectiveFunctionType const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LCTree</name>
    <filename>classshark_1_1_l_c_tree.html</filename>
    <templarg>class VectorType</templarg>
    <templarg>int CuttingAccuracy</templarg>
    <base>shark::BinaryTree</base>
    <member kind="function">
      <type></type>
      <name>LCTree</name>
      <anchorfile>classshark_1_1_l_c_tree.html</anchorfile>
      <anchor>a2b66673868580ce17413f497f131e5df</anchor>
      <arglist>(Data&lt; RealVector &gt; const &amp;dataset, TreeConstruction tc=TreeConstruction())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>squaredDistanceLowerBound</name>
      <anchorfile>classshark_1_1_l_c_tree.html</anchorfile>
      <anchor>ada804c1f1a75c767dc6c40960172254b</anchor>
      <arglist>(VectorType const &amp;reference) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LCTree</name>
      <anchorfile>classshark_1_1_l_c_tree.html</anchorfile>
      <anchor>ae6e21af013959966a893cbb73bb8b534</anchor>
      <arglist>(LCTree *parent, std::size_t *list, std::size_t size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildTree</name>
      <anchorfile>classshark_1_1_l_c_tree.html</anchorfile>
      <anchor>a24332e2c05b6a959b8f98577f83ab88a</anchor>
      <arglist>(TreeConstruction tc, Range &amp;points)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>funct</name>
      <anchorfile>classshark_1_1_l_c_tree.html</anchorfile>
      <anchor>a8041ad1217804997a45ccbc257b54f59</anchor>
      <arglist>(VectorType const &amp;reference) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateNormal</name>
      <anchorfile>classshark_1_1_l_c_tree.html</anchorfile>
      <anchor>a254750fdf8053dfeead8442b783caba8</anchor>
      <arglist>(Range const &amp;samples)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorType</type>
      <name>m_normal</name>
      <anchorfile>classshark_1_1_l_c_tree.html</anchorfile>
      <anchor>aa7b6ca703653d477e649edb0e2cf5fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryTree *</type>
      <name>mep_parent</name>
      <anchorfile>classshark_1_1_l_c_tree.html</anchorfile>
      <anchor>a100ef54d8a4904afff8c188bf4e735f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryTree *</type>
      <name>mp_left</name>
      <anchorfile>classshark_1_1_l_c_tree.html</anchorfile>
      <anchor>a14c17e4fc65d1351cc23eceae05ce0d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryTree *</type>
      <name>mp_right</name>
      <anchorfile>classshark_1_1_l_c_tree.html</anchorfile>
      <anchor>acc95bb731d3bfac4a896820f8de04ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t *</type>
      <name>mp_indexList</name>
      <anchorfile>classshark_1_1_l_c_tree.html</anchorfile>
      <anchor>afdce442d41868d9a84dcfc954c78ce93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_size</name>
      <anchorfile>classshark_1_1_l_c_tree.html</anchorfile>
      <anchor>a825e00e68228cb1654b5ac0a25f4972a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_nodes</name>
      <anchorfile>classshark_1_1_l_c_tree.html</anchorfile>
      <anchor>ad07d8f306001f8e1bc9a321a3d11444e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LDA</name>
    <filename>classshark_1_1_l_d_a.html</filename>
    <base>AbstractWeightedTrainer&lt; LinearClassifier&lt;&gt;, unsigned int &gt;</base>
    <base>shark::IParameterizable</base>
    <member kind="function">
      <type></type>
      <name>LDA</name>
      <anchorfile>classshark_1_1_l_d_a.html</anchorfile>
      <anchor>ae9ed3a8047ccb47a568eb7b6ec638efb</anchor>
      <arglist>(double regularization=0.0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_l_d_a.html</anchorfile>
      <anchor>a393bdae1c49922552128c7fe310cd950</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>regularization</name>
      <anchorfile>classshark_1_1_l_d_a.html</anchorfile>
      <anchor>a57673aefbc9282a1772ee99121a09632</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRegularization</name>
      <anchorfile>classshark_1_1_l_d_a.html</anchorfile>
      <anchor>a6e5c08ed10cf6e2a95a853925a8ca41c</anchor>
      <arglist>(double regularization)</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_l_d_a.html</anchorfile>
      <anchor>a44509c51933cc29a3c069df195cb0a77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_l_d_a.html</anchorfile>
      <anchor>a5b65961cbc1b0a1188c74ec4fc82f60b</anchor>
      <arglist>(RealVector const &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_l_d_a.html</anchorfile>
      <anchor>a7a625e0968e015305316c577289c2764</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_l_d_a.html</anchorfile>
      <anchor>a53609e2f3691ec883cdff5332f213f0a</anchor>
      <arglist>(LinearClassifier&lt;&gt; &amp;model, LabeledData&lt; RealVector, unsigned int &gt; const &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_l_d_a.html</anchorfile>
      <anchor>a85af42411047e3b5a5327246faafd604</anchor>
      <arglist>(LinearClassifier&lt;&gt; &amp;model, WeightedLabeledData&lt; RealVector, unsigned int &gt; const &amp;dataset)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_regularization</name>
      <anchorfile>classshark_1_1_l_d_a.html</anchorfile>
      <anchor>ac97767c25480eaa828de0f18e091f398</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::LibSVMSelectionCriterion</name>
    <filename>structshark_1_1_lib_s_v_m_selection_criterion.html</filename>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_lib_s_v_m_selection_criterion.html</anchorfile>
      <anchor>a84b251c8ca0ef80fe224866063d25fc4</anchor>
      <arglist>(Problem &amp;problem, std::size_t &amp;i, std::size_t &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structshark_1_1_lib_s_v_m_selection_criterion.html</anchorfile>
      <anchor>a3ea14cbcfedf57f2cd5a630f84a65b11</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LinearClassifier</name>
    <filename>classshark_1_1_linear_classifier.html</filename>
    <templarg>class VectorType</templarg>
    <base>shark::Classifier</base>
    <member kind="typedef">
      <type>LinearModel&lt; VectorType &gt;::MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classshark_1_1_linear_classifier.html</anchorfile>
      <anchor>a3f38de0d9fa3688f1377c6ab74ab1091</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearClassifier</name>
      <anchorfile>classshark_1_1_linear_classifier.html</anchorfile>
      <anchor>a915efe9d7464c2c5bb2ed20102caa5fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearClassifier</name>
      <anchorfile>classshark_1_1_linear_classifier.html</anchorfile>
      <anchor>a2e67a1c7f2998c42d7729cc697d3c8d8</anchor>
      <arglist>(Shape const &amp;inputs, std::size_t numClasses, bool offset=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearClassifier</name>
      <anchorfile>classshark_1_1_linear_classifier.html</anchorfile>
      <anchor>acacab985d87154c7e4f3a5da2a2179cf</anchor>
      <arglist>(MatrixType const &amp;matrix, VectorType const &amp;offset=VectorType())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_linear_classifier.html</anchorfile>
      <anchor>a9bdf59bcaf5fe2ca2c29931567289953</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStructure</name>
      <anchorfile>classshark_1_1_linear_classifier.html</anchorfile>
      <anchor>abb0de810f6ea114d03217f1e9f747b41</anchor>
      <arglist>(Shape const &amp;inputs, std::size_t numClasses, bool offset=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStructure</name>
      <anchorfile>classshark_1_1_linear_classifier.html</anchorfile>
      <anchor>a2009f9598428f1674b9ac10fcb49ef76</anchor>
      <arglist>(MatrixType const &amp;matrix, VectorType const &amp;offset=VectorType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LinearCSvmTrainer</name>
    <filename>classshark_1_1_linear_c_svm_trainer.html</filename>
    <templarg>class InputType</templarg>
    <base>shark::AbstractLinearSvmTrainer</base>
    <member kind="function">
      <type></type>
      <name>LinearCSvmTrainer</name>
      <anchorfile>classshark_1_1_linear_c_svm_trainer.html</anchorfile>
      <anchor>a8677b6f19ea68f188cbb249edc895e9c</anchor>
      <arglist>(double C, bool offset, bool unconstrained=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_linear_c_svm_trainer.html</anchorfile>
      <anchor>ab775e6b9f43525fcf0cae67bbdc58914</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMcSvmType</name>
      <anchorfile>classshark_1_1_linear_c_svm_trainer.html</anchorfile>
      <anchor>a7de8ad805e0b63d3eca9412d8b21b578</anchor>
      <arglist>(McSvm type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_linear_c_svm_trainer.html</anchorfile>
      <anchor>abf7128243c28edc04a01f157593ece98</anchor>
      <arglist>(LinearClassifier&lt; InputType &gt; &amp;model, LabeledData&lt; InputType, unsigned int &gt; const &amp;dataset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LinearKernel</name>
    <filename>classshark_1_1_linear_kernel.html</filename>
    <templarg>class InputType</templarg>
    <base>shark::AbstractKernelFunction</base>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_linear_kernel.html</anchorfile>
      <anchor>a7670d367e5567de155331a8777ca5989</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstInputReference</type>
      <name>ConstInputReference</name>
      <anchorfile>classshark_1_1_linear_kernel.html</anchorfile>
      <anchor>ad39aed9c03cb3e712c16a7327c982726</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstBatchInputReference</type>
      <name>ConstBatchInputReference</name>
      <anchorfile>classshark_1_1_linear_kernel.html</anchorfile>
      <anchor>a30749e39918416f4d06140f42d7a685a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearKernel</name>
      <anchorfile>classshark_1_1_linear_kernel.html</anchorfile>
      <anchor>a1e5f7efc56dc2f75895fea4f7ea2a779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_linear_kernel.html</anchorfile>
      <anchor>a328c98dfd40a9692260aba1da0e75269</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_linear_kernel.html</anchorfile>
      <anchor>ab25e1b9f9a5916695421d91067d08141</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_linear_kernel.html</anchorfile>
      <anchor>a4c821f0c719f3033d69fd70d76546cdb</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_linear_kernel.html</anchorfile>
      <anchor>ac46b5d8fa1d529a9b91b1f7a139454f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_linear_kernel.html</anchorfile>
      <anchor>a7187a397bc1e8234704768e11ad7f607</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_linear_kernel.html</anchorfile>
      <anchor>acaecf31ff48c714a0d4253e779e1051c</anchor>
      <arglist>(ConstBatchInputReference x1, ConstBatchInputReference x2, RealMatrix &amp;result, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_linear_kernel.html</anchorfile>
      <anchor>ad37361c49a4eaacffaf5e4a5c36f8d7b</anchor>
      <arglist>(ConstBatchInputReference x1, ConstBatchInputReference x2, RealMatrix &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_linear_kernel.html</anchorfile>
      <anchor>ae0cbf6b5b20255c1c82f1a83542c0ebb</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficients, State const &amp;state, RealVector &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedInputDerivative</name>
      <anchorfile>classshark_1_1_linear_kernel.html</anchorfile>
      <anchor>a18a92f96d0a21f466498d858e8da0ea5</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficientsX2, State const &amp;state, BatchInputType &amp;gradient) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>featureDistanceSqr</name>
      <anchorfile>classshark_1_1_linear_kernel.html</anchorfile>
      <anchor>a96a55252abf6a48685b261d6dc64110e</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealMatrix</type>
      <name>featureDistanceSqr</name>
      <anchorfile>classshark_1_1_linear_kernel.html</anchorfile>
      <anchor>a1b559535f62665dfe715f03e8368a17c</anchor>
      <arglist>(ConstBatchInputReference x1, ConstBatchInputReference x2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_linear_kernel.html</anchorfile>
      <anchor>a458cbc276f274f6892a3ba2190510d6d</anchor>
      <arglist>(InArchive &amp;ar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_linear_kernel.html</anchorfile>
      <anchor>a2c8610c2917e19e1b0e35add96718463</anchor>
      <arglist>(OutArchive &amp;ar) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LinearModel</name>
    <filename>classshark_1_1_linear_model.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class ActivationFunction</templarg>
    <base>shark::AbstractModel</base>
    <member kind="typedef">
      <type>blas::vector&lt; typename InputType::value_type, typename InputType::device_type &gt;</type>
      <name>VectorType</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>afa5c434ee2941300c78d888b069dd1dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>blas::matrix&lt; typename InputType::value_type, blas::row_major, typename InputType::device_type &gt;</type>
      <name>MatrixType</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>afa32d6a99e249c080ff0f21f1814c804</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>ac853fcaa6620e0eaf0e7c7f81a31b646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>af91aadf2cf38896d43d79bf1caa7218d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ParameterVectorType</type>
      <name>ParameterVectorType</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a77c13e729eb7160c2ef7ed6b9313b127</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearModel</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a7ab8185eb1133a27b4a483422c73d614</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearModel</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>aaeeb23bba112546d102f5e6a092d79db</anchor>
      <arglist>(Shape const &amp;inputs, Shape const &amp;outputs=1, bool offset=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>aeba0a314a0e19aa2f05a91517eea1467</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearModel</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a6713c56a83a0616270cdbd4d47982258</anchor>
      <arglist>(MatrixType const &amp;matrix, VectorType const &amp;offset=VectorType())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOffset</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>ac5fb403f9be663cd2e3e40691dc99379</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>af906b5c987b57e45a8a2a6d36a56bb55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a9eeb86bc2b2c822fa5b9617e80a98d91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ParameterVectorType</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a26fc78bc3f8a04e11b41542c3dfe3dec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>ad7074a494d2ac2bc1bc78eb9fd2d5927</anchor>
      <arglist>(ParameterVectorType const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>aaf895685ab647b2762ad0725e34d97a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStructure</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a901efd377ffaf2d09a50d2adcbd6f9d4</anchor>
      <arglist>(Shape const &amp;inputs, Shape const &amp;outputs=1, bool offset=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStructure</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a4b92cbdfb2d0d45d3a89e7154924af31</anchor>
      <arglist>(MatrixType const &amp;matrix, VectorType const &amp;offset=VectorType())</arglist>
    </member>
    <member kind="function">
      <type>MatrixType const &amp;</type>
      <name>matrix</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>ad16f3372ed0f7b3aa3c13c5519c7f6a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType &amp;</type>
      <name>matrix</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>aa68b04513fc87f2cd38f019481d84596</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorType const &amp;</type>
      <name>offset</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a5f56398c9b4c1f6705ff9c31c8c5e054</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorType &amp;</type>
      <name>offset</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a909d5f93bb93e3b13b093167d613f50a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ActivationFunction const &amp;</type>
      <name>activationFunction</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>ac51bc24c8a03f67237bf7f10ed4e0894</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ActivationFunction &amp;</type>
      <name>activationFunction</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a9c89cea1089bc305055cf4e8f3088764</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>aa24c6a19288e028495d0bef6f55f8131</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a43a67ce544b28a63664f73f2edec68e4</anchor>
      <arglist>(BatchInputType const &amp;inputs, BatchOutputType &amp;outputs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a489a2c35efe9bf965a9fd167993883ac</anchor>
      <arglist>(InputType const &amp;input, VectorType &amp;output) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a64719fbce6e8de9fdc79ccc6d0535d79</anchor>
      <arglist>(BatchInputType const &amp;inputs, BatchOutputType &amp;outputs, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a6e9fdbdec8a3eeef0aa6d6bcbb6a917e</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, ParameterVectorType &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedInputDerivative</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a453cbfdae76a34c3bef4de54246f2a15</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, MatrixType &amp;derivative) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedDerivatives</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a5019b360632186848424561bcb49bcb7</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, ParameterVectorType &amp;parameterDerivative, MatrixType &amp;inputDerivative) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>add90eac4cd04eb844acbf0ab0b32a9af</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a70ce96ffbc504cbf6bc55637fbef2d95</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>ac7edef74da55322b6aef0ba65b08592d</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs) const</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a6b09b00726d7317e0c2e95084d22e42e</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs, State &amp;state) const=0</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_linear_model.html</anchorfile>
      <anchor>a3a331290a6cb2840663d2178899366c8</anchor>
      <arglist>(InputType const &amp;pattern, OutputType &amp;output) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::LinearNeuron</name>
    <filename>structshark_1_1_linear_neuron.html</filename>
    <member kind="typedef">
      <type>EmptyState</type>
      <name>State</name>
      <anchorfile>structshark_1_1_linear_neuron.html</anchorfile>
      <anchor>a25338b263dd7c7aaf03489df051c768b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalInPlace</name>
      <anchorfile>structshark_1_1_linear_neuron.html</anchorfile>
      <anchor>a7498aabc6f6aded3be3d1b419a65f33d</anchor>
      <arglist>(Arg &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalInPlace</name>
      <anchorfile>structshark_1_1_linear_neuron.html</anchorfile>
      <anchor>a0b7e58f22bfeac544e3b6468cae6702e</anchor>
      <arglist>(Arg &amp;arg, State const &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyDerivative</name>
      <anchorfile>structshark_1_1_linear_neuron.html</anchorfile>
      <anchor>aa8754b55470e7c9e329d032826970f40</anchor>
      <arglist>(Output const &amp;output, Derivative &amp;der, State const &amp;state) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::CrossEntropyMethod::LinearNoise</name>
    <filename>classshark_1_1_cross_entropy_method_1_1_linear_noise.html</filename>
    <base>shark::CrossEntropyMethod::INoiseType</base>
    <member kind="function">
      <type></type>
      <name>LinearNoise</name>
      <anchorfile>classshark_1_1_cross_entropy_method_1_1_linear_noise.html</anchorfile>
      <anchor>a7c766e1314d0c921ccf2a6d2bbed76d5</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>noiseValue</name>
      <anchorfile>classshark_1_1_cross_entropy_method_1_1_linear_noise.html</anchorfile>
      <anchor>a3ea315bb004fc14c6c23f909f4c49a1a</anchor>
      <arglist>(int t) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_cross_entropy_method_1_1_linear_noise.html</anchorfile>
      <anchor>ae6ef7e2b639f5d30b056e7af4995d4f7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::LinearRankingSelection</name>
    <filename>structshark_1_1_linear_ranking_selection.html</filename>
    <templarg>typename Ordering</templarg>
    <member kind="function">
      <type></type>
      <name>LinearRankingSelection</name>
      <anchorfile>structshark_1_1_linear_ranking_selection.html</anchorfile>
      <anchor>a13bfbfd23561a7b6a652952e2d00ce13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_linear_ranking_selection.html</anchorfile>
      <anchor>a580dcf5f597966ebdbde9d3fca4c7f92</anchor>
      <arglist>(RngType &amp;rng, InIterator individuals, InIterator individualsE, OutIterator out, OutIterator outE) const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>etaMax</name>
      <anchorfile>structshark_1_1_linear_ranking_selection.html</anchorfile>
      <anchor>a16b9b1936391c3badddc2941391d2300</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LinearRegression</name>
    <filename>classshark_1_1_linear_regression.html</filename>
    <base>AbstractTrainer&lt; LinearModel&lt;&gt; &gt;</base>
    <base>shark::IParameterizable</base>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL</type>
      <name>LinearRegression</name>
      <anchorfile>classshark_1_1_linear_regression.html</anchorfile>
      <anchor>a33f1e9c741616f6cb5e64953bc721b66</anchor>
      <arglist>(double regularization=0.0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_linear_regression.html</anchorfile>
      <anchor>a9f7dced7c5b2ca4e56e876d3dec7a2e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>regularization</name>
      <anchorfile>classshark_1_1_linear_regression.html</anchorfile>
      <anchor>a178a2c8fc36f020fd353256fa8d044ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRegularization</name>
      <anchorfile>classshark_1_1_linear_regression.html</anchorfile>
      <anchor>ab4781b500d756133ffc8621ee519c2ae</anchor>
      <arglist>(double regularization)</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_linear_regression.html</anchorfile>
      <anchor>ac1cf68783fe0cd6ecc5e7a03f2043017</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_linear_regression.html</anchorfile>
      <anchor>a0685536ee2f4abd6d739ccd86a541c41</anchor>
      <arglist>(const RealVector &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_linear_regression.html</anchorfile>
      <anchor>a335aac86961275889106ef90b51f64b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_linear_regression.html</anchorfile>
      <anchor>a7ca068abe50a7b1eb03305e2cc21c4c5</anchor>
      <arglist>(LinearModel&lt;&gt; &amp;model, LabeledData&lt; RealVector, RealVector &gt; const &amp;dataset)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_regularization</name>
      <anchorfile>classshark_1_1_linear_regression.html</anchorfile>
      <anchor>a1b3c7e48f0eee81cbb99fd05aa3e7571</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LinearSAGTrainer</name>
    <filename>classshark_1_1_linear_s_a_g_trainer.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class LabelType</templarg>
    <base>shark::AbstractWeightedTrainer</base>
    <base>shark::IParameterizable</base>
    <member kind="typedef">
      <type>Base::ModelType</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_linear_s_a_g_trainer.html</anchorfile>
      <anchor>a33d1c1faf1d83e0eac1506daa718ca04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::WeightedDatasetType</type>
      <name>WeightedDatasetType</name>
      <anchorfile>classshark_1_1_linear_s_a_g_trainer.html</anchorfile>
      <anchor>aa6a8809d447e593855a32e6cb3156a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::LinearSAGTrainerBase&lt; InputType, LabelType &gt;::LossType</type>
      <name>LossType</name>
      <anchorfile>classshark_1_1_linear_s_a_g_trainer.html</anchorfile>
      <anchor>aaabdd7fe303dcafb9ec99ffd993286c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearSAGTrainer</name>
      <anchorfile>classshark_1_1_linear_s_a_g_trainer.html</anchorfile>
      <anchor>a160c3456f148c696d13aee3a0dcca402</anchor>
      <arglist>(LossType const *loss, double lambda=0, bool offset=true)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_linear_s_a_g_trainer.html</anchorfile>
      <anchor>a14d282d2649ff7d489730833f147b2d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_linear_s_a_g_trainer.html</anchorfile>
      <anchor>a6de6309b709e74361bce1b2ab83f47c6</anchor>
      <arglist>(ModelType &amp;model, WeightedDatasetType const &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>epochs</name>
      <anchorfile>classshark_1_1_linear_s_a_g_trainer.html</anchorfile>
      <anchor>a1e95ff06c2b294528f1d2ef394943142</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEpochs</name>
      <anchorfile>classshark_1_1_linear_s_a_g_trainer.html</anchorfile>
      <anchor>aadca064196d92cac8b8f23f210ce89c9</anchor>
      <arglist>(std::size_t value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lambda</name>
      <anchorfile>classshark_1_1_linear_s_a_g_trainer.html</anchorfile>
      <anchor>aa9cfa27f5a150ef3a701ee208961a838</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLambda</name>
      <anchorfile>classshark_1_1_linear_s_a_g_trainer.html</anchorfile>
      <anchor>ac3f3baaf33ba5056acf4799b017ea806</anchor>
      <arglist>(double lambda)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trainOffset</name>
      <anchorfile>classshark_1_1_linear_s_a_g_trainer.html</anchorfile>
      <anchor>a68fcdf51001257ed05a67d42d2671c10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrainOffset</name>
      <anchorfile>classshark_1_1_linear_s_a_g_trainer.html</anchorfile>
      <anchor>a5cbb50a1b75f57c7dc0fe89eb28b159b</anchor>
      <arglist>(bool offset)</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_linear_s_a_g_trainer.html</anchorfile>
      <anchor>aa2f194a2bf0013a85e567c3802391837</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_linear_s_a_g_trainer.html</anchorfile>
      <anchor>aebbf0decaa38e3fc73a13221ec3f4a9b</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_linear_s_a_g_trainer.html</anchorfile>
      <anchor>aa424454e6433505b2ecb93c223ae43bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_linear_s_a_g_trainer.html</anchorfile>
      <anchor>ad35ae0b236c45b73f749285a54288e89</anchor>
      <arglist>(ModelType &amp;model, WeightedDatasetType const &amp;dataset)=0</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_linear_s_a_g_trainer.html</anchorfile>
      <anchor>a9e5711480e4f1e214ff3c30a9604d10a</anchor>
      <arglist>(ModelType &amp;model, DatasetType const &amp;dataset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LineSearch</name>
    <filename>classshark_1_1_line_search.html</filename>
    <templarg>class SearchPointType</templarg>
    <base>shark::ISerializable</base>
    <member kind="typedef">
      <type>AbstractObjectiveFunction&lt; SearchPointType, double &gt;</type>
      <name>ObjectiveFunction</name>
      <anchorfile>classshark_1_1_line_search.html</anchorfile>
      <anchor>a3d0c55b5eda8c18a55b1501a90f065cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LineSearch</name>
      <anchorfile>classshark_1_1_line_search.html</anchorfile>
      <anchor>ab909daa31662c63dbfc3a06c59c663fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LineSearchType</type>
      <name>lineSearchType</name>
      <anchorfile>classshark_1_1_line_search.html</anchorfile>
      <anchor>aa6a5189c633cdb9afa68766fbf0e450e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LineSearchType &amp;</type>
      <name>lineSearchType</name>
      <anchorfile>classshark_1_1_line_search.html</anchorfile>
      <anchor>a685f8640b776aa2aa8a0089318de9e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minInterval</name>
      <anchorfile>classshark_1_1_line_search.html</anchorfile>
      <anchor>a217ebe008c4c33da50caca40e9d6c1f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>minInterval</name>
      <anchorfile>classshark_1_1_line_search.html</anchorfile>
      <anchor>a66da1b95f29121e24093a2b2c79d5a1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxInterval</name>
      <anchorfile>classshark_1_1_line_search.html</anchorfile>
      <anchor>acb37384b4218a4e7893c04a7dd8a0594</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>maxInterval</name>
      <anchorfile>classshark_1_1_line_search.html</anchorfile>
      <anchor>aec10878cb3b60e816f3cb9fcbf445a80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_line_search.html</anchorfile>
      <anchor>ab9c07455e28cb27e697909daba8005d5</anchor>
      <arglist>(ObjectiveFunction const &amp;objectiveFunction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_line_search.html</anchorfile>
      <anchor>add7cf71eb433f98c0af432aaf8f7717a</anchor>
      <arglist>(SearchPointType &amp;searchPoint, double &amp;pointValue, SearchPointType const &amp;newtonDirection, SearchPointType &amp;derivative, double stepLength=1.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_line_search.html</anchorfile>
      <anchor>aaff584e0cb9bb7fd7eddb6f7420042b8</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_line_search.html</anchorfile>
      <anchor>a6921816c3674b7ca83f308df70932da3</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_minInterval</name>
      <anchorfile>classshark_1_1_line_search.html</anchorfile>
      <anchor>ab05a9756db4f4b60d3f8b4ebbad9c6a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_maxInterval</name>
      <anchorfile>classshark_1_1_line_search.html</anchorfile>
      <anchor>a9cf4541ac22048de56dfb797b2e94cec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LineSearchType</type>
      <name>m_lineSearchType</name>
      <anchorfile>classshark_1_1_line_search.html</anchorfile>
      <anchor>a8c7f2e10fb43999dc6a9355ce2220bfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ObjectiveFunction const  *</type>
      <name>m_function</name>
      <anchorfile>classshark_1_1_line_search.html</anchorfile>
      <anchor>a163fd204951c455d94e7a554df98a4d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LMCMA</name>
    <filename>classshark_1_1_l_m_c_m_a.html</filename>
    <base>AbstractSingleObjectiveOptimizer&lt; RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>LMCMA</name>
      <anchorfile>classshark_1_1_l_m_c_m_a.html</anchorfile>
      <anchor>a1f2852ce27c7333c44630c5294246c42</anchor>
      <arglist>(random::rng_type &amp;rng=random::globalRng)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_l_m_c_m_a.html</anchorfile>
      <anchor>a758588cfe6ceb146bc54375c257333d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>suggestLambda</name>
      <anchorfile>classshark_1_1_l_m_c_m_a.html</anchorfile>
      <anchor>a8846e369c997015e1759d7ce315a3563</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>suggestMu</name>
      <anchorfile>classshark_1_1_l_m_c_m_a.html</anchorfile>
      <anchor>aa9751cb33edf7452cee4984f1c5fb2e7</anchor>
      <arglist>(unsigned int lambda)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_l_m_c_m_a.html</anchorfile>
      <anchor>a0636affdccf6eca66033fa85424ae7c4</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, SearchPointType const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_l_m_c_m_a.html</anchorfile>
      <anchor>a7371b088ce92161da051ce664a97e9a0</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, SearchPointType const &amp;initialSearchPoint, unsigned int lambda, double mu, double initialSigma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_l_m_c_m_a.html</anchorfile>
      <anchor>a9e0f9265cf2592e3c88f85418457d190</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sigma</name>
      <anchorfile>classshark_1_1_l_m_c_m_a.html</anchorfile>
      <anchor>a226a579df53c6b4d28d854912999f667</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>mean</name>
      <anchorfile>classshark_1_1_l_m_c_m_a.html</anchorfile>
      <anchor>af03c5c09687c82760dd2c4f94ef4adc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>weights</name>
      <anchorfile>classshark_1_1_l_m_c_m_a.html</anchorfile>
      <anchor>a9986354da96031a9ea68893836293075</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>evolutionPath</name>
      <anchorfile>classshark_1_1_l_m_c_m_a.html</anchorfile>
      <anchor>aaab9999a4247ecfef8caa3d26045545a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>mu</name>
      <anchorfile>classshark_1_1_l_m_c_m_a.html</anchorfile>
      <anchor>a185f5f8fa9efd945008d6492f9ad5ae4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int &amp;</type>
      <name>mu</name>
      <anchorfile>classshark_1_1_l_m_c_m_a.html</anchorfile>
      <anchor>a7a022e8fa7e293afc0bea7dce439d464</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>lambda</name>
      <anchorfile>classshark_1_1_l_m_c_m_a.html</anchorfile>
      <anchor>a0937e25d91951e5e8f10923ab5da5340</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int &amp;</type>
      <name>lambda</name>
      <anchorfile>classshark_1_1_l_m_c_m_a.html</anchorfile>
      <anchor>aae01a84a110e8b1d0d091e306e64ebe4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::LogisticNeuron</name>
    <filename>structshark_1_1_logistic_neuron.html</filename>
    <member kind="typedef">
      <type>EmptyState</type>
      <name>State</name>
      <anchorfile>structshark_1_1_logistic_neuron.html</anchorfile>
      <anchor>acec00967da0c34f8eacb300bb25f26f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalInPlace</name>
      <anchorfile>structshark_1_1_logistic_neuron.html</anchorfile>
      <anchor>a33ffb9cff12aa8ac45675d7561bbbbe2</anchor>
      <arglist>(Arg &amp;arg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalInPlace</name>
      <anchorfile>structshark_1_1_logistic_neuron.html</anchorfile>
      <anchor>ad0573cccf2ef22b76b8775dabd2490c3</anchor>
      <arglist>(Arg &amp;arg, State &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyDerivative</name>
      <anchorfile>structshark_1_1_logistic_neuron.html</anchorfile>
      <anchor>afd46fbdec2e27d513994850946a6380b</anchor>
      <arglist>(Output const &amp;output, Derivative &amp;der, State const &amp;state) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LogisticRegression</name>
    <filename>classshark_1_1_logistic_regression.html</filename>
    <templarg>class InputVectorType</templarg>
    <base>shark::AbstractWeightedTrainer</base>
    <base>shark::IParameterizable</base>
    <member kind="typedef">
      <type>base_type::ModelType</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_logistic_regression.html</anchorfile>
      <anchor>a1d653feba69db50f94611dfba14f9d88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::DatasetType</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_logistic_regression.html</anchorfile>
      <anchor>ae4a9dfa85dc2e843c49e77d567a9a76d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::WeightedDatasetType</type>
      <name>WeightedDatasetType</name>
      <anchorfile>classshark_1_1_logistic_regression.html</anchorfile>
      <anchor>afec0e13e21ec6fd4b291a660f75c44b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogisticRegression</name>
      <anchorfile>classshark_1_1_logistic_regression.html</anchorfile>
      <anchor>a825243d1d1a808be12d822333c58f6fd</anchor>
      <arglist>(double lambda1=0, double lambda2=0, bool bias=true, double accuracy=1.e-8)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_logistic_regression.html</anchorfile>
      <anchor>a8513a39378376eb2155e52fd1ab504f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lambda1</name>
      <anchorfile>classshark_1_1_logistic_regression.html</anchorfile>
      <anchor>a6608d0494e8d9cc32d6a1a14a9ddbd90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lambda2</name>
      <anchorfile>classshark_1_1_logistic_regression.html</anchorfile>
      <anchor>ab803c9232597463aa686b02434d3a15f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLambda1</name>
      <anchorfile>classshark_1_1_logistic_regression.html</anchorfile>
      <anchor>ad0cbcad123fdab3818c063388d4bd458</anchor>
      <arglist>(double lambda)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLambda2</name>
      <anchorfile>classshark_1_1_logistic_regression.html</anchorfile>
      <anchor>a9c836fe21f4db962f7f50350ad90e4e0</anchor>
      <arglist>(double lambda)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>accuracy</name>
      <anchorfile>classshark_1_1_logistic_regression.html</anchorfile>
      <anchor>a08948cf00fbe0ae3263449ca3f49ab36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccuracy</name>
      <anchorfile>classshark_1_1_logistic_regression.html</anchorfile>
      <anchor>a5e792090a1db8d5eb4503e10bba38872</anchor>
      <arglist>(double accuracy)</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_logistic_regression.html</anchorfile>
      <anchor>a45c601e09b06f3b464fdc978f9d40493</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_logistic_regression.html</anchorfile>
      <anchor>a99b7a94494a7544b82164c70152f7434</anchor>
      <arglist>(RealVector const &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_logistic_regression.html</anchorfile>
      <anchor>a119f9feb4a345c46e04fd1aad0875cd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_logistic_regression.html</anchorfile>
      <anchor>ad7301dbc776c3f6027c95817439dbd66</anchor>
      <arglist>(ModelType &amp;model, DatasetType const &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_logistic_regression.html</anchorfile>
      <anchor>a9e8dd39f9b5bf73301079f9d441a2b53</anchor>
      <arglist>(ModelType &amp;model, WeightedDatasetType const &amp;dataset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LooError</name>
    <filename>classshark_1_1_loo_error.html</filename>
    <templarg>class ModelTypeT</templarg>
    <templarg>class LabelType</templarg>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="typedef">
      <type>ModelTypeT</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_loo_error.html</anchorfile>
      <anchor>aeebe3f649a655a693566c209f8fde436</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ModelType::InputType</type>
      <name>InputType</name>
      <anchorfile>classshark_1_1_loo_error.html</anchorfile>
      <anchor>a3d4e7296d56808b83f609ecb70f121aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ModelType::OutputType</type>
      <name>OutputType</name>
      <anchorfile>classshark_1_1_loo_error.html</anchorfile>
      <anchor>ae009af284a0f073b1118fcaeb9a92356</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabeledData&lt; InputType, LabelType &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_loo_error.html</anchorfile>
      <anchor>a98fd037674411d450eb935f09319bb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractTrainer&lt; ModelType, LabelType &gt;</type>
      <name>TrainerType</name>
      <anchorfile>classshark_1_1_loo_error.html</anchorfile>
      <anchor>a5bc94bd972315845cb98d73988f6d908</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractLoss&lt; LabelType, typename ModelType::OutputType &gt;</type>
      <name>LossType</name>
      <anchorfile>classshark_1_1_loo_error.html</anchorfile>
      <anchor>a7b1a832c24da5cce462b16c0a6a0566c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LooError</name>
      <anchorfile>classshark_1_1_loo_error.html</anchorfile>
      <anchor>abf0bc6ef63dc7648e2fc257b7c6587cb</anchor>
      <arglist>(DatasetType const &amp;dataset, ModelType *model, TrainerType *trainer, LossType *loss, IParameterizable&lt;&gt; *meta=NULL)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_loo_error.html</anchorfile>
      <anchor>a4deb85efd90bada09269d3433e72497a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_loo_error.html</anchorfile>
      <anchor>ac0261f681ff5438e68e8a29fe64265dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_loo_error.html</anchorfile>
      <anchor>ac21fc9ca54e8f324cc6136bc5cebb121</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_loo_error.html</anchorfile>
      <anchor>af232bdbe9573aae2d81d9d574c331425</anchor>
      <arglist>(const RealVector &amp;parameters) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataView&lt; DatasetType const  &gt;</type>
      <name>m_dataset</name>
      <anchorfile>classshark_1_1_loo_error.html</anchorfile>
      <anchor>a5a0ada9191df98c3e76945c933c0baee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IParameterizable *</type>
      <name>mep_meta</name>
      <anchorfile>classshark_1_1_loo_error.html</anchorfile>
      <anchor>aea70652be0f160c383401a7355f298f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ModelType *</type>
      <name>mep_model</name>
      <anchorfile>classshark_1_1_loo_error.html</anchorfile>
      <anchor>a381cef0b5509ecb47d8689d7bc31a0af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TrainerType *</type>
      <name>mep_trainer</name>
      <anchorfile>classshark_1_1_loo_error.html</anchorfile>
      <anchor>ad1255ac86d5d31b56156ee7a4b9a6783</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LossType *</type>
      <name>mep_loss</name>
      <anchorfile>classshark_1_1_loo_error.html</anchorfile>
      <anchor>a44b42d66c0a82c1605a3051d0641c471</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LooErrorCSvm</name>
    <filename>classshark_1_1_loo_error_c_svm.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class CacheType</templarg>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="typedef">
      <type>CacheType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_loo_error_c_svm.html</anchorfile>
      <anchor>ac59294abcb1237b7a163b6f9d540a2fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_loo_error_c_svm.html</anchorfile>
      <anchor>ab00b93cea16ec324f7d93627ae597c97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabeledData&lt; InputType, unsigned int &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_loo_error_c_svm.html</anchorfile>
      <anchor>aafab716c7ab49ef95a8e42c50543e97f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LooErrorCSvm</name>
      <anchorfile>classshark_1_1_loo_error_c_svm.html</anchorfile>
      <anchor>a5edf0690f5406fc44ba13806e91c72b0</anchor>
      <arglist>(DatasetType const &amp;dataset, KernelType *kernel, bool withOffset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_loo_error_c_svm.html</anchorfile>
      <anchor>ae3e70fd4d630eaa9baee7e3b2d6e7bdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_loo_error_c_svm.html</anchorfile>
      <anchor>a8b79c806757d7d220d3f5c22c473a767</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_loo_error_c_svm.html</anchorfile>
      <anchor>aa60c4207ea463cacbeece3547f943031</anchor>
      <arglist>(const RealVector &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_loo_error_c_svm.html</anchorfile>
      <anchor>a7707d1eaf38cad24a585eb3f1bcc89d1</anchor>
      <arglist>(const RealVector &amp;params, QpStoppingCondition &amp;stop)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::statistics::LowerQuantile</name>
    <filename>classshark_1_1statistics_1_1_lower_quantile.html</filename>
    <base>shark::statistics::Quantile</base>
    <member kind="function">
      <type></type>
      <name>LowerQuantile</name>
      <anchorfile>classshark_1_1statistics_1_1_lower_quantile.html</anchorfile>
      <anchor>a712a7a241400231945d95c1f02f5e74a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::LRUCache</name>
    <filename>classshark_1_1_l_r_u_cache.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>LRUCache</name>
      <anchorfile>classshark_1_1_l_r_u_cache.html</anchorfile>
      <anchor>ad2dd07a0ed9d6628dd54328e9131352b</anchor>
      <arglist>(std::size_t lines, std::size_t cachesize=0x4000000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LRUCache</name>
      <anchorfile>classshark_1_1_l_r_u_cache.html</anchorfile>
      <anchor>a353c4c3ab265ca17f90686466fc99d1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCached</name>
      <anchorfile>classshark_1_1_l_r_u_cache.html</anchorfile>
      <anchor>aa7fe0128f8b11bfab3e6e89d0544b4dd</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>lineLength</name>
      <anchorfile>classshark_1_1_l_r_u_cache.html</anchorfile>
      <anchor>ad8cae64a351bdef5e03976d1e5176072</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>cachedLines</name>
      <anchorfile>classshark_1_1_l_r_u_cache.html</anchorfile>
      <anchor>a02ecc15b8471e026cfe4a5f93bf66b49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getCacheLine</name>
      <anchorfile>classshark_1_1_l_r_u_cache.html</anchorfile>
      <anchor>a1d1d221a9216657a86b799233d80c1af</anchor>
      <arglist>(std::size_t i, std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getLinePointer</name>
      <anchorfile>classshark_1_1_l_r_u_cache.html</anchorfile>
      <anchor>a2848536687dec954b5ec1cea247866eb</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>T const *</type>
      <name>getLinePointer</name>
      <anchorfile>classshark_1_1_l_r_u_cache.html</anchorfile>
      <anchor>aad55c9f2d4c55fd38e494ce98907851c</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLine</name>
      <anchorfile>classshark_1_1_l_r_u_cache.html</anchorfile>
      <anchor>a17d6a25d7e772893c10ec0cdd3f8670f</anchor>
      <arglist>(std::size_t i, std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markLineForDeletion</name>
      <anchorfile>classshark_1_1_l_r_u_cache.html</anchorfile>
      <anchor>a738129f952a28aa14f35c952079d0a7e</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapLineIndices</name>
      <anchorfile>classshark_1_1_l_r_u_cache.html</anchorfile>
      <anchor>af995657d3a4cd3c7c85550e0fb056985</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_l_r_u_cache.html</anchorfile>
      <anchor>ae089a1943125f1be80d521caaefdfd0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>listIndex</name>
      <anchorfile>classshark_1_1_l_r_u_cache.html</anchorfile>
      <anchor>a96690c348d7b3e7b45f5efbb093da7e6</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxSize</name>
      <anchorfile>classshark_1_1_l_r_u_cache.html</anchorfile>
      <anchor>a54c4f8d27361379cc684a5f3bd0ad2c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classshark_1_1_l_r_u_cache.html</anchorfile>
      <anchor>afd6ed6c3442f200616f4c7d4cee32144</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::LZ1</name>
    <filename>structshark_1_1benchmarks_1_1_l_z1.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>LZ1</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z1.html</anchorfile>
      <anchor>a4f49d50aa120d1c272eb62995aac5fcd</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z1.html</anchorfile>
      <anchor>af62fad6d3d34ac7079969cbdfc502bc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z1.html</anchorfile>
      <anchor>aaa9dc0d48c474dcd1a90fc20f9976c9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z1.html</anchorfile>
      <anchor>a5ed5a457e1f2f871d315371069a3f3f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z1.html</anchorfile>
      <anchor>accb56e066ede0fa10d1ea1bf00fc7884</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z1.html</anchorfile>
      <anchor>abca225f6c07e9197a81387bd2b8a7956</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z1.html</anchorfile>
      <anchor>ab3df9ff40d44b994c26b22f6c57d61cd</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::LZ2</name>
    <filename>structshark_1_1benchmarks_1_1_l_z2.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>LZ2</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z2.html</anchorfile>
      <anchor>af0a8146e80fb6468ce3eed39f059a7d5</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z2.html</anchorfile>
      <anchor>af77c5160f1f6173ccfb6b581036521b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z2.html</anchorfile>
      <anchor>a08364bec8d57389932e3dfa2448914f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z2.html</anchorfile>
      <anchor>a222d532b85ecee40106cad7a767755f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z2.html</anchorfile>
      <anchor>a7c1862d3c9a260552c9877b6f45771b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z2.html</anchorfile>
      <anchor>a0894f1c66ee4d1d5128c17c873914e48</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z2.html</anchorfile>
      <anchor>ac3a3e0a29c605b03fcce8fc9b8519f49</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::LZ3</name>
    <filename>structshark_1_1benchmarks_1_1_l_z3.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>LZ3</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z3.html</anchorfile>
      <anchor>a218132b4f14accc2ce923f26cc992865</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z3.html</anchorfile>
      <anchor>a60aa48d738b898b294abfbd2b72cd1a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z3.html</anchorfile>
      <anchor>a5cb2f0ebcc28e1009a28ff5c63e28c8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z3.html</anchorfile>
      <anchor>a78a230402c7097c158c4ad889cd889bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z3.html</anchorfile>
      <anchor>ab293d0025bbc62de227a913a0f162310</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z3.html</anchorfile>
      <anchor>a99ba4f806ab92be2fea0bc45a94ed6bf</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z3.html</anchorfile>
      <anchor>a92c8d6c2777e0d0c776094b4595fa27b</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::LZ4</name>
    <filename>structshark_1_1benchmarks_1_1_l_z4.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>LZ4</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z4.html</anchorfile>
      <anchor>a1e46892b10da91bfe60f612a3c29955a</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z4.html</anchorfile>
      <anchor>a9caa5c83a2afba45667b96c2d9cdfe79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z4.html</anchorfile>
      <anchor>a865fd55d19c334375052555a68623c73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z4.html</anchorfile>
      <anchor>ad7e6b46715c5a4cab687366826da2f96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z4.html</anchorfile>
      <anchor>a44d491a7b984bff425645239c0a38132</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z4.html</anchorfile>
      <anchor>ac63798bae88bfb54ebc4238dc9d2a71c</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z4.html</anchorfile>
      <anchor>ac423359461f0098ca2882e0dc1fcd7fa</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::LZ5</name>
    <filename>structshark_1_1benchmarks_1_1_l_z5.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>LZ5</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z5.html</anchorfile>
      <anchor>a50b43aeb4b3cba2aa3ebdbc04bac2a33</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z5.html</anchorfile>
      <anchor>a6b43fcc1798fc38f1b9e12f0b764eada</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z5.html</anchorfile>
      <anchor>a22902c230106a308647d4ea6c0fdd688</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z5.html</anchorfile>
      <anchor>ad6061e51dc3c07513998776d486f8086</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z5.html</anchorfile>
      <anchor>a820c98c100f783c7e3bdc5feb93e4625</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z5.html</anchorfile>
      <anchor>a67f0adb7c9e7d5a8b28d0b480b88abd8</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z5.html</anchorfile>
      <anchor>af772638898076f3dffb0bcc79e267881</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::LZ6</name>
    <filename>structshark_1_1benchmarks_1_1_l_z6.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>LZ6</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z6.html</anchorfile>
      <anchor>a5fbcd192f2aec7c1c0dd115b35baa22d</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z6.html</anchorfile>
      <anchor>a6c4f00abf8f0f6623196a20411d93d31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z6.html</anchorfile>
      <anchor>a90925dd4b4b5175d8897a1368076a1fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z6.html</anchorfile>
      <anchor>ad40e5e80996160d7e0cb77bf5619c1f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z6.html</anchorfile>
      <anchor>aa608f99c292dcfbbda65487be3cba52b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z6.html</anchorfile>
      <anchor>a51935e21dc6be70cdba62801cc18c935</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z6.html</anchorfile>
      <anchor>a4b067d6c7303c98b06e077a983f50058</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::LZ7</name>
    <filename>structshark_1_1benchmarks_1_1_l_z7.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>LZ7</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z7.html</anchorfile>
      <anchor>affc4c175980ef9dbb11a39937a12df9c</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z7.html</anchorfile>
      <anchor>a33149f99cef40d8e08281ca54176f1eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z7.html</anchorfile>
      <anchor>a15c0daaebc035b791ea2e28bd485543c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z7.html</anchorfile>
      <anchor>ae41ce997faa816686d24661ea11c917a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z7.html</anchorfile>
      <anchor>aefb00abc191014156d783889411df26a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z7.html</anchorfile>
      <anchor>a0bc46c9f0eece90a502842fb0f2b7109</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z7.html</anchorfile>
      <anchor>a6945e16e5b914f43fcc52e925e08b819</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::LZ8</name>
    <filename>structshark_1_1benchmarks_1_1_l_z8.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>LZ8</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z8.html</anchorfile>
      <anchor>a661d5f639557c1a92b5413baab0604a3</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z8.html</anchorfile>
      <anchor>aaf75fd33afb552a935ab3d2eac14bc59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z8.html</anchorfile>
      <anchor>ae2b38c375a699e7089d15b2bbb0cb230</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z8.html</anchorfile>
      <anchor>a1395243b498e4ebe3e6d4eee2151303f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z8.html</anchorfile>
      <anchor>a4883d22b5c6d5621b8368f6d254bd0dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z8.html</anchorfile>
      <anchor>a1781e54fe9d25e30cd1d48437136c1f3</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z8.html</anchorfile>
      <anchor>ab3f4159d33c9062993e75bd555806fb3</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::LZ9</name>
    <filename>structshark_1_1benchmarks_1_1_l_z9.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>LZ9</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z9.html</anchorfile>
      <anchor>a8cd552de8e1092c3c746e5eaa1a0506e</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z9.html</anchorfile>
      <anchor>a4e9ca8b29bb4b3519c0e26acd8b57389</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z9.html</anchorfile>
      <anchor>ae4bbc34b4c5ea110988e3920dc429fd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z9.html</anchorfile>
      <anchor>a2ac38a74fde39ec0642e1c71feee4312</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z9.html</anchorfile>
      <anchor>ac1a603398ba66db3a597693ea941bce8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z9.html</anchorfile>
      <anchor>a3f7fa209d4eb376eaadf50896f926e6c</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_l_z9.html</anchorfile>
      <anchor>a41aec3ea071af00895eb7a3f8adbfc2c</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::MarkovChain</name>
    <filename>classshark_1_1_markov_chain.html</filename>
    <templarg>class Operator</templarg>
    <member kind="typedef">
      <type>Operator::RBM</type>
      <name>RBM</name>
      <anchorfile>classshark_1_1_markov_chain.html</anchorfile>
      <anchor>adf255589fa5c7f8a2e0f868b4987efec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; detail::MarkovChainSample&lt; HiddenSample, VisibleSample &gt; &gt;::type</type>
      <name>SampleBatch</name>
      <anchorfile>classshark_1_1_markov_chain.html</anchorfile>
      <anchor>a2c380a5ddc78c38806410695e4034013</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SampleBatch::reference</type>
      <name>reference</name>
      <anchorfile>classshark_1_1_markov_chain.html</anchorfile>
      <anchor>aefa956dcbecb71821ee9ab0f2b52b36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SampleBatch::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classshark_1_1_markov_chain.html</anchorfile>
      <anchor>abcef6f4d0cc60a3027d86954a2b7b9ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MarkovChain</name>
      <anchorfile>classshark_1_1_markov_chain.html</anchorfile>
      <anchor>a71e522eea7f19e4a6d20833ee72b9caa</anchor>
      <arglist>(RBM *rbm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBatchSize</name>
      <anchorfile>classshark_1_1_markov_chain.html</anchorfile>
      <anchor>a755918bff14a10d22afc8c78e78582d0</anchor>
      <arglist>(std::size_t batchSize)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>batchSize</name>
      <anchorfile>classshark_1_1_markov_chain.html</anchorfile>
      <anchor>af08ad5f1c8a58c1c8e8981f480a560ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeChain</name>
      <anchorfile>classshark_1_1_markov_chain.html</anchorfile>
      <anchor>aeca1e601f471e959b5047b9afa9b7a72</anchor>
      <arglist>(Data&lt; RealVector &gt; const &amp;dataSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeChain</name>
      <anchorfile>classshark_1_1_markov_chain.html</anchorfile>
      <anchor>ab686c09c3aeb1f93a0700410924e8989</anchor>
      <arglist>(RealMatrix const &amp;sampleData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_markov_chain.html</anchorfile>
      <anchor>af76c0b5c4c033eca275c503fa6ff8233</anchor>
      <arglist>(unsigned int numberOfSteps)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>sample</name>
      <anchorfile>classshark_1_1_markov_chain.html</anchorfile>
      <anchor>ab42a842328c4ac25b4b18725c7cc9e03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SampleBatch const &amp;</type>
      <name>samples</name>
      <anchorfile>classshark_1_1_markov_chain.html</anchorfile>
      <anchor>a2453c2aaca5d5f70c4d22d47b24bc667</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SampleBatch &amp;</type>
      <name>samples</name>
      <anchorfile>classshark_1_1_markov_chain.html</anchorfile>
      <anchor>ae952740958de04c5a3024caa234a9007</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Operator const &amp;</type>
      <name>transitionOperator</name>
      <anchorfile>classshark_1_1_markov_chain.html</anchorfile>
      <anchor>ad09fd04ce6823fcb96d671a5d80f4c32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Operator &amp;</type>
      <name>transitionOperator</name>
      <anchorfile>classshark_1_1_markov_chain.html</anchorfile>
      <anchor>abf14dc5f13a3d642021f1b2c61ef9c35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>computesBatch</name>
      <anchorfile>classshark_1_1_markov_chain.html</anchorfile>
      <anchor>a4f03d31c124bb304ce5776d6e4d1d73b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::benchmarks::MarkovPole</name>
    <filename>classshark_1_1benchmarks_1_1_markov_pole.html</filename>
    <templarg>class HiddenNeuron</templarg>
    <templarg>class OutputNeuron</templarg>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>MarkovPole</name>
      <anchorfile>classshark_1_1benchmarks_1_1_markov_pole.html</anchorfile>
      <anchor>aea9cdad5afe30b335c969c5b3c0681bf</anchor>
      <arglist>(bool single_pole, std::size_t hidden, bool shortcuts, bool bias, bool normalize=true, std::size_t max_pole_evaluations=100000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MarkovPole</name>
      <anchorfile>classshark_1_1benchmarks_1_1_markov_pole.html</anchorfile>
      <anchor>a836d3fee8c31f644d5dd0f56857a5449</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1benchmarks_1_1_markov_pole.html</anchorfile>
      <anchor>ae1078f9066a1e963c97afe61d35ab36d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1benchmarks_1_1_markov_pole.html</anchorfile>
      <anchor>a4928d796a9ebd02f9a2e8485b43bea2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>classshark_1_1benchmarks_1_1_markov_pole.html</anchorfile>
      <anchor>a88421faf6dfd7200e9050c69de46ba47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>classshark_1_1benchmarks_1_1_markov_pole.html</anchorfile>
      <anchor>a44b7ebcf26c033b499f3c22f941d7806</anchor>
      <arglist>(const SearchPointType &amp;input) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::MaximumGainCriterion</name>
    <filename>structshark_1_1_maximum_gain_criterion.html</filename>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_maximum_gain_criterion.html</anchorfile>
      <anchor>aa4198e26d3157b43e01921ab354a5119</anchor>
      <arglist>(Problem &amp;problem, std::size_t &amp;i, std::size_t &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structshark_1_1_maximum_gain_criterion.html</anchorfile>
      <anchor>addb17e0779dd259a2ce4025fc93ba983</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::MaximumGradientCriterion</name>
    <filename>structshark_1_1_maximum_gradient_criterion.html</filename>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_maximum_gradient_criterion.html</anchorfile>
      <anchor>ab3250a533af9c6764b0f2abf09696c85</anchor>
      <arglist>(Problem &amp;problem, std::size_t &amp;i, std::size_t &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structshark_1_1_maximum_gradient_criterion.html</anchorfile>
      <anchor>a0dfe50ec011b9edf924aa8970e91ef7c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::MaxIterations</name>
    <filename>classshark_1_1_max_iterations.html</filename>
    <templarg>class ResultSet</templarg>
    <base>shark::AbstractStoppingCriterion</base>
    <member kind="function">
      <type></type>
      <name>MaxIterations</name>
      <anchorfile>classshark_1_1_max_iterations.html</anchorfile>
      <anchor>aedf040f407079b94199a7f6fe629f5a4</anchor>
      <arglist>(unsigned int maxIterations)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxIterations</name>
      <anchorfile>classshark_1_1_max_iterations.html</anchorfile>
      <anchor>a01a37bc2f0b76e3801fed75f699567d6</anchor>
      <arglist>(unsigned int newIterations)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stop</name>
      <anchorfile>classshark_1_1_max_iterations.html</anchorfile>
      <anchor>a3959876968fade6394247850475ad7c2</anchor>
      <arglist>(const ResultSet &amp;set)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classshark_1_1_max_iterations.html</anchorfile>
      <anchor>ad4a33c4632a28025c848ebf0c05b63b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_iteration</name>
      <anchorfile>classshark_1_1_max_iterations.html</anchorfile>
      <anchor>a53aa60e7a4baf7c9253f0b873f137759</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_maxIterations</name>
      <anchorfile>classshark_1_1_max_iterations.html</anchorfile>
      <anchor>ac2733c3748855a56f1e4da293ffbd071</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::McPegasos</name>
    <filename>classshark_1_1_mc_pegasos.html</filename>
    <templarg>class VectorType</templarg>
    <member kind="enumeration">
      <type></type>
      <name>eMarginType</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>ab3e259b1ae572330edd0e55a055b3833</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>emRelative</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>ab3e259b1ae572330edd0e55a055b3833ae1fbea6f6181c86d50014e07f2704aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>emAbsolute</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>ab3e259b1ae572330edd0e55a055b3833a77fd5e7e4710a38dd7a5263df635a496</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>eLossType</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>ac0276cdae882f2e1cc93ea2c66ea4d54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elNaiveHinge</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>ac0276cdae882f2e1cc93ea2c66ea4d54a46985838db2e85c49d88e4e8715f7f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elDiscriminativeMax</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>ac0276cdae882f2e1cc93ea2c66ea4d54a16e7e0f7c463a8963a0ad93203225ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elDiscriminativeSum</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>ac0276cdae882f2e1cc93ea2c66ea4d54ad839128bac9615ab6c902803355ec434</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elTotalMax</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>ac0276cdae882f2e1cc93ea2c66ea4d54abf0f18880cde1eb5a648533faf4b8545</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elTotalSum</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>ac0276cdae882f2e1cc93ea2c66ea4d54af2e553371cb3ace44a9dbae05f355ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>emRelative</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>ab3e259b1ae572330edd0e55a055b3833ae1fbea6f6181c86d50014e07f2704aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>emAbsolute</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>ab3e259b1ae572330edd0e55a055b3833a77fd5e7e4710a38dd7a5263df635a496</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elNaiveHinge</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>ac0276cdae882f2e1cc93ea2c66ea4d54a46985838db2e85c49d88e4e8715f7f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elDiscriminativeMax</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>ac0276cdae882f2e1cc93ea2c66ea4d54a16e7e0f7c463a8963a0ad93203225ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elDiscriminativeSum</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>ac0276cdae882f2e1cc93ea2c66ea4d54ad839128bac9615ab6c902803355ec434</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elTotalMax</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>ac0276cdae882f2e1cc93ea2c66ea4d54abf0f18880cde1eb5a648533faf4b8545</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elTotalSum</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>ac0276cdae882f2e1cc93ea2c66ea4d54af2e553371cb3ace44a9dbae05f355ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>solve</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>a559261c0f268ed08557af883e0daddfb</anchor>
      <arglist>(LabeledData&lt; VectorType, unsigned int &gt; const &amp;data, eMarginType margintype, eLossType losstype, bool sumToZero, double C, std::vector&lt; WeightType &gt; &amp;w, std::size_t batchsize=1, double varepsilon=0.001)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>bool(*</type>
      <name>LossGradientFunction</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>a67d3d862e403bfeb47db5ea1b19a8885</anchor>
      <arglist>)(VectorType const &amp;, unsigned int, RealVector const &amp;, std::vector&lt; VectorType &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>lossGradientANH</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>a0562f636d27be3132daa1f9e68f1bda9</anchor>
      <arglist>(VectorType const &amp;x, unsigned int y, RealVector const &amp;f, std::vector&lt; VectorType &gt; &amp;gradient, bool sumToZero)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>lossGradientRDM</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>a3685c0b79cd8ed1b8ad8f730bee3d836</anchor>
      <arglist>(VectorType const &amp;x, unsigned int y, RealVector const &amp;f, std::vector&lt; VectorType &gt; &amp;gradient, bool sumToZero)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>lossGradientRDS</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>afdee49e649204c16765c03464bf97f01</anchor>
      <arglist>(VectorType const &amp;x, unsigned int y, RealVector const &amp;f, std::vector&lt; VectorType &gt; &amp;gradient, bool sumToZero)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>lossGradientADS</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>ae477032ac112037c0f7bcf1178a60173</anchor>
      <arglist>(VectorType const &amp;x, unsigned int y, RealVector const &amp;f, std::vector&lt; VectorType &gt; &amp;gradient, bool sumToZero)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>lossGradientADM</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>afbc4cd9e7322908c8aaf2c60b58e27af</anchor>
      <arglist>(VectorType const &amp;x, unsigned int y, RealVector const &amp;f, std::vector&lt; VectorType &gt; &amp;gradient, bool sumToZero)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>lossGradientATS</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>a4dde2469b6bce8ab4bd5846c388004ea</anchor>
      <arglist>(VectorType const &amp;x, unsigned int y, RealVector const &amp;f, std::vector&lt; VectorType &gt; &amp;gradient, bool sumToZero)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>lossGradientATM</name>
      <anchorfile>classshark_1_1_mc_pegasos.html</anchorfile>
      <anchor>a47cbf1499724ebd11c46738a06b5b10f</anchor>
      <arglist>(VectorType const &amp;x, unsigned int y, RealVector const &amp;f, std::vector&lt; VectorType &gt; &amp;gradient, bool sumToZero)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::statistics::Mean</name>
    <filename>classshark_1_1statistics_1_1_mean.html</filename>
    <base>shark::statistics::BaseStatisticsObject</base>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1statistics_1_1_mean.html</anchorfile>
      <anchor>a5df4707007de240eb03480976109270a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>statistics</name>
      <anchorfile>classshark_1_1statistics_1_1_mean.html</anchorfile>
      <anchor>aadb8337c0352fbc315dee25517f25b3d</anchor>
      <arglist>(std::vector&lt; RealVector &gt; const &amp;points) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::statistics::Median</name>
    <filename>classshark_1_1statistics_1_1_median.html</filename>
    <base>shark::statistics::Quantile</base>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1statistics_1_1_median.html</anchorfile>
      <anchor>a4157c2ce6c5a672614d4ec4fa849f93c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Median</name>
      <anchorfile>classshark_1_1statistics_1_1_median.html</anchorfile>
      <anchor>a974ca465682f8786e8f30b32ec27e1bb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::MergeBudgetMaintenanceStrategy</name>
    <filename>classshark_1_1_merge_budget_maintenance_strategy.html</filename>
    <templarg>class InputType</templarg>
    <base>shark::AbstractBudgetMaintenanceStrategy</base>
  </compound>
  <compound kind="class">
    <name>shark::MergeBudgetMaintenanceStrategy&lt; RealVector &gt;</name>
    <filename>classshark_1_1_merge_budget_maintenance_strategy_3_01_real_vector_01_4.html</filename>
    <base>AbstractBudgetMaintenanceStrategy&lt; RealVector &gt;</base>
    <class kind="struct">shark::MergeBudgetMaintenanceStrategy&lt; RealVector &gt;::MergingProblemFunction</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reduceBudget</name>
      <anchorfile>classshark_1_1_merge_budget_maintenance_strategy_3_01_real_vector_01_4.html</anchorfile>
      <anchor>a50f9819caf20e6bedad5e6735e5db2e0</anchor>
      <arglist>(ModelType &amp;model, size_t firstIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToModel</name>
      <anchorfile>classshark_1_1_merge_budget_maintenance_strategy_3_01_real_vector_01_4.html</anchorfile>
      <anchor>a26faf1b7720149479335a6cf8aeebb38</anchor>
      <arglist>(ModelType &amp;model, InputType const &amp;alpha, ElementType const &amp;supportVector)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_merge_budget_maintenance_strategy_3_01_real_vector_01_4.html</anchorfile>
      <anchor>aec9a14387771b164b93aeae8847995cf</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::MergeBudgetMaintenanceStrategy&lt; RealVector &gt;::MergingProblemFunction</name>
    <filename>structshark_1_1_merge_budget_maintenance_strategy_3_01_real_vector_01_4_1_1_merging_problem_function.html</filename>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="typedef">
      <type>SingleObjectiveFunction</type>
      <name>Base</name>
      <anchorfile>structshark_1_1_merge_budget_maintenance_strategy_3_01_real_vector_01_4_1_1_merging_problem_function.html</anchorfile>
      <anchor>a7644115fbbb1839032ab05a546c1d9fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1_merge_budget_maintenance_strategy_3_01_real_vector_01_4_1_1_merging_problem_function.html</anchorfile>
      <anchor>a2dfbff2e4e5b3e6015b2964069f65fe3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MergingProblemFunction</name>
      <anchorfile>structshark_1_1_merge_budget_maintenance_strategy_3_01_real_vector_01_4_1_1_merging_problem_function.html</anchorfile>
      <anchor>a5ab2639b70356a5165bffd26702bc058</anchor>
      <arglist>(double a, double b, double k)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1_merge_budget_maintenance_strategy_3_01_real_vector_01_4_1_1_merging_problem_function.html</anchorfile>
      <anchor>a5643027ade6dc7961b582b3545fa8338</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>eval</name>
      <anchorfile>structshark_1_1_merge_budget_maintenance_strategy_3_01_real_vector_01_4_1_1_merging_problem_function.html</anchorfile>
      <anchor>a0674c4dae609a1c36929fe77e6c871c8</anchor>
      <arglist>(RealVector const &amp;pattern) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evalDerivative</name>
      <anchorfile>structshark_1_1_merge_budget_maintenance_strategy_3_01_real_vector_01_4_1_1_merging_problem_function.html</anchorfile>
      <anchor>a065cb2154a49e6948f7d6a59cf2cd49c</anchor>
      <arglist>(const SearchPointType &amp;input, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_a</name>
      <anchorfile>structshark_1_1_merge_budget_maintenance_strategy_3_01_real_vector_01_4_1_1_merging_problem_function.html</anchorfile>
      <anchor>a55e9c888e465f88a760d308a8ba5313c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_b</name>
      <anchorfile>structshark_1_1_merge_budget_maintenance_strategy_3_01_real_vector_01_4_1_1_merging_problem_function.html</anchorfile>
      <anchor>a1553e03dffa8dcca196a26b40d477cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_k</name>
      <anchorfile>structshark_1_1_merge_budget_maintenance_strategy_3_01_real_vector_01_4_1_1_merging_problem_function.html</anchorfile>
      <anchor>a6504381c0a6c3b2267ad5093dd6c5140</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::MissingFeaturesKernelExpansion</name>
    <filename>classshark_1_1_missing_features_kernel_expansion.html</filename>
    <templarg>class InputType</templarg>
    <base>shark::KernelExpansion</base>
    <member kind="typedef">
      <type>Base::KernelType</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>a9dae0d867c47aa72714e057f9a5d1b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>acc2b882befd9e12e1465bc845d45ebd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>afa1fd94574199968f74a3ebf54792e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>af68e2d95781b1753eca457476b44c11f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>abccbbad9f32c73e2419bc120c5ebb53c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>ad54351526ec5ab5370b56e5a6b5250ed</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>a4e541807a0dcdb55a6efb71533a26091</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeNorm</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>ad2194899bc2ad060c751e6f15dceb91a</anchor>
      <arglist>(const RealVector &amp;alpha, const RealVector &amp;scalingCoefficient, InputTypeT const &amp;missingness) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeNorm</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>a6673dbc1445ffc3cd0aea0d547487000</anchor>
      <arglist>(const RealVector &amp;alpha, const RealVector &amp;scalingCoefficient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScalingCoefficients</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>aa91acaf3efe28b8895ba3bfd7af45c3a</anchor>
      <arglist>(const RealVector &amp;scalingCoefficients)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClassifierNorm</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>a71367248f174d343ec79670207d5f947</anchor>
      <arglist>(double classifierNorm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MissingFeaturesKernelExpansion</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>a502217606f51799af4ec422f33e7687e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MissingFeaturesKernelExpansion</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>adc88dba3df728e6535fb3f339e8a5d53</anchor>
      <arglist>(KernelType *kernel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MissingFeaturesKernelExpansion</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>a995952df050c442f79f0d51d120bdda0</anchor>
      <arglist>(KernelType *kernel, Data&lt; InputType &gt; const &amp;basis, bool offset)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_scalingCoefficients</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>ad5a3b4ac2703bf9688433e9b9e9c61c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_classifierNorm</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>a53f8ae12d117e2ca8065511668c673ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MissingFeaturesKernelExpansion</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>a502217606f51799af4ec422f33e7687e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MissingFeaturesKernelExpansion</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>adc88dba3df728e6535fb3f339e8a5d53</anchor>
      <arglist>(KernelType *kernel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MissingFeaturesKernelExpansion</name>
      <anchorfile>classshark_1_1_missing_features_kernel_expansion.html</anchorfile>
      <anchor>a995952df050c442f79f0d51d120bdda0</anchor>
      <arglist>(KernelType *kernel, Data&lt; InputType &gt; const &amp;basis, bool offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::MissingFeatureSvmTrainer</name>
    <filename>classshark_1_1_missing_feature_svm_trainer.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class CacheType</templarg>
    <base>AbstractSvmTrainer&lt; InputType, unsigned int, MissingFeaturesKernelExpansion&lt; InputType &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>MissingFeatureSvmTrainer</name>
      <anchorfile>classshark_1_1_missing_feature_svm_trainer.html</anchorfile>
      <anchor>a1f97cd8783c3825ece12f9fce998b68c</anchor>
      <arglist>(KernelType *kernel, double C, bool offset, bool unconstrained=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_missing_feature_svm_trainer.html</anchorfile>
      <anchor>ade372bf97ed06b982d514f2ed8a17a85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_missing_feature_svm_trainer.html</anchorfile>
      <anchor>a7499797486bf5f13ccf1a29572923cc4</anchor>
      <arglist>(MissingFeaturesKernelExpansion&lt; InputType &gt; &amp;svm, LabeledData&lt; InputType, unsigned int &gt; const &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxIterations</name>
      <anchorfile>classshark_1_1_missing_feature_svm_trainer.html</anchorfile>
      <anchor>a953a22f4fbd37a7c0ad28ec6644a0f35</anchor>
      <arglist>(std::size_t newIterations)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>CacheType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_missing_feature_svm_trainer.html</anchorfile>
      <anchor>a5f9c37c64c5a6620964b9d724152f82d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_missing_feature_svm_trainer.html</anchorfile>
      <anchor>a4952945ab2a1140dcba3ddf9249ee428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::MklKernel</name>
    <filename>classshark_1_1_mkl_kernel.html</filename>
    <templarg>class InputType</templarg>
    <base>WeightedSumKernel&lt; InputType &gt;</base>
    <member kind="function">
      <type></type>
      <name>MklKernel</name>
      <anchorfile>classshark_1_1_mkl_kernel.html</anchorfile>
      <anchor>a00976371c0ee1b13a7798689b459961b</anchor>
      <arglist>(KernelTuple const &amp;kernels)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_mkl_kernel.html</anchorfile>
      <anchor>aa510142cfcee8d80da5dd077c521e03b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::MNIST</name>
    <filename>classshark_1_1_m_n_i_s_t.html</filename>
    <member kind="function">
      <type></type>
      <name>MNIST</name>
      <anchorfile>classshark_1_1_m_n_i_s_t.html</anchorfile>
      <anchor>adf07b955e67ef51c57d6986348bca147</anchor>
      <arglist>(std::string filename, char threshold=127, std::size_t batchSize=256)</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData&lt; RealVector &gt;</type>
      <name>data</name>
      <anchorfile>classshark_1_1_m_n_i_s_t.html</anchorfile>
      <anchor>aa90381155ed27996c3e2d35d34937692</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>inputDimension</name>
      <anchorfile>classshark_1_1_m_n_i_s_t.html</anchorfile>
      <anchor>a3604eb0cdd8872517292e4c29808ec3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>batchSize</name>
      <anchorfile>classshark_1_1_m_n_i_s_t.html</anchorfile>
      <anchor>ae8a337edde7be1fa79586d97dd322aec</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ModelKernel</name>
    <filename>classshark_1_1_model_kernel.html</filename>
    <templarg>class InputType</templarg>
    <base>shark::AbstractKernelFunction</base>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_model_kernel.html</anchorfile>
      <anchor>ad8dc6e6fd8567cda2ad5f220beb31bbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstInputReference</type>
      <name>ConstInputReference</name>
      <anchorfile>classshark_1_1_model_kernel.html</anchorfile>
      <anchor>a82efb0e47f42150a482c0864efa3150b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstBatchInputReference</type>
      <name>ConstBatchInputReference</name>
      <anchorfile>classshark_1_1_model_kernel.html</anchorfile>
      <anchor>aecb95611b8fee31334f9f8d6c3bf56cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelKernel</name>
      <anchorfile>classshark_1_1_model_kernel.html</anchorfile>
      <anchor>af71afc0fec1e47abcdaa1a64a6504090</anchor>
      <arglist>(AbstractKernelFunction&lt; IntermediateType &gt; *kernel, AbstractModel&lt; InputType, IntermediateType &gt; *model)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_model_kernel.html</anchorfile>
      <anchor>a8ccb09cc66526c130147aa735ec25d4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_model_kernel.html</anchorfile>
      <anchor>a324a814b09d8a549eaf526445ed19798</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_model_kernel.html</anchorfile>
      <anchor>aadb40dc66293ba8f4f6ea6e818f68045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_model_kernel.html</anchorfile>
      <anchor>af36a8746cb716f56c3e9fedd1caedf09</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_model_kernel.html</anchorfile>
      <anchor>a3608a4bdd1288a8a96a323995a5cb261</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_model_kernel.html</anchorfile>
      <anchor>a5cc5408bedfe92d8b337ce95f28c6e3f</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_model_kernel.html</anchorfile>
      <anchor>a1eaa442d3cfd51edb7f50178c348dd27</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_model_kernel.html</anchorfile>
      <anchor>a8a75d62077fbfeca56da4cab62fd15d9</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_model_kernel.html</anchorfile>
      <anchor>a2bb1495d44639540f9e35e07ad1b5cd3</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficients, State const &amp;state, RealVector &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_model_kernel.html</anchorfile>
      <anchor>aed3c9419a10b26aabb60dabafa24275a</anchor>
      <arglist>(OutArchive &amp;ar) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_model_kernel.html</anchorfile>
      <anchor>ad54f86fc8cc3e01d9be6f4e2e7a5f3ac</anchor>
      <arglist>(OutArchive &amp;ar) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ModifiedKernelMatrix</name>
    <filename>classshark_1_1_modified_kernel_matrix.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class CacheType</templarg>
    <member kind="typedef">
      <type>Matrix::QpFloatType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_modified_kernel_matrix.html</anchorfile>
      <anchor>a327dcff6eb4c2fba7eea89251fbd46fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModifiedKernelMatrix</name>
      <anchorfile>classshark_1_1_modified_kernel_matrix.html</anchorfile>
      <anchor>a030a9f52beb1a743a44d7555a6275618</anchor>
      <arglist>(AbstractKernelFunction&lt; InputType &gt; const &amp;kernelfunction, LabeledData&lt; InputType, unsigned int &gt; const &amp;data, QpFloatType modifierEq, QpFloatType modifierNe)</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_modified_kernel_matrix.html</anchorfile>
      <anchor>a9da76ea5c29a2ffd721514f0405b506f</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>entry</name>
      <anchorfile>classshark_1_1_modified_kernel_matrix.html</anchorfile>
      <anchor>abbcd6324a464fa5c73abe0608ba5811d</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>classshark_1_1_modified_kernel_matrix.html</anchorfile>
      <anchor>a4c911a252144076bd39e5aad62e37475</anchor>
      <arglist>(std::size_t i, std::size_t start, std::size_t end, QpFloatType *storage) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matrix</name>
      <anchorfile>classshark_1_1_modified_kernel_matrix.html</anchorfile>
      <anchor>a6b981a803575419cc9cc4d312191c170</anchor>
      <arglist>(blas::matrix_expression&lt; M, blas::cpu_tag &gt; &amp;storage) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipColumnsAndRows</name>
      <anchorfile>classshark_1_1_modified_kernel_matrix.html</anchorfile>
      <anchor>a34ef56ee51daad7e70d99b454c86636d</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_modified_kernel_matrix.html</anchorfile>
      <anchor>a6021c2af8651dbcd2e3a785f2b5b42f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>getAccessCount</name>
      <anchorfile>classshark_1_1_modified_kernel_matrix.html</anchorfile>
      <anchor>abaf647324d99f1b8f365cdf1ffd111dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetAccessCount</name>
      <anchorfile>classshark_1_1_modified_kernel_matrix.html</anchorfile>
      <anchor>abfbd7330e1e5bb8c783f82adcf91d715</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>m_matrix</name>
      <anchorfile>classshark_1_1_modified_kernel_matrix.html</anchorfile>
      <anchor>ade737842934a3d6ee0d94fcabb1d8599</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>m_labels</name>
      <anchorfile>classshark_1_1_modified_kernel_matrix.html</anchorfile>
      <anchor>ad23e24ca77dd795e4fd54737ef2d00e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QpFloatType</type>
      <name>m_modifierEq</name>
      <anchorfile>classshark_1_1_modified_kernel_matrix.html</anchorfile>
      <anchor>ac05ee53bcc46dd86521d8b12141d3c35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QpFloatType</type>
      <name>m_modifierNe</name>
      <anchorfile>classshark_1_1_modified_kernel_matrix.html</anchorfile>
      <anchor>a983bbf975879bcc92cd1ab819084ead9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::MOEAD</name>
    <filename>classshark_1_1_m_o_e_a_d.html</filename>
    <base>AbstractMultiObjectiveOptimizer&lt; RealVector &gt;</base>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL</type>
      <name>MOEAD</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>a26b14cfa87bf47238663a65a50b00c47</anchor>
      <arglist>(random::rng_type &amp;rng=random::globalRng)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>a2b5b69dd7e785191c1d01eb5496916be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>crossoverProbability</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>a31e982735b8a679e0deec45afe631141</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>crossoverProbability</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>af11e76b68782f21eed8dd2a22a60eae6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nm</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>a3f30f20235cad8c090c996f06398e6a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>nm</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>ace2a4fd5bb0b4c0426b58167382644d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nc</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>ae81d1faf004522e82778f081d6154e4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>nc</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>af61a24b3333312acd8d86348fe07768c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>mu</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>ae2ec88daa05a1730409085ac48ddc456</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>mu</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>a1a09e676b012cac6212059065ed40f65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numInitPoints</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>a00bf3f40f13536690b0e17fe582bf55b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>neighbourhoodSize</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>ae8479a8c17ddb1987ac40847826e09cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>neighbourhoodSize</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>a4773c5fb86bccb84e5a5a7a0ec7ee83a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>a70d1d8439f58bdccb47cff91cc056e61</anchor>
      <arglist>(Archive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>aacef82f9dfcce8e69cc472eb62ca63a2</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, std::vector&lt; SearchPointType &gt; const &amp;initialSearchPoints)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>a8742c5129a512cc1840c738457cac095</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>shark::Individual&lt; RealVector, RealVector &gt;</type>
      <name>IndividualType</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>a43d6f645e0cf4994581301ab8cf868d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>doInit</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>a10fd13169143de87c9d9d5650851dab0</anchor>
      <arglist>(std::vector&lt; SearchPointType &gt; const &amp;initialSearchPoints, std::vector&lt; ResultType &gt; const &amp;functionValues, RealVector const &amp;lowerBounds, RealVector const &amp;upperBounds, std::size_t const mu, double const nm, double const nc, double const crossover_prob, std::size_t const neighbourhoodSize, std::vector&lt; Preference &gt; const &amp;weightVectorPreferences=std::vector&lt; Preference &gt;())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SHARK_EXPORT_SYMBOL std::vector&lt; IndividualType &gt;</type>
      <name>generateOffspring</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>aa78fc336dfe961a9bff5c72715f0a49d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>updatePopulation</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>abb977a5f4b6e06643778e3082b31d350</anchor>
      <arglist>(std::vector&lt; IndividualType &gt; const &amp;offspringvec)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IndividualType &gt;</type>
      <name>m_parents</name>
      <anchorfile>classshark_1_1_m_o_e_a_d.html</anchorfile>
      <anchor>adeda7be6f7eaa47e96721438a177ffc5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::MonomialKernel</name>
    <filename>classshark_1_1_monomial_kernel.html</filename>
    <templarg>class InputType</templarg>
    <base>shark::AbstractKernelFunction</base>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>af6fcaf4018d03f30ff9e251418c778f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstInputReference</type>
      <name>ConstInputReference</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>a87125421a78aeede185a2dd7de6f6035</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstBatchInputReference</type>
      <name>ConstBatchInputReference</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>a94d3c34af6d70e991fc2090acaf3c4d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MonomialKernel</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>a805b59b34396af06ba8460ab30c39c5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MonomialKernel</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>a023ef4e718e15b24ee5c5f49a3670d49</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>a9302dffff372e5e4600f199004900726</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>a8e4923483fa0fd76bf839dd363c1854f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>a7abceef7d7bc7193151948e2ca69483f</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>a418d27501dbf5ed1950293c0c670df7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>a2f49cf121f768ed37f5c945ebe80a279</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>ac25c0d405fefdb44babfb412c6cf48ac</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>a1861472ddfd8b3c9e5b97d36cd8e9c25</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>a0c72dc55c7aac6aa0399eae657f2a0cd</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>af53223d5bb25bf94a54da39fe32a50da</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficients, State const &amp;state, RealVector &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedInputDerivative</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>afbcbbc68770e4ffe79cfdec7254598c6</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficientsX2, State const &amp;state, BatchInputType &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>a098d0c0241648053542bc4ef4dd77acf</anchor>
      <arglist>(InArchive &amp;ar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>a8c3df4441eb82c4a0bfcdbe97e6ce758</anchor>
      <arglist>(OutArchive &amp;ar) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_exponent</name>
      <anchorfile>classshark_1_1_monomial_kernel.html</anchorfile>
      <anchor>a92c62fd356e835514461b56f474aa8ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::MultiChainApproximator</name>
    <filename>classshark_1_1_multi_chain_approximator.html</filename>
    <templarg>class MarkovChainType</templarg>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="typedef">
      <type>MarkovChainType::RBM</type>
      <name>RBM</name>
      <anchorfile>classshark_1_1_multi_chain_approximator.html</anchorfile>
      <anchor>ab7ff1b4d01f6a2568f15cd9201bd6469</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiChainApproximator</name>
      <anchorfile>classshark_1_1_multi_chain_approximator.html</anchorfile>
      <anchor>ab7a3850de8247c8d9ba308fd434b6365</anchor>
      <arglist>(RBM *rbm)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_multi_chain_approximator.html</anchorfile>
      <anchor>acc43cc0a740984cfeaffbcf565eeb83f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setK</name>
      <anchorfile>classshark_1_1_multi_chain_approximator.html</anchorfile>
      <anchor>a0b325f5f54fb749418f5bc6d18943f4a</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfSamples</name>
      <anchorfile>classshark_1_1_multi_chain_approximator.html</anchorfile>
      <anchor>a8647286447d32e7f2e7fc4c588b92539</anchor>
      <arglist>(std::size_t samples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBatchSize</name>
      <anchorfile>classshark_1_1_multi_chain_approximator.html</anchorfile>
      <anchor>aa08ae62e82e9db3257defdcf6bd9fb40</anchor>
      <arglist>(std::size_t batchSize)</arglist>
    </member>
    <member kind="function">
      <type>MarkovChainType &amp;</type>
      <name>chain</name>
      <anchorfile>classshark_1_1_multi_chain_approximator.html</anchorfile>
      <anchor>a2399386f6eb6a5b3fc39197f1e147440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MarkovChainType const &amp;</type>
      <name>chain</name>
      <anchorfile>classshark_1_1_multi_chain_approximator.html</anchorfile>
      <anchor>a06f11a68ce5ad4d07fc217a0b00aecc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numBatches</name>
      <anchorfile>classshark_1_1_multi_chain_approximator.html</anchorfile>
      <anchor>a6b774fffc883d7851dd106e4997d2127</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>numBatches</name>
      <anchorfile>classshark_1_1_multi_chain_approximator.html</anchorfile>
      <anchor>ad920b5c96a076ec37f6adc755a4eb4f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>classshark_1_1_multi_chain_approximator.html</anchorfile>
      <anchor>aefcaae99947142a6dc5bc810b808ba8c</anchor>
      <arglist>(UnlabeledData&lt; RealVector &gt; const &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>classshark_1_1_multi_chain_approximator.html</anchorfile>
      <anchor>a2ff87fa005fe8314dca5a49c8675adf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_multi_chain_approximator.html</anchorfile>
      <anchor>a993446d642fcad8eb01773477820547a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRegularizer</name>
      <anchorfile>classshark_1_1_multi_chain_approximator.html</anchorfile>
      <anchor>a9c9cf392354f6f6c785dc90f46d8b1b9</anchor>
      <arglist>(double factor, SingleObjectiveFunction *regularizer)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_multi_chain_approximator.html</anchorfile>
      <anchor>acc8b9a5b1df621311dfc54ef5a70e2e4</anchor>
      <arglist>(SearchPointType const &amp;parameter, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::MultiNomialDistribution</name>
    <filename>classshark_1_1_multi_nomial_distribution.html</filename>
    <member kind="function">
      <type></type>
      <name>MultiNomialDistribution</name>
      <anchorfile>classshark_1_1_multi_nomial_distribution.html</anchorfile>
      <anchor>aa682441c740b382d8dbecf718bc26815</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiNomialDistribution</name>
      <anchorfile>classshark_1_1_multi_nomial_distribution.html</anchorfile>
      <anchor>a56cfc712e7a89fc5c8823d2877e2a7d8</anchor>
      <arglist>(RealVector const &amp;probabilities)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classshark_1_1_multi_nomial_distribution.html</anchorfile>
      <anchor>ac13b2e76fdc95f2b115a33507b5b3b52</anchor>
      <arglist>(Archive &amp;ar, const unsigned int version)</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>probabilities</name>
      <anchorfile>classshark_1_1_multi_nomial_distribution.html</anchorfile>
      <anchor>a16f80a1746538bcddf35222aba064f00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector &amp;</type>
      <name>probabilities</name>
      <anchorfile>classshark_1_1_multi_nomial_distribution.html</anchorfile>
      <anchor>af0528dd743cf80cb472af71f7c5dd92d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_multi_nomial_distribution.html</anchorfile>
      <anchor>a1148b3503fe2227a20ebe3b3abc8d6fe</anchor>
      <arglist>(randomType &amp;rng) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classshark_1_1_multi_nomial_distribution.html</anchorfile>
      <anchor>a930effbb103135e41bb94dee25e7247e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::benchmarks::MultiObjectiveBenchmark</name>
    <filename>classshark_1_1benchmarks_1_1_multi_objective_benchmark.html</filename>
    <templarg>class ... Objectives</templarg>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>MultiObjectiveBenchmark</name>
      <anchorfile>classshark_1_1benchmarks_1_1_multi_objective_benchmark.html</anchorfile>
      <anchor>a39645b08e34005008946482748022d64</anchor>
      <arglist>(std::size_t numVariables=5)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1benchmarks_1_1_multi_objective_benchmark.html</anchorfile>
      <anchor>afefbd87f70a57cab4df4868102a71e74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>classshark_1_1benchmarks_1_1_multi_objective_benchmark.html</anchorfile>
      <anchor>a6189640d3576bf04b9dea6e734ae3f6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>classshark_1_1benchmarks_1_1_multi_objective_benchmark.html</anchorfile>
      <anchor>a77e1305d6328c831bf14df61c37cb648</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>classshark_1_1benchmarks_1_1_multi_objective_benchmark.html</anchorfile>
      <anchor>a6a4d8531d457d155aea8258cd2747e51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1benchmarks_1_1_multi_objective_benchmark.html</anchorfile>
      <anchor>a4ac98eb92c0a0697790806a9c5acc359</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::tuple_element&lt; N, std::tuple&lt; Objectives... &gt; &gt;::type &amp;</type>
      <name>get</name>
      <anchorfile>classshark_1_1benchmarks_1_1_multi_objective_benchmark.html</anchorfile>
      <anchor>a12b46f3164e3445aff1cd12b62b2c2cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::tuple_element&lt; N, std::tuple&lt; Objectives... &gt; &gt;::type const &amp;</type>
      <name>get</name>
      <anchorfile>classshark_1_1benchmarks_1_1_multi_objective_benchmark.html</anchorfile>
      <anchor>a963fa52455728653a94fa582c9431ef8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1benchmarks_1_1_multi_objective_benchmark.html</anchorfile>
      <anchor>a542adb82f194ccc98c4f63b27fe2b5d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>classshark_1_1benchmarks_1_1_multi_objective_benchmark.html</anchorfile>
      <anchor>a85f5750d889d29fd9cffaa3406a8a166</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>classshark_1_1benchmarks_1_1_multi_objective_benchmark.html</anchorfile>
      <anchor>abf89308463d5531a8e131c106abed7fe</anchor>
      <arglist>(SearchPointType const &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1benchmarks_1_1_multi_objective_benchmark.html</anchorfile>
      <anchor>a99fc595131c5c87ae6d73377c1b4368a</anchor>
      <arglist>(SearchPointType const &amp;x, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::MultiTaskKernel</name>
    <filename>classshark_1_1_multi_task_kernel.html</filename>
    <templarg>class InputTypeT</templarg>
    <base>ProductKernel&lt; MultiTaskSample&lt; InputTypeT &gt; &gt;</base>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputTypeT &gt;</type>
      <name>InputKernelType</name>
      <anchorfile>classshark_1_1_multi_task_kernel.html</anchorfile>
      <anchor>a0d051d2915088b7675e02fd1af7088e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiTaskKernel</name>
      <anchorfile>classshark_1_1_multi_task_kernel.html</anchorfile>
      <anchor>a51d1610417a9bb6cc4e71725feb39cac</anchor>
      <arglist>(InputKernelType *inputkernel, DiscreteKernel *taskkernel)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_multi_task_kernel.html</anchorfile>
      <anchor>a4f294206774e0579a2ba64d445660ffb</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::MultiTaskSample</name>
    <filename>structshark_1_1_multi_task_sample.html</filename>
    <templarg>class InputTypeT</templarg>
    <base>shark::ISerializable</base>
    <member kind="typedef">
      <type>InputTypeT</type>
      <name>InputType</name>
      <anchorfile>structshark_1_1_multi_task_sample.html</anchorfile>
      <anchor>a900ec372a87978f0487ecb0067ac0fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiTaskSample</name>
      <anchorfile>structshark_1_1_multi_task_sample.html</anchorfile>
      <anchor>afecb3cf980d0792da79889176944ca6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiTaskSample</name>
      <anchorfile>structshark_1_1_multi_task_sample.html</anchorfile>
      <anchor>ae89401af1b81e452db5cb1dd13e2b5f0</anchor>
      <arglist>(InputType const &amp;i, std::size_t t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structshark_1_1_multi_task_sample.html</anchorfile>
      <anchor>a5de304c0f2e7d2cfecd56dc305264559</anchor>
      <arglist>(InArchive &amp;ar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structshark_1_1_multi_task_sample.html</anchorfile>
      <anchor>a2d8507c0c1f15728fdfafbc5942fdfaf</anchor>
      <arglist>(OutArchive &amp;ar) const</arglist>
    </member>
    <member kind="variable">
      <type>InputType</type>
      <name>input</name>
      <anchorfile>structshark_1_1_multi_task_sample.html</anchorfile>
      <anchor>a6ddde745da223186836b1286290e750f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>task</name>
      <anchorfile>structshark_1_1_multi_task_sample.html</anchorfile>
      <anchor>a21d7d05fb180df274599ea6a9cd510a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::MultiVariateNormalDistribution</name>
    <filename>classshark_1_1_multi_variate_normal_distribution.html</filename>
    <member kind="function">
      <type></type>
      <name>MultiVariateNormalDistribution</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution.html</anchorfile>
      <anchor>a5617396a18a310cb513cf43d593f95de</anchor>
      <arglist>(RealMatrix const &amp;Sigma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiVariateNormalDistribution</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution.html</anchorfile>
      <anchor>a8e5899c265e936f1b7b5c77d77953620</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution.html</anchorfile>
      <anchor>ac2a3b0120928a80bc26a5a7df2ac2a1b</anchor>
      <arglist>(Archive &amp;ar, const std::size_t version)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution.html</anchorfile>
      <anchor>a58c4c416f7e516ccd28dc53ae7828d78</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix const &amp;</type>
      <name>covarianceMatrix</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution.html</anchorfile>
      <anchor>ab2f0af22ae2978225f6990f2abc01079</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix &amp;</type>
      <name>covarianceMatrix</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution.html</anchorfile>
      <anchor>acf941923feae3b6de9845ce161e86d35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCovarianceMatrix</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution.html</anchorfile>
      <anchor>a4908517c95357a454ceb2900be594a0c</anchor>
      <arglist>(RealMatrix const &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix const &amp;</type>
      <name>eigenVectors</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution.html</anchorfile>
      <anchor>aa1a79af05867366d0ca300825a29a87a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>eigenValues</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution.html</anchorfile>
      <anchor>a304ff217e3a7ad935387e7a92b67546e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution.html</anchorfile>
      <anchor>a11520c6c68f92492b1b559000b8fdbbe</anchor>
      <arglist>(randomType &amp;rng) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution.html</anchorfile>
      <anchor>ad90c8cdf2257b5b523a38b0a36d95bf2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::MultiVariateNormalDistributionCholesky</name>
    <filename>classshark_1_1_multi_variate_normal_distribution_cholesky.html</filename>
    <member kind="function">
      <type></type>
      <name>MultiVariateNormalDistributionCholesky</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution_cholesky.html</anchorfile>
      <anchor>a7133de09b7605c17d9f0caa1dff6de58</anchor>
      <arglist>(RealMatrix const &amp;covariance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiVariateNormalDistributionCholesky</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution_cholesky.html</anchorfile>
      <anchor>a7c07e530a9cf3007a0e56b49042484e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution_cholesky.html</anchorfile>
      <anchor>ac82104835bfa8ccecae3bfc313d5a863</anchor>
      <arglist>(Archive &amp;ar, const std::size_t version)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution_cholesky.html</anchorfile>
      <anchor>a3282df396618643594c4e4e5ea932862</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution_cholesky.html</anchorfile>
      <anchor>a9fb3ed174bf3586b31d60b4113dde066</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>blas::matrix&lt; double, blas::column_major &gt; const &amp;</type>
      <name>lowerCholeskyFactor</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution_cholesky.html</anchorfile>
      <anchor>ac47101432c4252ea0a86ae4e622cb69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCovarianceMatrix</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution_cholesky.html</anchorfile>
      <anchor>a7eea13a233895d60e0ab27837f5f2e7c</anchor>
      <arglist>(RealMatrix const &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rankOneUpdate</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution_cholesky.html</anchorfile>
      <anchor>ab0afb717b2e773692a4b972c104708d1</anchor>
      <arglist>(double alpha, double beta, RealVector const &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution_cholesky.html</anchorfile>
      <anchor>a8653eefd19a56f858fd24c3d2b948284</anchor>
      <arglist>(randomType &amp;rng, Vector1 &amp;y, Vector2 &amp;z) const</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_multi_variate_normal_distribution_cholesky.html</anchorfile>
      <anchor>a1de3800a44132fead861550cfb36a038</anchor>
      <arglist>(randomType &amp;rng) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::MVPSelectionCriterion</name>
    <filename>structshark_1_1_m_v_p_selection_criterion.html</filename>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_m_v_p_selection_criterion.html</anchorfile>
      <anchor>a68398922534566a9d2601d92096e4edc</anchor>
      <arglist>(Problem &amp;problem, std::size_t &amp;i, std::size_t &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structshark_1_1_m_v_p_selection_criterion.html</anchorfile>
      <anchor>a2c9b635d190d337a2d3aaf454a77cb9d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::NearestNeighborModel</name>
    <filename>classshark_1_1_nearest_neighbor_model.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class LabelType</templarg>
    <member kind="enumeration">
      <type></type>
      <name>DistanceWeights</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model.html</anchorfile>
      <anchor>ad861d4d84775865f4e3fc8552b1bf7d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIFORM</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model.html</anchorfile>
      <anchor>ad861d4d84775865f4e3fc8552b1bf7d3a59852fa4ba61776a1c248dcd225d5ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ONE_OVER_DISTANCE</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model.html</anchorfile>
      <anchor>ad861d4d84775865f4e3fc8552b1bf7d3ac2c29fa77a65bda6e3626aebd9a3860a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractNearestNeighbors&lt; InputType, LabelType &gt;</type>
      <name>NearestNeighbors</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model.html</anchorfile>
      <anchor>a9953666995b55f2bdedcea40a6bc75c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIFORM</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model.html</anchorfile>
      <anchor>ad861d4d84775865f4e3fc8552b1bf7d3a59852fa4ba61776a1c248dcd225d5ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ONE_OVER_DISTANCE</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model.html</anchorfile>
      <anchor>ad861d4d84775865f4e3fc8552b1bf7d3ac2c29fa77a65bda6e3626aebd9a3860a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NearestNeighborModel</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model.html</anchorfile>
      <anchor>a42904f42415222c765c0d82cdd8beb18</anchor>
      <arglist>(NearestNeighbors const *algorithm, unsigned int neighbors=3)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model.html</anchorfile>
      <anchor>a5a708b0b1a630536eb43645884234f45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DistanceWeights</type>
      <name>getDistanceWeightType</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model.html</anchorfile>
      <anchor>a5b44f65297677be8a13fd333266ddc74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistanceWeightType</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model.html</anchorfile>
      <anchor>aad18955d8636665b356dfc82ef5013b3</anchor>
      <arglist>(DistanceWeights dw)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::NearestNeighborModel&lt; InputType, unsigned int &gt;</name>
    <filename>classshark_1_1_nearest_neighbor_model_3_01_input_type_00_01unsigned_01int_01_4.html</filename>
    <templarg>class InputType</templarg>
    <base>Classifier&lt; detail::BaseNearestNeighbor&lt; InputType, unsigned int &gt; &gt;</base>
    <member kind="enumeration">
      <type></type>
      <name>DistanceWeights</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model_3_01_input_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>ae35555ee667ccae2b98071435c20f111</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIFORM</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model_3_01_input_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>ae35555ee667ccae2b98071435c20f111a1916c64130432dca0ddd55e35b2aacb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ONE_OVER_DISTANCE</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model_3_01_input_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>ae35555ee667ccae2b98071435c20f111acd12d9e1c054d9bed0cf4c8b85726541</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractNearestNeighbors&lt; InputType, unsigned int &gt;</type>
      <name>NearestNeighbors</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model_3_01_input_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>aba94221e3a70fd35253df047872268be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIFORM</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model_3_01_input_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>ae35555ee667ccae2b98071435c20f111a1916c64130432dca0ddd55e35b2aacb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ONE_OVER_DISTANCE</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model_3_01_input_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>ae35555ee667ccae2b98071435c20f111acd12d9e1c054d9bed0cf4c8b85726541</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NearestNeighborModel</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model_3_01_input_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>ae80cd733c7a0dcc7f157998407ca03d8</anchor>
      <arglist>(NearestNeighbors const *algorithm, unsigned int neighbors=3)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model_3_01_input_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a1b6723566a8a680f0cc67dabc5524a50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>neighbors</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model_3_01_input_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>aad85d971c563b831661de2d43e8a0936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNeighbors</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model_3_01_input_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a5b83ba1948eb475efb39c7f29fa8be73</anchor>
      <arglist>(unsigned int neighbors)</arglist>
    </member>
    <member kind="function">
      <type>DistanceWeights</type>
      <name>getDistanceWeightType</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model_3_01_input_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>aaf02ef2fa75c45940c211f64c9d4e170</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistanceWeightType</name>
      <anchorfile>classshark_1_1_nearest_neighbor_model_3_01_input_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a740d017bb6f26e80075a345b6beef797</anchor>
      <arglist>(DistanceWeights dw)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::NegativeAUC</name>
    <filename>classshark_1_1_negative_a_u_c.html</filename>
    <templarg>class LabelType</templarg>
    <templarg>class OutputType</templarg>
    <base>shark::AbstractCost</base>
    <member kind="typedef">
      <type>KeyValuePair&lt; double, LabelType &gt;</type>
      <name>AUCPair</name>
      <anchorfile>classshark_1_1_negative_a_u_c.html</anchorfile>
      <anchor>aaaca27d1a2b3d4d5350aa3689ba3b869</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NegativeAUC</name>
      <anchorfile>classshark_1_1_negative_a_u_c.html</anchorfile>
      <anchor>a8589cb24e741e1934af4a704ec3dd7dc</anchor>
      <arglist>(bool invert=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_negative_a_u_c.html</anchorfile>
      <anchor>a9f47bfe33018e018d4b82dbe03caa3c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_negative_a_u_c.html</anchorfile>
      <anchor>a5265a1b04657e60004f9a681027cfea4</anchor>
      <arglist>(Data&lt; LabelType &gt; const &amp;target, Data&lt; OutputType &gt; const &amp;prediction, unsigned int column) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_negative_a_u_c.html</anchorfile>
      <anchor>a969990014ff8964d6e67fcf72318b02b</anchor>
      <arglist>(Data&lt; LabelType &gt; const &amp;target, Data&lt; OutputType &gt; const &amp;prediction) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>trapArea</name>
      <anchorfile>classshark_1_1_negative_a_u_c.html</anchorfile>
      <anchor>a336caed340dd3d3c82e7149091ce0977</anchor>
      <arglist>(double x1, double x2, double y1, double y2) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_invert</name>
      <anchorfile>classshark_1_1_negative_a_u_c.html</anchorfile>
      <anchor>ac8ee356a559d98706eeaf115a6affe6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::NegativeGaussianProcessEvidence</name>
    <filename>classshark_1_1_negative_gaussian_process_evidence.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class OutputType</templarg>
    <templarg>class LabelType</templarg>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="typedef">
      <type>LabeledData&lt; InputType, LabelType &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_negative_gaussian_process_evidence.html</anchorfile>
      <anchor>adaae9bffb2de9f7695fd52035fa9a794</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_negative_gaussian_process_evidence.html</anchorfile>
      <anchor>ac13877e83391d9ee87e893688ac8a109</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NegativeGaussianProcessEvidence</name>
      <anchorfile>classshark_1_1_negative_gaussian_process_evidence.html</anchorfile>
      <anchor>a3de0372ab79585993728bfd7dbb60438</anchor>
      <arglist>(DatasetType const &amp;dataset, KernelType *kernel, bool unconstrained=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_negative_gaussian_process_evidence.html</anchorfile>
      <anchor>af8d8184ce532bfefe178d8189c417989</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_negative_gaussian_process_evidence.html</anchorfile>
      <anchor>a1ae734c2f62e91619ac17a437b6fd224</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_negative_gaussian_process_evidence.html</anchorfile>
      <anchor>a9c74a1a22f2496b879cc1683ee15bc86</anchor>
      <arglist>(const RealVector &amp;parameters) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_negative_gaussian_process_evidence.html</anchorfile>
      <anchor>a4bbd89a9d2c47ecc601fb23567715b0d</anchor>
      <arglist>(const RealVector &amp;parameters, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThreshold</name>
      <anchorfile>classshark_1_1_negative_gaussian_process_evidence.html</anchorfile>
      <anchor>a73e8d2e496a680a894266fadb2c554e0</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThresholds</name>
      <anchorfile>classshark_1_1_negative_gaussian_process_evidence.html</anchorfile>
      <anchor>aaf3ba1dfa906ef2dffe3ad08c5ae4bdb</anchor>
      <arglist>(RealVector &amp;c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::NegativeLogLikelihood</name>
    <filename>classshark_1_1_negative_log_likelihood.html</filename>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="typedef">
      <type>UnlabeledData&lt; RealVector &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_negative_log_likelihood.html</anchorfile>
      <anchor>aa566dc2633577d347024d0ebb789bdf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NegativeLogLikelihood</name>
      <anchorfile>classshark_1_1_negative_log_likelihood.html</anchorfile>
      <anchor>acfa3a7764dc459482a1450ddff8f74a4</anchor>
      <arglist>(DatasetType const &amp;data, AbstractModel&lt; RealVector, RealVector &gt; *model)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_negative_log_likelihood.html</anchorfile>
      <anchor>a53c0c49a427ad65f5936f0bd12c5daf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>classshark_1_1_negative_log_likelihood.html</anchorfile>
      <anchor>a06c546fd3e801511f22028e776eaf981</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_negative_log_likelihood.html</anchorfile>
      <anchor>a8edad3e44666ff1d9e696bad6cccb985</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_negative_log_likelihood.html</anchorfile>
      <anchor>ab16ec2478fb6e4c863193554e5eb2047</anchor>
      <arglist>(RealVector const &amp;input) const</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_negative_log_likelihood.html</anchorfile>
      <anchor>aa877cede0623b9d651f8385f9b611c82</anchor>
      <arglist>(SearchPointType const &amp;input, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::NegativeWilcoxonMannWhitneyStatistic</name>
    <filename>classshark_1_1_negative_wilcoxon_mann_whitney_statistic.html</filename>
    <templarg>class LabelType</templarg>
    <templarg>class OutputType</templarg>
    <base>shark::AbstractCost</base>
    <member kind="function">
      <type></type>
      <name>NegativeWilcoxonMannWhitneyStatistic</name>
      <anchorfile>classshark_1_1_negative_wilcoxon_mann_whitney_statistic.html</anchorfile>
      <anchor>a762a1be770ac41de5e0a83d08bc7bc2f</anchor>
      <arglist>(bool invert=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_negative_wilcoxon_mann_whitney_statistic.html</anchorfile>
      <anchor>a7e5edb29b2a6ac5030b9c71573809971</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_negative_wilcoxon_mann_whitney_statistic.html</anchorfile>
      <anchor>aa2f5af11ed9351eb339943a4a0ef2e38</anchor>
      <arglist>(Data&lt; LabelType &gt; const &amp;target, Data&lt; OutputType &gt; const &amp;prediction, unsigned int column) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_negative_wilcoxon_mann_whitney_statistic.html</anchorfile>
      <anchor>ad7be3ba6f121a686e6dcbeb87813599f</anchor>
      <arglist>(Data&lt; LabelType &gt; const &amp;target, Data&lt; OutputType &gt; const &amp;prediction) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::NestedGridSearch</name>
    <filename>classshark_1_1_nested_grid_search.html</filename>
    <base>AbstractSingleObjectiveOptimizer&lt; RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>NestedGridSearch</name>
      <anchorfile>classshark_1_1_nested_grid_search.html</anchorfile>
      <anchor>af843acc075e013fe5d75ffc0e5135e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_nested_grid_search.html</anchorfile>
      <anchor>a1a0f8c2203e464572921d4c733b7e642</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>classshark_1_1_nested_grid_search.html</anchorfile>
      <anchor>a6794001d6de702afc1cb5eb323e1335b</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;min, const std::vector&lt; double &gt; &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>classshark_1_1_nested_grid_search.html</anchorfile>
      <anchor>a18b11da83f808e86b04c70c51e716678</anchor>
      <arglist>(size_t parameters, double min, double max)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_nested_grid_search.html</anchorfile>
      <anchor>acc163d14a00c8801b118dc6e48f1bb44</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_nested_grid_search.html</anchorfile>
      <anchor>aa9b5d9cd975a160a3f24edae703bf1e7</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_nested_grid_search.html</anchorfile>
      <anchor>a7d9ffc24f40f1824e0973e880c48d474</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction, SearchPointType const &amp;startingPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_nested_grid_search.html</anchorfile>
      <anchor>a6fdb96838b95142124d531921637f983</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_minimum</name>
      <anchorfile>classshark_1_1_nested_grid_search.html</anchorfile>
      <anchor>a5a473052d0b073aadc27760d91a562cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_maximum</name>
      <anchorfile>classshark_1_1_nested_grid_search.html</anchorfile>
      <anchor>acf852729d6bcc8ed07b07b536c216b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_stepsize</name>
      <anchorfile>classshark_1_1_nested_grid_search.html</anchorfile>
      <anchor>a715397003da7e1d62adf9b1abde79da2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_configured</name>
      <anchorfile>classshark_1_1_nested_grid_search.html</anchorfile>
      <anchor>aba7c13a5f426918e4e64760d7e5b3624</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::NeuronLayer</name>
    <filename>classshark_1_1_neuron_layer.html</filename>
    <templarg>class NeuronType</templarg>
    <templarg>class VectorType</templarg>
    <base>shark::AbstractModel</base>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>acf10127eec7ebc5ce7fa1c5705a7b879</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>ac37aa324e1d18b80f85897965120b736</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ParameterVectorType</type>
      <name>ParameterVectorType</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>a134859aea3b11c60ce809eec77789860</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NeuronLayer</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>a59a34483efcaed2612aaf78d02d709ed</anchor>
      <arglist>(Shape const &amp;shape=Shape())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>af27170a6f951dc093b4a35f658ad24e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NeuronType const &amp;</type>
      <name>neuron</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>a47ef0e95a6787005160b2d0b3a12a1d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NeuronType &amp;</type>
      <name>neuron</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>ae3a45e3f3bcf9a47739f40f01d507b26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>a86d5dee999295cf812aff10cde13acaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>a4b411e1d052cd4e85ebbefee480e5ed7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ParameterVectorType</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>acbe7aff1486b54161b195c4b2501ba42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>a4d542dec8f7ec6b81f8606c7b8782267</anchor>
      <arglist>(ParameterVectorType const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>a47e97bff55a48e381401efee81d4036f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>acc42a1d34884effef8d1598aa35ab5a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>a7f8d21763c3f72152b774f3288602474</anchor>
      <arglist>(BatchInputType const &amp;inputs, BatchOutputType &amp;outputs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>a7efffb5b51e4117502a2e8996e8b0414</anchor>
      <arglist>(VectorType const &amp;input, VectorType &amp;output) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>afa565afbf5a904a24b41bbd6bca97d40</anchor>
      <arglist>(BatchInputType const &amp;inputs, BatchOutputType &amp;outputs, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>a77fafddfd9c5068f8fa543d43741757b</anchor>
      <arglist>(BatchInputType const &amp;inputs, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, ParameterVectorType &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedInputDerivative</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>a704f5a3c5c80639fff93fc55ef1a474d</anchor>
      <arglist>(BatchInputType const &amp;inputs, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, BatchInputType &amp;derivative) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>abee464995a2511f6433aea9e3e51cb44</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_neuron_layer.html</anchorfile>
      <anchor>af2adc70f436d1c451184d53347146b63</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::CARTree::Node</name>
    <filename>structshark_1_1_c_a_r_tree_1_1_node.html</filename>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_c_a_r_tree_1_1_node.html</anchorfile>
      <anchor>a7f0359db7d16743640dbd9478f8fc5f7</anchor>
      <arglist>(Archive &amp;ar, const unsigned int version)</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>attributeIndex</name>
      <anchorfile>structshark_1_1_c_a_r_tree_1_1_node.html</anchorfile>
      <anchor>a34ad7528c92f121a423e5d1eee67e2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>attributeValue</name>
      <anchorfile>structshark_1_1_c_a_r_tree_1_1_node.html</anchorfile>
      <anchor>a66da98a2835cb62d1733dd1bced14420</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>leftId</name>
      <anchorfile>structshark_1_1_c_a_r_tree_1_1_node.html</anchorfile>
      <anchor>a9bbe86af026b6427b81f73d56630d20e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>rightIdOrIndex</name>
      <anchorfile>structshark_1_1_c_a_r_tree_1_1_node.html</anchorfile>
      <anchor>a76b5e6f60f3f6a8d5938c5ac4ccb1a4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::benchmarks::NonMarkovPole</name>
    <filename>classshark_1_1benchmarks_1_1_non_markov_pole.html</filename>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>NonMarkovPole</name>
      <anchorfile>classshark_1_1benchmarks_1_1_non_markov_pole.html</anchorfile>
      <anchor>a83d4df6fff72ddb0395e762474f69942</anchor>
      <arglist>(bool single, std::size_t hidden, bool bias, RecurrentStructure::SigmoidType sigmoidType=RecurrentStructure::FastSigmoid, bool normalize=true, std::size_t max_pole_evaluations=100000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NonMarkovPole</name>
      <anchorfile>classshark_1_1benchmarks_1_1_non_markov_pole.html</anchorfile>
      <anchor>ae6777acea00793e7a9cd12c4c114f023</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1benchmarks_1_1_non_markov_pole.html</anchorfile>
      <anchor>aad8c006d1988501c681401955d52ceac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1benchmarks_1_1_non_markov_pole.html</anchorfile>
      <anchor>a56b23bc7588d0354b73b394188e9a872</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>classshark_1_1benchmarks_1_1_non_markov_pole.html</anchorfile>
      <anchor>a1476a34b5e8086c8e5d2a1eea5270d59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>classshark_1_1benchmarks_1_1_non_markov_pole.html</anchorfile>
      <anchor>a6b27effc1ffb168e031c5c67756406c1</anchor>
      <arglist>(const SearchPointType &amp;input) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::NormalDistributedPoints</name>
    <filename>classshark_1_1_normal_distributed_points.html</filename>
    <base>DataDistribution&lt; RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>NormalDistributedPoints</name>
      <anchorfile>classshark_1_1_normal_distributed_points.html</anchorfile>
      <anchor>a2a807f0aa71ef029adbb4b453bdadc8a</anchor>
      <arglist>(std::size_t dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NormalDistributedPoints</name>
      <anchorfile>classshark_1_1_normal_distributed_points.html</anchorfile>
      <anchor>af070bd42311a0f21b77964e8f7fd5c64</anchor>
      <arglist>(RealMatrix const &amp;covariance, RealVector const &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classshark_1_1_normal_distributed_points.html</anchorfile>
      <anchor>acdcede1ac2229cb820348c9542ee1b0e</anchor>
      <arglist>(RealVector &amp;input) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::NormalizeComponentsUnitInterval</name>
    <filename>classshark_1_1_normalize_components_unit_interval.html</filename>
    <templarg>class DataType</templarg>
    <base>shark::AbstractUnsupervisedTrainer</base>
    <member kind="function">
      <type></type>
      <name>NormalizeComponentsUnitInterval</name>
      <anchorfile>classshark_1_1_normalize_components_unit_interval.html</anchorfile>
      <anchor>a2a490ea87e8c5a48c1510bd5138c4c08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_normalize_components_unit_interval.html</anchorfile>
      <anchor>ad8c0613753d1dd394bd76ad9aa5deb22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_normalize_components_unit_interval.html</anchorfile>
      <anchor>aba27460590d2bad0fed075ae88dc916d</anchor>
      <arglist>(Normalizer&lt; DataType &gt; &amp;model, UnlabeledData&lt; DataType &gt; const &amp;input)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::NormalizeComponentsUnitVariance</name>
    <filename>classshark_1_1_normalize_components_unit_variance.html</filename>
    <templarg>class DataType</templarg>
    <base>shark::AbstractUnsupervisedTrainer</base>
    <member kind="function">
      <type></type>
      <name>NormalizeComponentsUnitVariance</name>
      <anchorfile>classshark_1_1_normalize_components_unit_variance.html</anchorfile>
      <anchor>afd2cc5b2c455036b0a846b70c4ea60c2</anchor>
      <arglist>(bool zeroMean)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_normalize_components_unit_variance.html</anchorfile>
      <anchor>a376c01477b607be1a6dfa646355f8811</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_normalize_components_unit_variance.html</anchorfile>
      <anchor>a684b111c701789e332577a6739076c3b</anchor>
      <arglist>(Normalizer&lt; DataType &gt; &amp;model, UnlabeledData&lt; DataType &gt; const &amp;input)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_zeroMean</name>
      <anchorfile>classshark_1_1_normalize_components_unit_variance.html</anchorfile>
      <anchor>ad230e64a07b58fce1c32326f20d72e26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::NormalizeComponentsWhitening</name>
    <filename>classshark_1_1_normalize_components_whitening.html</filename>
    <base>AbstractUnsupervisedTrainer&lt; LinearModel&lt; RealVector &gt; &gt;</base>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL</type>
      <name>NormalizeComponentsWhitening</name>
      <anchorfile>classshark_1_1_normalize_components_whitening.html</anchorfile>
      <anchor>aa274d58e81942ea0ca426aa789d61174</anchor>
      <arglist>(double targetVariance=1.0)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_normalize_components_whitening.html</anchorfile>
      <anchor>a4877ded5fe74853ca167f8a6d5bcf2aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_normalize_components_whitening.html</anchorfile>
      <anchor>a7d377bcfec684fa66f719189568e7698</anchor>
      <arglist>(ModelType &amp;model, UnlabeledData&lt; RealVector &gt; const &amp;input)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::NormalizeComponentsZCA</name>
    <filename>classshark_1_1_normalize_components_z_c_a.html</filename>
    <base>AbstractUnsupervisedTrainer&lt; LinearModel&lt; RealVector &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>NormalizeComponentsZCA</name>
      <anchorfile>classshark_1_1_normalize_components_z_c_a.html</anchorfile>
      <anchor>abcbe347455c97ee3e0df09f4cc03f11f</anchor>
      <arglist>(double targetVariance=1.0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_normalize_components_z_c_a.html</anchorfile>
      <anchor>a1ed34b0f77bf995d1b4b4787c017cac8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_normalize_components_z_c_a.html</anchorfile>
      <anchor>a1f7d6ef76cce1d8d85474bbd22452fe2</anchor>
      <arglist>(ModelType &amp;model, UnlabeledData&lt; RealVector &gt; const &amp;input)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_targetVariance</name>
      <anchorfile>classshark_1_1_normalize_components_z_c_a.html</anchorfile>
      <anchor>ad7403e2b1ec8d5df37ecc00ddef0ec7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::NormalizedKernel</name>
    <filename>classshark_1_1_normalized_kernel.html</filename>
    <templarg>class InputType</templarg>
    <base>shark::AbstractKernelFunction</base>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_normalized_kernel.html</anchorfile>
      <anchor>ae982a2e874a2d918533a8f663faf0ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstBatchInputReference</type>
      <name>ConstBatchInputReference</name>
      <anchorfile>classshark_1_1_normalized_kernel.html</anchorfile>
      <anchor>af9c5f353cd3f34beff84c52229cf71d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstInputReference</type>
      <name>ConstInputReference</name>
      <anchorfile>classshark_1_1_normalized_kernel.html</anchorfile>
      <anchor>aa82868b403205bf76c3a107cc8788f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NormalizedKernel</name>
      <anchorfile>classshark_1_1_normalized_kernel.html</anchorfile>
      <anchor>ab967fe200113b33b7491e087bf3553dc</anchor>
      <arglist>(AbstractKernelFunction&lt; InputType &gt; *base)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_normalized_kernel.html</anchorfile>
      <anchor>ab8fabb64b228fe65c6e1e1e40597089f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_normalized_kernel.html</anchorfile>
      <anchor>a1246ed4aa52cb8ce5a2216df17f93426</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_normalized_kernel.html</anchorfile>
      <anchor>a64db356f84025fc719a02644a625c594</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_normalized_kernel.html</anchorfile>
      <anchor>a4d5c9f3d886e3b551f82a8dc6f28dc08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_normalized_kernel.html</anchorfile>
      <anchor>aa438ef5e9b9e54da9ba0de32ee02666b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_normalized_kernel.html</anchorfile>
      <anchor>aa6ff3743633aeb4bae2ccac7028cadb7</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_normalized_kernel.html</anchorfile>
      <anchor>a766bf8a238a55a1bdc08886133526a29</anchor>
      <arglist>(ConstBatchInputReference const &amp;batchX1, ConstBatchInputReference const &amp;batchX2, RealMatrix &amp;result, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_normalized_kernel.html</anchorfile>
      <anchor>a1d8a667049dc813d8ce1c7f89f4b7f08</anchor>
      <arglist>(ConstBatchInputReference const &amp;batchX1, ConstBatchInputReference const &amp;batchX2, RealMatrix &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_normalized_kernel.html</anchorfile>
      <anchor>a3e93a1c512126fb0ad7d098dc7c03eb7</anchor>
      <arglist>(ConstBatchInputReference const &amp;batchX1, ConstBatchInputReference const &amp;batchX2, RealMatrix const &amp;coefficients, State const &amp;state, RealVector &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedInputDerivative</name>
      <anchorfile>classshark_1_1_normalized_kernel.html</anchorfile>
      <anchor>a78299d1e57af5a48afab449ad248f80f</anchor>
      <arglist>(ConstBatchInputReference const &amp;batchX1, ConstBatchInputReference const &amp;batchX2, RealMatrix const &amp;coefficientsX2, State const &amp;state, BatchInputType &amp;gradient) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AbstractKernelFunction&lt; InputType &gt; *</type>
      <name>m_base</name>
      <anchorfile>classshark_1_1_normalized_kernel.html</anchorfile>
      <anchor>ad7a155510b5d36a093edf6d0afd7c67d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::NormalizeKernelUnitVariance</name>
    <filename>classshark_1_1_normalize_kernel_unit_variance.html</filename>
    <templarg>class InputType</templarg>
    <base>shark::AbstractUnsupervisedTrainer</base>
    <member kind="function">
      <type></type>
      <name>NormalizeKernelUnitVariance</name>
      <anchorfile>classshark_1_1_normalize_kernel_unit_variance.html</anchorfile>
      <anchor>a5ce875eca19e67dc9f94143f552b8080</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_normalize_kernel_unit_variance.html</anchorfile>
      <anchor>add1b4f372f2caabd32b259b79eeac3af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>trace</name>
      <anchorfile>classshark_1_1_normalize_kernel_unit_variance.html</anchorfile>
      <anchor>a4be3973e544871a8e7bdf1f77d4670fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mean</name>
      <anchorfile>classshark_1_1_normalize_kernel_unit_variance.html</anchorfile>
      <anchor>aa7dbe18d207e4fd219bb27dd982c699e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_normalize_kernel_unit_variance.html</anchorfile>
      <anchor>a4bdc12938183edab9acdfd89bde72286</anchor>
      <arglist>(ScaledKernel&lt; InputType &gt; &amp;kernel, UnlabeledData&lt; InputType &gt; const &amp;input)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_mean</name>
      <anchorfile>classshark_1_1_normalize_kernel_unit_variance.html</anchorfile>
      <anchor>afeff62443bea7ce66acaec3be0ba178d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_matrixTrace</name>
      <anchorfile>classshark_1_1_normalize_kernel_unit_variance.html</anchorfile>
      <anchor>ab74729ebcf0a6d4445c4e851a184cb11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Normalizer</name>
    <filename>classshark_1_1_normalizer.html</filename>
    <templarg>class VectorType</templarg>
    <base>shark::AbstractModel</base>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>a7408418eee8abc1658985875bc4bd1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>a6ab92ed11265d2d649ebf3856e1462a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Normalizer</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>a199e3aed7be4f495a34da0483072ca6b</anchor>
      <arglist>(std::size_t dimension=0, bool hasOffset=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Normalizer</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>a013fab6a02d4d221f3317d7f836e4743</anchor>
      <arglist>(VectorType const &amp;diagonal, VectorType const &amp;offset=VectorType())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>a44e86f0bf982b9f923ab9db3fb4d5db2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>af23981098d22aa69fcf0b258efae50e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOffset</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>a37c6d0765c3ddd9f92790affe172ecd3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>a3ed1c776011bf4c3b846b4314e5e8cf0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>af9539f7513c96fa81afcc0250bdb095c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorType const &amp;</type>
      <name>diagonal</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>a0ff5d29a00250f06f799ba7155569454</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorType const &amp;</type>
      <name>offset</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>a8abf487791b879f20d292425abca937c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>a019f069459a4f5a83d98569cbd08980d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>ad2beccfb155b9af3de17a2333069abd8</anchor>
      <arglist>(VectorType const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>a1e8e59c41788250c0164c18bf7652707</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStructure</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>a4ad645ce4a4509fac265a9276d9c117d</anchor>
      <arglist>(VectorType const &amp;diagonal, VectorType const &amp;offset=VectorType())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStructure</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>a5361ce73894245520e4b34413fc573fc</anchor>
      <arglist>(std::size_t dimension, bool hasOffset=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>ac5be6bd6571bd6585a4e6d2ffefc6c89</anchor>
      <arglist>(BatchInputType const &amp;input, BatchOutputType &amp;output) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>a35d40fefcc0f0b510316d698e2a2a5c0</anchor>
      <arglist>(BatchInputType const &amp;input, BatchOutputType &amp;output, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>a70516fb4229bc2e1ac915e69d091841c</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>af7a6042a8188ec54b40d326cfcdb95eb</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorType</type>
      <name>m_A</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>aafc48b4a3e2fee049e815973856afb38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorType</type>
      <name>m_b</name>
      <anchorfile>classshark_1_1_normalizer.html</anchorfile>
      <anchor>af89b569611c4d4463867b4d95c76d4bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::NormalizerNeuron</name>
    <filename>structshark_1_1_normalizer_neuron.html</filename>
    <templarg>class VectorType</templarg>
    <class kind="struct">shark::NormalizerNeuron::State</class>
    <member kind="function">
      <type>void</type>
      <name>evalInPlace</name>
      <anchorfile>structshark_1_1_normalizer_neuron.html</anchorfile>
      <anchor>a1e58e448ccb56563cc0327ee5fd7ad98</anchor>
      <arglist>(blas::vector_expression&lt; Arg, Device &gt; &amp;arg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalInPlace</name>
      <anchorfile>structshark_1_1_normalizer_neuron.html</anchorfile>
      <anchor>a369924dba3b0fc83598b073158160442</anchor>
      <arglist>(blas::matrix_expression&lt; Arg, Device &gt; &amp;arg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalInPlace</name>
      <anchorfile>structshark_1_1_normalizer_neuron.html</anchorfile>
      <anchor>adadc60eed4f45e390c03dab256dda69d</anchor>
      <arglist>(blas::matrix_expression&lt; Arg, Device &gt; &amp;arg, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyDerivative</name>
      <anchorfile>structshark_1_1_normalizer_neuron.html</anchorfile>
      <anchor>a5fba8a4f118c8652b7069d265580527b</anchor>
      <arglist>(Output const &amp;output, Derivative &amp;der, State const &amp;s) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::NSGA3Indicator</name>
    <filename>structshark_1_1_n_s_g_a3_indicator.html</filename>
    <member kind="function">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>leastContributors</name>
      <anchorfile>structshark_1_1_n_s_g_a3_indicator.html</anchorfile>
      <anchor>ae2a8e94c8556e915e1c7e306159a432b</anchor>
      <arglist>(ParetofrontType const &amp;front, ParetoArchive const &amp;archive, std::size_t K) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_n_s_g_a3_indicator.html</anchorfile>
      <anchor>ab76580d0beca10b7a3df34f5895cec61</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReferencePoints</name>
      <anchorfile>structshark_1_1_n_s_g_a3_indicator.html</anchorfile>
      <anchor>ac7b565cc0603288903fe940867016bc1</anchor>
      <arglist>(std::vector&lt; RealVector &gt; const &amp;Z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structshark_1_1_n_s_g_a3_indicator.html</anchorfile>
      <anchor>aa484bfef7ef12fa0aa42bf74238e6236</anchor>
      <arglist>(std::size_t numOfObjectives, std::size_t mu, random &amp;rng, std::vector&lt; Preference &gt; const &amp;preferences=std::vector&lt; Preference &gt;())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::OneClassSvmTrainer</name>
    <filename>classshark_1_1_one_class_svm_trainer.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class CacheType</templarg>
    <base>AbstractUnsupervisedTrainer&lt; KernelExpansion&lt; InputType &gt; &gt;</base>
    <base>shark::QpConfig</base>
    <base>shark::IParameterizable</base>
    <member kind="typedef">
      <type>CacheType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>ad5a868432a490d466af7221e75ef2c76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractModel&lt; InputType, RealVector &gt;</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>a352415c5b0237a1158996985350707bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>a35e68466fd7701b7a9ee878b2b99df67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KernelMatrix&lt; InputType, QpFloatType &gt;</type>
      <name>KernelMatrixType</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>ae16f9d42b51a708ab58f7fc190006c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CachedMatrix&lt; KernelMatrixType &gt;</type>
      <name>CachedMatrixType</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>a374fc32f82524451b4e1c20a3177902a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PrecomputedMatrix&lt; KernelMatrixType &gt;</type>
      <name>PrecomputedMatrixType</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>a86883b114a933da1c1ad6799f692da12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneClassSvmTrainer</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>af71e482c577866841ac8057ca560cff8</anchor>
      <arglist>(KernelType *kernel, double nu)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>a21afb7716397fcc1bb807219576066e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nu</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>a0e08094473a5280df27a825ee9b72962</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNu</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>a0537206fb1c3074e39ebd0838fb5c293</anchor>
      <arglist>(double nu)</arglist>
    </member>
    <member kind="function">
      <type>KernelType *</type>
      <name>kernel</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>a625e877399147d4cfe308bc6914deaf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const KernelType *</type>
      <name>kernel</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>ad832b94b6e75c4f2f9c66d6c93f7ef83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKernel</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>a5686f3f4d8b7abee842c94ec77d66584</anchor>
      <arglist>(KernelType *kernel)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CacheSize</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>aba568782c774e6460d3fc160b01fd94b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCacheSize</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>aee6fb33a69ff5c13c68639c7ed8d2da0</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>af0e0e80c71cf974970ecc742b47a2452</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>aaba8c4daa144b68c57403b50642241c4</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>a99bd3b0a42544b45e9ffd2efb353a4cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>a89a952d06b2f313359fdde6ba59606e6</anchor>
      <arglist>(KernelExpansion&lt; InputType &gt; &amp;svm, UnlabeledData&lt; InputType &gt; const &amp;inputset)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trainSVM</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>afee764d431c31a7cdf28306ab5c197f7</anchor>
      <arglist>(KernelExpansion&lt; InputType &gt; &amp;svm, UnlabeledData&lt; InputType &gt; const &amp;inputset)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KernelType *</type>
      <name>m_kernel</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>a616102f49721e5f257875eb6d26e4fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_nu</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>accea5fb3db14bf84c92c81f6191c00ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_cacheSize</name>
      <anchorfile>classshark_1_1_one_class_svm_trainer.html</anchorfile>
      <anchor>a850191fb0efea7bb2af4fdc3a06e70a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::OneNormRegularizer</name>
    <filename>classshark_1_1_one_norm_regularizer.html</filename>
    <templarg>class SearchPointType</templarg>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>OneNormRegularizer</name>
      <anchorfile>classshark_1_1_one_norm_regularizer.html</anchorfile>
      <anchor>aee264882401214ab78b0201abee5f666</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_one_norm_regularizer.html</anchorfile>
      <anchor>a5b65e0d04b4d90f6ab096532e67d95cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_one_norm_regularizer.html</anchorfile>
      <anchor>a5879a021a3941223eb98e9ebc26fbe3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>classshark_1_1_one_norm_regularizer.html</anchorfile>
      <anchor>ae605e3e0c17b2a9e50834719377ea736</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>classshark_1_1_one_norm_regularizer.html</anchorfile>
      <anchor>a80a421b9bb057834c1f2d8d66e407a54</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMask</name>
      <anchorfile>classshark_1_1_one_norm_regularizer.html</anchorfile>
      <anchor>aa2c69d306a8e6a541337b263c0e04df5</anchor>
      <arglist>(SearchPointType const &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType const &amp;</type>
      <name>mask</name>
      <anchorfile>classshark_1_1_one_norm_regularizer.html</anchorfile>
      <anchor>ae2cc2a34ce23591f2c21e660789eceef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_one_norm_regularizer.html</anchorfile>
      <anchor>a0c2ba523f8b14ff3c66bfb5d15421543</anchor>
      <arglist>(SearchPointType const &amp;input) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_one_norm_regularizer.html</anchorfile>
      <anchor>a581251643a00888410ae6261b68005cb</anchor>
      <arglist>(SearchPointType const &amp;input, SearchPointType &amp;derivative) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::OnePointCrossover</name>
    <filename>structshark_1_1_one_point_crossover.html</filename>
    <member kind="function">
      <type>PointType</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_one_point_crossover.html</anchorfile>
      <anchor>af9d2aefdddb6022d9523d11fed1bb30e</anchor>
      <arglist>(randomType &amp;rng, const PointType &amp;mom, const PointType &amp;dad)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::OneVersusOneClassifier</name>
    <filename>classshark_1_1_one_versus_one_classifier.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class VectorType</templarg>
    <base>shark::AbstractModel</base>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>a62a08462043b510e68dac7ae646156b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>ac67af1a218f9e7e3fef40649d402a449</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneVersusOneClassifier</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>a62a70003c61f4b1e0ac8ed341b06dfc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>a291c3ee295209c764e3f37e221f62101</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorType</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>ab391eb00c83476a3b2de06d717849510</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>a41b5206801f56ac6f046978b8c9f4483</anchor>
      <arglist>(VectorType const &amp;newParameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>a95d7dffe9fe78c144291411e97c160ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numberOfClasses</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>a3326ce74f8401f42dc8031dec9bbdc56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>a526c89d58bd792fb51b0eeb43bd241b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>ab95b7c7a39b4f87ee47a5a4a48256525</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>binary_classifier_type const &amp;</type>
      <name>binary</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>aa14ccce9b2bb1004e0d3165ca3c24094</anchor>
      <arglist>(unsigned int class_one, unsigned int class_zero) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClass</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>a5ded346e1b9354472fdfe9eb35a6023f</anchor>
      <arglist>(std::vector&lt; binary_classifier_type * &gt; const &amp;binmodels)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>a24d1e801c037be39351c83f7c102bdc2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>a114c9975ec451ef779656f6554d1af24</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;output, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>ad4eedddd8b965056551409b8525c427e</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>ad3bd0e335f681d47795214af7fcee3f7</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>ac7edef74da55322b6aef0ba65b08592d</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs) const</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>a6b09b00726d7317e0c2e95084d22e42e</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs, State &amp;state) const=0</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>a3a331290a6cb2840663d2178899366c8</anchor>
      <arglist>(InputType const &amp;pattern, OutputType &amp;output) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_classes</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>ad7d03594b8da31afe6326ce79514010b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; binary_classifier_type * &gt;</type>
      <name>m_binary</name>
      <anchorfile>classshark_1_1_one_versus_one_classifier.html</anchorfile>
      <anchor>a11a5bb9db5a4686f51db466b1a5f4c99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::OptimizationTrainer</name>
    <filename>classshark_1_1_optimization_trainer.html</filename>
    <templarg>class Model</templarg>
    <templarg>class LabelTypeT</templarg>
    <base>shark::AbstractTrainer</base>
    <member kind="typedef">
      <type>base_type::InputType</type>
      <name>InputType</name>
      <anchorfile>classshark_1_1_optimization_trainer.html</anchorfile>
      <anchor>a6ea1a0177091d87e96112be41b016ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Model::OutputType</type>
      <name>OutputType</name>
      <anchorfile>classshark_1_1_optimization_trainer.html</anchorfile>
      <anchor>ad218bce769adeb0abf043b914693b570</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::LabelType</type>
      <name>LabelType</name>
      <anchorfile>classshark_1_1_optimization_trainer.html</anchorfile>
      <anchor>a16bba2cc3995eb25d31c0c5c270892d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Model</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_optimization_trainer.html</anchorfile>
      <anchor>a49f97f789b60936b63516cfcba72cab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ModelType::ParameterVectorType</type>
      <name>ParameterVectorType</name>
      <anchorfile>classshark_1_1_optimization_trainer.html</anchorfile>
      <anchor>a94821f625b14c0a2110f8fe1573e04b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractSingleObjectiveOptimizer&lt; ParameterVectorType &gt;</type>
      <name>OptimizerType</name>
      <anchorfile>classshark_1_1_optimization_trainer.html</anchorfile>
      <anchor>af482502de4631496926f145d630b53af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractLoss&lt; LabelType, OutputType &gt;</type>
      <name>LossType</name>
      <anchorfile>classshark_1_1_optimization_trainer.html</anchorfile>
      <anchor>aea3cee91bfbb1ab192e7699239b65418</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractStoppingCriterion&lt; SingleObjectiveResultSet&lt; ParameterVectorType &gt; &gt;</type>
      <name>StoppingCriterionType</name>
      <anchorfile>classshark_1_1_optimization_trainer.html</anchorfile>
      <anchor>a8a059e6205b464fdfc50cf18f2799163</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizationTrainer</name>
      <anchorfile>classshark_1_1_optimization_trainer.html</anchorfile>
      <anchor>a3bce482c2ef3c70bbbab4b7c034c294b</anchor>
      <arglist>(LossType *loss, OptimizerType *optimizer, StoppingCriterionType *stoppingCriterion)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_optimization_trainer.html</anchorfile>
      <anchor>a638833667d4760aa927deb182c3067bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_optimization_trainer.html</anchorfile>
      <anchor>ab3cfafba31871515074323c20d501573</anchor>
      <arglist>(ModelType &amp;model, LabeledData&lt; InputType, LabelType &gt; const &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_optimization_trainer.html</anchorfile>
      <anchor>ad449532e71b350608c5893be63d1b3d8</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_optimization_trainer.html</anchorfile>
      <anchor>abdc10088c9e637d0008ec1bc52007400</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LossType *</type>
      <name>mep_loss</name>
      <anchorfile>classshark_1_1_optimization_trainer.html</anchorfile>
      <anchor>afb616dd8695689cafff3d678ba36e4ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OptimizerType *</type>
      <name>mep_optimizer</name>
      <anchorfile>classshark_1_1_optimization_trainer.html</anchorfile>
      <anchor>a1f460e07d0acdcd22d14833b3bf0cd16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StoppingCriterionType *</type>
      <name>mep_stoppingCriterion</name>
      <anchorfile>classshark_1_1_optimization_trainer.html</anchorfile>
      <anchor>a80fc3d270c449461327a702f7d9f223d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::PamiToy</name>
    <filename>classshark_1_1_pami_toy.html</filename>
    <base>LabeledDataDistribution&lt; RealVector, unsigned int &gt;</base>
    <member kind="function">
      <type></type>
      <name>PamiToy</name>
      <anchorfile>classshark_1_1_pami_toy.html</anchorfile>
      <anchor>a77a00e9bdae220f5b1054564835b7cf0</anchor>
      <arglist>(unsigned int size_useful=5, unsigned int size_noise=5, double noise_position=0.0, double noise_variance=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classshark_1_1_pami_toy.html</anchorfile>
      <anchor>a7b2eaab3d024a8731d184f3ed5f38949</anchor>
      <arglist>(RealVector &amp;input, unsigned int &amp;label) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_size</name>
      <anchorfile>classshark_1_1_pami_toy.html</anchorfile>
      <anchor>a128a177bba9c3d7c8740734566ce2b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_sizeUseful</name>
      <anchorfile>classshark_1_1_pami_toy.html</anchorfile>
      <anchor>a26f24fc417342256f19c04ddefd99243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_sizeNoise</name>
      <anchorfile>classshark_1_1_pami_toy.html</anchorfile>
      <anchor>a57a26d670c6e8a07b523578d3b3702a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_noisePos</name>
      <anchorfile>classshark_1_1_pami_toy.html</anchorfile>
      <anchor>a84333c396fe766ff07cd3dc4bac92b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_noiseVar</name>
      <anchorfile>classshark_1_1_pami_toy.html</anchorfile>
      <anchor>a95a789beda041b7d439a501bee325947</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::PartiallyMappedCrossover</name>
    <filename>structshark_1_1_partially_mapped_crossover.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_partially_mapped_crossover.html</anchorfile>
      <anchor>acfc097e51107f82f41430ada99a06530</anchor>
      <arglist>(Rng &amp;rng, IndividualType &amp;individual1, IndividualType &amp;individual2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_partially_mapped_crossover.html</anchorfile>
      <anchor>ae1de082eed71f2d17e7467a6121ee1cd</anchor>
      <arglist>(Archive &amp;, const unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::PartlyPrecomputedMatrix</name>
    <filename>classshark_1_1_partly_precomputed_matrix.html</filename>
    <templarg>class Matrix</templarg>
    <member kind="typedef">
      <type>Matrix::QpFloatType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_partly_precomputed_matrix.html</anchorfile>
      <anchor>a8be5faef0110766a6555b3b068a6c2dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartlyPrecomputedMatrix</name>
      <anchorfile>classshark_1_1_partly_precomputed_matrix.html</anchorfile>
      <anchor>ab2069225766e15ddd81809953c940467</anchor>
      <arglist>(Matrix *base, std::size_t cachesize=0x4000000)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCached</name>
      <anchorfile>classshark_1_1_partly_precomputed_matrix.html</anchorfile>
      <anchor>aa0fbdf12f7e6492c18ddfc302d4c9572</anchor>
      <arglist>(std::size_t k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>classshark_1_1_partly_precomputed_matrix.html</anchorfile>
      <anchor>aed8139929435c448eac748cf119ef275</anchor>
      <arglist>(std::size_t k, blas::vector&lt; QpFloatType &gt; &amp;storage) const</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_partly_precomputed_matrix.html</anchorfile>
      <anchor>a03dac3c5b68cbbef9e750e693045e281</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>entry</name>
      <anchorfile>classshark_1_1_partly_precomputed_matrix.html</anchorfile>
      <anchor>ad2997ebc625fd707aefc9798af295720</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_partly_precomputed_matrix.html</anchorfile>
      <anchor>af1fe8b1e8873dfc5759d9e20ff8bd5e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getMaxCacheSize</name>
      <anchorfile>classshark_1_1_partly_precomputed_matrix.html</anchorfile>
      <anchor>a71a5881acfb1700c75ea8af7dba9faae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCacheRowSize</name>
      <anchorfile>classshark_1_1_partly_precomputed_matrix.html</anchorfile>
      <anchor>a9eb387c2805fafb33a441aced6d58d8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>blas::matrix&lt; QpFloatType &gt;</type>
      <name>m_cachedMatrix</name>
      <anchorfile>classshark_1_1_partly_precomputed_matrix.html</anchorfile>
      <anchor>a3f00c54a5f0091362ff9e97585e08718</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_cacheSize</name>
      <anchorfile>classshark_1_1_partly_precomputed_matrix.html</anchorfile>
      <anchor>a0c38550f063ffc8d3aaa50c4889bd85a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix *</type>
      <name>m_baseMatrix</name>
      <anchorfile>classshark_1_1_partly_precomputed_matrix.html</anchorfile>
      <anchor>a23fe0f2623b4208befc7c292fe95114e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_originalNumberOfRows</name>
      <anchorfile>classshark_1_1_partly_precomputed_matrix.html</anchorfile>
      <anchor>aedd47b5de6066fc436da1cad1a0a89c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::PCA</name>
    <filename>classshark_1_1_p_c_a.html</filename>
    <base>AbstractUnsupervisedTrainer&lt; LinearModel&lt;&gt; &gt;</base>
    <member kind="enumeration">
      <type></type>
      <name>PCAAlgorithm</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>ad3b450f29c9b4b265f0d16039cac8735</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STANDARD</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>ad3b450f29c9b4b265f0d16039cac8735aa46a1b1a70f542e1569589fb42528d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SMALL_SAMPLE</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>ad3b450f29c9b4b265f0d16039cac8735aa87e03fd3af865af990a4fdd3f0551b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUTO</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>ad3b450f29c9b4b265f0d16039cac8735a91ee8e8923d2abb8c39354c99194c27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STANDARD</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>ad3b450f29c9b4b265f0d16039cac8735aa46a1b1a70f542e1569589fb42528d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SMALL_SAMPLE</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>ad3b450f29c9b4b265f0d16039cac8735aa87e03fd3af865af990a4fdd3f0551b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUTO</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>ad3b450f29c9b4b265f0d16039cac8735a91ee8e8923d2abb8c39354c99194c27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PCA</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>a439006abce1b7c09792b7c574a2d709e</anchor>
      <arglist>(bool whitening=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PCA</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>a655563cb672cb1a67071e73fdf11a24c</anchor>
      <arglist>(UnlabeledData&lt; RealVector &gt; const &amp;inputs, bool whitening=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>a900a33903800136e115a2d208067cba9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWhitening</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>a13027f51bff74d5b7a39d4040a9aa403</anchor>
      <arglist>(bool whitening)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>aeae45267c5bc7a3cda484b203a1f15be</anchor>
      <arglist>(LinearModel&lt;&gt; &amp;model, UnlabeledData&lt; RealVector &gt; const &amp;inputs)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>setData</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>a52747dc693e68fe208daf290dc6b5f54</anchor>
      <arglist>(UnlabeledData&lt; RealVector &gt; const &amp;inputs)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>encoder</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>a58785ce7beacbbb5b38ee50baab18430</anchor>
      <arglist>(LinearModel&lt;&gt; &amp;model, std::size_t m=0)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>decoder</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>af637c896bf9edd55a3184a135a4334e2</anchor>
      <arglist>(LinearModel&lt;&gt; &amp;model, std::size_t m=0)</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>eigenvalues</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>a8a377bad66488acb59ab44a3c7ee21ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eigenvalue</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>a495d0d796ea14d28c6b56643c271ed9b</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix const &amp;</type>
      <name>eigenvectors</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>a0ef11fb10a4914cf2a60da03512a4230</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>mean</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>a752eeeb52e068a200891e1419b367033</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_whitening</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>a09654e9c3e1eba7522ab8e389457fbd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealMatrix</type>
      <name>m_eigenvectors</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>ae49e453937be746737aa2d13b38e16a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_eigenvalues</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>a4fa5f42a2412a520846a57323bdf0376</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_mean</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>a1a4657da75acb0e29002f9d50cc6a298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_n</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>afaf333706ff30d74832d6e18c01c8dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_l</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>a4a784a8145636a7f0a4ca7b196900e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PCAAlgorithm</type>
      <name>m_algorithm</name>
      <anchorfile>classshark_1_1_p_c_a.html</anchorfile>
      <anchor>a2987f11dfe9ee6e005e93ea7fca138ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Pegasos</name>
    <filename>classshark_1_1_pegasos.html</filename>
    <templarg>class VectorType</templarg>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>solve</name>
      <anchorfile>classshark_1_1_pegasos.html</anchorfile>
      <anchor>ac4d5f50755e24ff805700dd1102a3aca</anchor>
      <arglist>(LabeledData&lt; VectorType, unsigned int &gt; const &amp;data, double C, WeightType &amp;w, std::size_t batchsize=1, double varepsilon=0.001)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>lg</name>
      <anchorfile>classshark_1_1_pegasos.html</anchorfile>
      <anchor>aaae1ce4a6bf53bb5733bf5f2f692efbb</anchor>
      <arglist>(VectorType const &amp;x, unsigned int y, double f, VectorType &amp;gradient)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::PenalizingEvaluator</name>
    <filename>structshark_1_1_penalizing_evaluator.html</filename>
    <member kind="function">
      <type></type>
      <name>PenalizingEvaluator</name>
      <anchorfile>structshark_1_1_penalizing_evaluator.html</anchorfile>
      <anchor>ac563c794272c3d7a73f2d55a7e3ae2c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_penalizing_evaluator.html</anchorfile>
      <anchor>ab0b4b30312f7a7745f2185e3ff7e699c</anchor>
      <arglist>(Function const &amp;f, IndividualType &amp;individual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_penalizing_evaluator.html</anchorfile>
      <anchor>a3bbf4b480a96b8875ae9eb33858c4ccb</anchor>
      <arglist>(Function const &amp;f, Iterator begin, Iterator end) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>penalize</name>
      <anchorfile>structshark_1_1_penalizing_evaluator.html</anchorfile>
      <anchor>a20c4f924cbeb69a809ec865408662a08</anchor>
      <arglist>(SearchPointType const &amp;s, SearchPointType const &amp;t, double &amp;fitness) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>penalize</name>
      <anchorfile>structshark_1_1_penalizing_evaluator.html</anchorfile>
      <anchor>a269613f2056cdae9bf239f3b3c437eda</anchor>
      <arglist>(SearchPointType const &amp;s, SearchPointType const &amp;t, RealVector &amp;fitness) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_penalizing_evaluator.html</anchorfile>
      <anchor>ae1ca35f5ebdc43c424826b16d52bbee7</anchor>
      <arglist>(Archive &amp;archive, const unsigned int version)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_penaltyFactor</name>
      <anchorfile>structshark_1_1_penalizing_evaluator.html</anchorfile>
      <anchor>aed43bc8e8fd6540c49bf525f9c60217e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>m_numEvaluations</name>
      <anchorfile>structshark_1_1_penalizing_evaluator.html</anchorfile>
      <anchor>a1ebb35f4267c49f615fcaf712b3d74f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Perceptron</name>
    <filename>classshark_1_1_perceptron.html</filename>
    <templarg>class InputType</templarg>
    <base>AbstractTrainer&lt; KernelClassifier&lt; InputType &gt;, unsigned int &gt;</base>
    <member kind="function">
      <type></type>
      <name>Perceptron</name>
      <anchorfile>classshark_1_1_perceptron.html</anchorfile>
      <anchor>a04743d83dcca06bc90dfc6ce793b29f1</anchor>
      <arglist>(AbstractKernelFunction&lt; InputType &gt; *kernel, std::size_t maxTimesPattern=10000)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_perceptron.html</anchorfile>
      <anchor>a6be3dc5100e1efa4ace8282204cb6ce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_perceptron.html</anchorfile>
      <anchor>af69c978abe25d13d1cb79e866ef05260</anchor>
      <arglist>(KernelClassifier&lt; InputType &gt; &amp;classifier, LabeledData&lt; InputType, unsigned int &gt; const &amp;dataset)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::HypervolumeContributionApproximator::Point</name>
    <filename>structshark_1_1_hypervolume_contribution_approximator_1_1_point.html</filename>
    <templarg>typename VectorType</templarg>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator_1_1_point.html</anchorfile>
      <anchor>ad816e86a38c7e0c3dc7d36aa0bf139b1</anchor>
      <arglist>(VectorType const &amp;point, VectorType const &amp;reference)</arglist>
    </member>
    <member kind="variable">
      <type>VectorType</type>
      <name>point</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator_1_1_point.html</anchorfile>
      <anchor>a359c315fa6267c52c26e2f8c38ed683a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorType</type>
      <name>sample</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator_1_1_point.html</anchorfile>
      <anchor>ae981a10ff5d4c192da3a158757f18f4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorType</type>
      <name>boundingBox</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator_1_1_point.html</anchorfile>
      <anchor>a51eda5e69958b276c275be215c419f59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; typename std::vector&lt; Point &gt;::const_iterator &gt;</type>
      <name>influencingPoints</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator_1_1_point.html</anchorfile>
      <anchor>ae3dd0caa7d126c4f06f7ff68e9c1e5dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>boundingBoxVolume</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator_1_1_point.html</anchorfile>
      <anchor>a81fc3e2d54ce593ce0574c655599b769</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>approximatedContribution</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator_1_1_point.html</anchorfile>
      <anchor>ae36d121776c390ad855323652a5f5752</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>contributionLowerBound</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator_1_1_point.html</anchorfile>
      <anchor>a75083583cfc4757423940b54427d4077</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>contributionUpperBound</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator_1_1_point.html</anchorfile>
      <anchor>afb3ec574c5a3ba7145b528fca013142a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>computedExactly</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator_1_1_point.html</anchorfile>
      <anchor>a60a555ba2f3b4e14d963a9a858968385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>noSamples</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator_1_1_point.html</anchorfile>
      <anchor>a9f8ac928261ec33f124d69fba264fdf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>noSuccessfulSamples</name>
      <anchorfile>structshark_1_1_hypervolume_contribution_approximator_1_1_point.html</anchorfile>
      <anchor>af7e9428f5fbc31abfeffef2a0815b439</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::EvaluationArchive::PointResultPairType</name>
    <filename>classshark_1_1_evaluation_archive_1_1_point_result_pair_type.html</filename>
    <member kind="function">
      <type></type>
      <name>PointResultPairType</name>
      <anchorfile>classshark_1_1_evaluation_archive_1_1_point_result_pair_type.html</anchorfile>
      <anchor>a5b8713c854938ec683b6a529b76dbcab</anchor>
      <arglist>(SearchPointType const &amp;p, ResultType r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointResultPairType</name>
      <anchorfile>classshark_1_1_evaluation_archive_1_1_point_result_pair_type.html</anchorfile>
      <anchor>a16e8166c0baa7a0573468c702aa4719c</anchor>
      <arglist>(PointResultPairType const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classshark_1_1_evaluation_archive_1_1_point_result_pair_type.html</anchorfile>
      <anchor>a86750e5d5689fe0df8f3e97e3fb47697</anchor>
      <arglist>(PointResultPairType const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classshark_1_1_evaluation_archive_1_1_point_result_pair_type.html</anchorfile>
      <anchor>ad2abe42ab8fe85daa677d178e42e47be</anchor>
      <arglist>(PointResultPairType const &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>SearchPointType</type>
      <name>point</name>
      <anchorfile>classshark_1_1_evaluation_archive_1_1_point_result_pair_type.html</anchorfile>
      <anchor>aea3786429ceb5ad051756fb5e5e850ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ResultType</type>
      <name>result</name>
      <anchorfile>classshark_1_1_evaluation_archive_1_1_point_result_pair_type.html</anchorfile>
      <anchor>a82041e6a8488ae6d6250c6a71105f556</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::PointSearch</name>
    <filename>classshark_1_1_point_search.html</filename>
    <base>AbstractSingleObjectiveOptimizer&lt; RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>PointSearch</name>
      <anchorfile>classshark_1_1_point_search.html</anchorfile>
      <anchor>a8ae721d0d9d38babed22d1c81525c27a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_point_search.html</anchorfile>
      <anchor>a276d5caed734133125aa479772616f19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>classshark_1_1_point_search.html</anchorfile>
      <anchor>a17f57ad1f208eb3d036b083fafd0180c</anchor>
      <arglist>(const std::vector&lt; RealVector &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>classshark_1_1_point_search.html</anchorfile>
      <anchor>abff565fde868c310e536650d19b0cc6f</anchor>
      <arglist>(size_t parameters, size_t samples, double min, double max)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_point_search.html</anchorfile>
      <anchor>afc65c684eb51d11d522c324ea6ebce6a</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_point_search.html</anchorfile>
      <anchor>a6fa53e94f0eeceabbc5bbf868b5ed77b</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_point_search.html</anchorfile>
      <anchor>a526bcfc4e0bcfd6bd4d4c937347f5ad6</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction, SearchPointType const &amp;startingPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_point_search.html</anchorfile>
      <anchor>aff93d5e557f30ffe2dd29556c84881c5</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; RealVector &gt;</type>
      <name>m_points</name>
      <anchorfile>classshark_1_1_point_search.html</anchorfile>
      <anchor>a313d5465872857944cce410b2a65538d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_configured</name>
      <anchorfile>classshark_1_1_point_search.html</anchorfile>
      <anchor>ae00113b568af68edabb8e2637a4b12ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::PointSetKernel</name>
    <filename>classshark_1_1_point_set_kernel.html</filename>
    <templarg>class InputType</templarg>
    <base>shark::AbstractKernelFunction</base>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_point_set_kernel.html</anchorfile>
      <anchor>aea5b62dc8038d6ad9b70f4dde9c2e1d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstBatchInputReference</type>
      <name>ConstBatchInputReference</name>
      <anchorfile>classshark_1_1_point_set_kernel.html</anchorfile>
      <anchor>a0c87c9b385342e7cb3fc963edde3453e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstInputReference</type>
      <name>ConstInputReference</name>
      <anchorfile>classshark_1_1_point_set_kernel.html</anchorfile>
      <anchor>a5e1058bfa96b254b7c34cc21362bdd8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointSetKernel</name>
      <anchorfile>classshark_1_1_point_set_kernel.html</anchorfile>
      <anchor>aacab68230104cfe226d522632b42082c</anchor>
      <arglist>(AbstractKernelFunction&lt; InputType &gt; *base)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_point_set_kernel.html</anchorfile>
      <anchor>adee6fc3ed565f4578820e18e72dba569</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_point_set_kernel.html</anchorfile>
      <anchor>ad4656384d3ee3a6a5bee3466ae17a96a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_point_set_kernel.html</anchorfile>
      <anchor>ab6f1b0f1b32868f10144497e6ff3316e</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_point_set_kernel.html</anchorfile>
      <anchor>ae08978c6c6ddadb0aee53cbcee3979f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_point_set_kernel.html</anchorfile>
      <anchor>add8df8653ba9dd2adfcaac7e5c44afac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_point_set_kernel.html</anchorfile>
      <anchor>af582b3ac523870a401442b60cbb2cbf7</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_point_set_kernel.html</anchorfile>
      <anchor>adfef05b52b18fb9fb8988e9585e2ff71</anchor>
      <arglist>(ConstBatchInputReference const &amp;batchX1, ConstBatchInputReference const &amp;batchX2, RealMatrix &amp;result, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_point_set_kernel.html</anchorfile>
      <anchor>ac5a66a31e62adca73217e55a4217f324</anchor>
      <arglist>(ConstBatchInputReference const &amp;batchX1, ConstBatchInputReference const &amp;batchX2, RealMatrix &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_point_set_kernel.html</anchorfile>
      <anchor>ae18f754e67f7b59cade8e26437a1cf39</anchor>
      <arglist>(ConstBatchInputReference const &amp;batchX1, ConstBatchInputReference const &amp;batchX2, RealMatrix const &amp;coefficients, State const &amp;state, RealVector &amp;gradient) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AbstractKernelFunction&lt; InputType &gt; *</type>
      <name>m_base</name>
      <anchorfile>classshark_1_1_point_set_kernel.html</anchorfile>
      <anchor>aedca27c7faadd95e9fac52003efba678</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::PolynomialKernel</name>
    <filename>classshark_1_1_polynomial_kernel.html</filename>
    <templarg>class InputType</templarg>
    <base>shark::AbstractKernelFunction</base>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>a7e8c12320edf40b81320d4c1eb64ee25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstInputReference</type>
      <name>ConstInputReference</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>acf26392888405951b6d965b14d98b8aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstBatchInputReference</type>
      <name>ConstBatchInputReference</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>a0d2eaf940ab632809186774d1ccccfef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolynomialKernel</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>a94c0a51488a514cccc7db38afce0cbe8</anchor>
      <arglist>(unsigned int degree=2, double offset=0.0, bool degree_is_parameter=true, bool unconstrained=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>a746e5af7a23ff497372a98f3c61d1166</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDegree</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>a463c3e68ff0aca75d70a3d4e6d300c1f</anchor>
      <arglist>(unsigned int deg)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>degree</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>ae963f3112a29486531d6da7fe74c1ef9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>a55528a26a7ce6c6ed98bc8523cf98e5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>a0a0077219b4d5eb9119151a53ff2a564</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>a57bc80ed056336ce2c77c5c8b6e29b8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>a6e19c738faff1a554846ece7327abb70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>a26c1a92f17f3a3cb153a1cf4dad1ac94</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>a61d25c03ea68c30eb76867ae33555bbd</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>a09efbca8f80e43abd8a6bd1cb600da63</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>a540870bc48d3e34c609f896e628c8bf6</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficients, State const &amp;state, RealVector &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedInputDerivative</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>a19aced1c84b714199b4d30ebd86b0656</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficientsX2, State const &amp;state, BatchInputType &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>aa672f4e0ffee8eded6e34d7c7f081636</anchor>
      <arglist>(InArchive &amp;ar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>aa2e39b7ba4d4a02b1745ade3fd28181f</anchor>
      <arglist>(OutArchive &amp;ar) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_degree</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>adaca4b07daccd3516ea596f541944bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_offset</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>a5476a0b246cf2094167d4f50dafdb3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_degreeIsParam</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>a936f25c06c90446d740dcbcc730a269c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_unconstrained</name>
      <anchorfile>classshark_1_1_polynomial_kernel.html</anchorfile>
      <anchor>a6877e2622378afb878f10bb20dee43f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::PolynomialMutator</name>
    <filename>structshark_1_1_polynomial_mutator.html</filename>
    <member kind="function">
      <type></type>
      <name>PolynomialMutator</name>
      <anchorfile>structshark_1_1_polynomial_mutator.html</anchorfile>
      <anchor>a0210f6d7ca9e3f3e278ad6d0b80f8648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structshark_1_1_polynomial_mutator.html</anchorfile>
      <anchor>a0f2ff5ec5666e3a94e942fb427bb46ff</anchor>
      <arglist>(RealVector const &amp;lower, RealVector const &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_polynomial_mutator.html</anchorfile>
      <anchor>ab007557862cddc9e2655aa743b9e40bc</anchor>
      <arglist>(random::rng_type &amp;rng, IndividualType &amp;ind) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_polynomial_mutator.html</anchorfile>
      <anchor>ac2e53465e4a8a9501872b36e35bf471f</anchor>
      <arglist>(Archive &amp;archive, const unsigned int version)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_nm</name>
      <anchorfile>structshark_1_1_polynomial_mutator.html</anchorfile>
      <anchor>ab716ed21beacc4501deaadeca839819a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_prob</name>
      <anchorfile>structshark_1_1_polynomial_mutator.html</anchorfile>
      <anchor>a18200f0476b13b2b9e255f5d01f43f54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>m_upper</name>
      <anchorfile>structshark_1_1_polynomial_mutator.html</anchorfile>
      <anchor>a51dd8d821b07cc13d51eb43187ee9141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>m_lower</name>
      <anchorfile>structshark_1_1_polynomial_mutator.html</anchorfile>
      <anchor>a60daa710bb3cfd82617d4ee904e2bb45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::PoolingLayer</name>
    <filename>classshark_1_1_pooling_layer.html</filename>
    <templarg>class VectorType</templarg>
    <base>shark::AbstractModel</base>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>af1c3bf01a5867b9c2cea965b3f5e5d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>a66639a814abf022b6935327f880f6f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ParameterVectorType</type>
      <name>ParameterVectorType</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>ac7cdb7122418ae31bef77d22aae75910</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoolingLayer</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>a3ec26ad400b96e72deb1193cf0ded646</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoolingLayer</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>a71753baecc299a919837ea62cc339370</anchor>
      <arglist>(Shape const &amp;inputShape, Shape const &amp;patchShape, Pooling pooling=Pooling::Maximum, Padding padding=Padding::Valid)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>ab4bf41f8cc10085db920e243a797376e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>a3f05ce81a11201e1d81baa65c61d503d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>ad9fb0c664cd068033bf1de655fde6bd3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ParameterVectorType</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>afc8367c726013f74b5b5ab61dd16693a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>a11d02e430410594e67cc9f09187c172f</anchor>
      <arglist>(ParameterVectorType const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>a6aca6b57548deb8d4ab9a96f9c283698</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>aefd4642921dff88b3f8ecde017be2698</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStructure</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>ae166162c6fb2d7d079d33684ecf7e074</anchor>
      <arglist>(Shape const &amp;inputShape, Shape const &amp;patchShape, Pooling type=Pooling::Maximum, Padding padding=Padding::Valid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>adb1f1ccede1793a08b2ce69a6e79e026</anchor>
      <arglist>(BatchInputType const &amp;inputs, BatchOutputType &amp;outputs, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>a7b7eceac5d8d6c11fa787670b448b5ef</anchor>
      <arglist>(BatchInputType const &amp;inputs, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, ParameterVectorType &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedInputDerivative</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>a32d46299f9d8e89f241518efa2cdfd0f</anchor>
      <arglist>(BatchInputType const &amp;inputs, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, BatchInputType &amp;derivative) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>a7844e7de771788a2cd7b8811b45f98b8</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_pooling_layer.html</anchorfile>
      <anchor>a90ee269f47474aabce23f512e82507e4</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::PopulationBasedStepSizeAdaptation</name>
    <filename>classshark_1_1_population_based_step_size_adaptation.html</filename>
    <member kind="function">
      <type></type>
      <name>PopulationBasedStepSizeAdaptation</name>
      <anchorfile>classshark_1_1_population_based_step_size_adaptation.html</anchorfile>
      <anchor>a639fa5d70bd1c62301f305243a5f2f37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>targetSuccessRate</name>
      <anchorfile>classshark_1_1_population_based_step_size_adaptation.html</anchorfile>
      <anchor>a427adce1df5a15d76d80b2a19a10fb25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>targetSuccessRate</name>
      <anchorfile>classshark_1_1_population_based_step_size_adaptation.html</anchorfile>
      <anchor>a706211697c48dd351ade4bbcf281313e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>learningRate</name>
      <anchorfile>classshark_1_1_population_based_step_size_adaptation.html</anchorfile>
      <anchor>a79add20d49ef3b80a2d462859eec8f61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>learningRate</name>
      <anchorfile>classshark_1_1_population_based_step_size_adaptation.html</anchorfile>
      <anchor>a1b9acea64e917b909eec3c2575c36011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dampingFactor</name>
      <anchorfile>classshark_1_1_population_based_step_size_adaptation.html</anchorfile>
      <anchor>a96ca7edda2205c93db4747d00c6d83b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>dampingFactor</name>
      <anchorfile>classshark_1_1_population_based_step_size_adaptation.html</anchorfile>
      <anchor>a118ac8b4dd48146bbe6a113f8bb5ce66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stepSize</name>
      <anchorfile>classshark_1_1_population_based_step_size_adaptation.html</anchorfile>
      <anchor>a7b9e246e1aea24500b766d2deecab993</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_population_based_step_size_adaptation.html</anchorfile>
      <anchor>a83113ac7f0853d0e7e8fc679816efa6e</anchor>
      <arglist>(double initialStepSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classshark_1_1_population_based_step_size_adaptation.html</anchorfile>
      <anchor>a9f4e464bb4dfbf1dee52898069b6570c</anchor>
      <arglist>(Population const &amp;offspring)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_stepSize</name>
      <anchorfile>classshark_1_1_population_based_step_size_adaptation.html</anchorfile>
      <anchor>ac8eb6144af7204f6855aa751e99481de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_prevFitness</name>
      <anchorfile>classshark_1_1_population_based_step_size_adaptation.html</anchorfile>
      <anchor>af39a53953d0b9fed248b1c8cd5557bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_s</name>
      <anchorfile>classshark_1_1_population_based_step_size_adaptation.html</anchorfile>
      <anchor>a07f8ce33e17b3ccf2d6891902fe0ac8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_targetSuccessRate</name>
      <anchorfile>classshark_1_1_population_based_step_size_adaptation.html</anchorfile>
      <anchor>a63212ec0dcd18e0b0b5539ac841921ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_c</name>
      <anchorfile>classshark_1_1_population_based_step_size_adaptation.html</anchorfile>
      <anchor>a3c6dadb4074bae9cf45e91d01f44c251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_d</name>
      <anchorfile>classshark_1_1_population_based_step_size_adaptation.html</anchorfile>
      <anchor>ab49e73e5dd7254ff6842aba045df622e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::PrecomputedMatrix</name>
    <filename>classshark_1_1_precomputed_matrix.html</filename>
    <templarg>class Matrix</templarg>
    <member kind="typedef">
      <type>Matrix::QpFloatType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_precomputed_matrix.html</anchorfile>
      <anchor>ad1c1324ed83e7f4f81a9f405e03ebe0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrecomputedMatrix</name>
      <anchorfile>classshark_1_1_precomputed_matrix.html</anchorfile>
      <anchor>abea0cbaf28e2260105a01e2d1bac9098</anchor>
      <arglist>(Matrix *base)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>classshark_1_1_precomputed_matrix.html</anchorfile>
      <anchor>a23d4a870760436710e017f9df9bf4e05</anchor>
      <arglist>(std::size_t k, std::size_t start, std::size_t end, QpFloatType *storage) const</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType *</type>
      <name>row</name>
      <anchorfile>classshark_1_1_precomputed_matrix.html</anchorfile>
      <anchor>aa44b4d1498fefde0e18bad7fead45585</anchor>
      <arglist>(std::size_t k, std::size_t begin, std::size_t end)</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_precomputed_matrix.html</anchorfile>
      <anchor>ac878d742d220a264960bf9228a150d1b</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>entry</name>
      <anchorfile>classshark_1_1_precomputed_matrix.html</anchorfile>
      <anchor>affc89e5345755891cb4351a6727635cb</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipColumnsAndRows</name>
      <anchorfile>classshark_1_1_precomputed_matrix.html</anchorfile>
      <anchor>abd1fa57020581514752ebe16a7505b4c</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_precomputed_matrix.html</anchorfile>
      <anchor>a364ec759346a474311590ac8dd45093e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getMaxCacheSize</name>
      <anchorfile>classshark_1_1_precomputed_matrix.html</anchorfile>
      <anchor>a3e36ccd9be149aac6003fa1e92afb7db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCacheSize</name>
      <anchorfile>classshark_1_1_precomputed_matrix.html</anchorfile>
      <anchor>ae8113f8b0c9f0ddf618a50da2d692c55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCacheRowSize</name>
      <anchorfile>classshark_1_1_precomputed_matrix.html</anchorfile>
      <anchor>aeac6f451c9fc15fb9c0d0b448af95816</anchor>
      <arglist>(std::size_t k) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCached</name>
      <anchorfile>classshark_1_1_precomputed_matrix.html</anchorfile>
      <anchor>a39a2a5510b3f3727bcfa1cd5308a7447</anchor>
      <arglist>(std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxCachedIndex</name>
      <anchorfile>classshark_1_1_precomputed_matrix.html</anchorfile>
      <anchor>ac06d00ae0e964df3463682ab34fcffbb</anchor>
      <arglist>(std::size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classshark_1_1_precomputed_matrix.html</anchorfile>
      <anchor>a84e83ea244a5ae6d7c3881a653541ee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>blas::matrix&lt; QpFloatType &gt;</type>
      <name>matrix</name>
      <anchorfile>classshark_1_1_precomputed_matrix.html</anchorfile>
      <anchor>a18ea2737f45148dc0ddb5bdfdd3430e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::QpMcBoxDecomp::PreferedSelectionStrategy</name>
    <filename>structshark_1_1_qp_mc_box_decomp_1_1_prefered_selection_strategy.html</filename>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_qp_mc_box_decomp_1_1_prefered_selection_strategy.html</anchorfile>
      <anchor>a3afa1ed9547402f287498f16c23317cd</anchor>
      <arglist>(Problem &amp;problem, std::size_t &amp;i, std::size_t &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structshark_1_1_qp_mc_box_decomp_1_1_prefered_selection_strategy.html</anchorfile>
      <anchor>aaa0b8a9e4cfc1cc1bee321427a0d70b6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::QpMcSimplexDecomp::PreferedSelectionStrategy</name>
    <filename>structshark_1_1_qp_mc_simplex_decomp_1_1_prefered_selection_strategy.html</filename>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_qp_mc_simplex_decomp_1_1_prefered_selection_strategy.html</anchorfile>
      <anchor>aac71b28946c4fac90b4289227964365f</anchor>
      <arglist>(Problem &amp;problem, std::size_t &amp;i, std::size_t &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structshark_1_1_qp_mc_simplex_decomp_1_1_prefered_selection_strategy.html</anchorfile>
      <anchor>af129df59061923a301d6b6a15e985504</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ProductKernel</name>
    <filename>classshark_1_1_product_kernel.html</filename>
    <templarg>class InputType</templarg>
    <base>AbstractKernelFunction&lt; InputType &gt;</base>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>SubKernel</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>aa7fa5438e462e1593d8355a5ef2a6429</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>aa90803815be279450eebc269666342d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstInputReference</type>
      <name>ConstInputReference</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>ad3ae67033326d5248ebf276c37113ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstBatchInputReference</type>
      <name>ConstBatchInputReference</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>aa1a07a8b83d0b9f3062b29b52439a85a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProductKernel</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>a7b82db04cf4a0e7945161e332204fe34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProductKernel</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>a256e3147f4c3fcc1222e550e335c2c3d</anchor>
      <arglist>(SubKernel *k1, SubKernel *k2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProductKernel</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>a8816bb3244d7060e59b2206e70fbffe4</anchor>
      <arglist>(std::vector&lt; SubKernel * &gt; kernels)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>a55bec5519bf13ebc4a07a82414a4a8dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addKernel</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>ae1a781a38a1a31476a4308280a0d3ea4</anchor>
      <arglist>(SubKernel *k)</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>a3c48a869a311ce86dcf66552f6d09e80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>a3f63ce641b13662b6fa26d86272f80f7</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>a9d4c8ed31105cc22c5cbd0895db4deb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>a96625b7eefde13ab0c7cc4f876988e8a</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>ab08947e82b49dcbdbac55c1f41246003</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>ae5a2c2aa97baf5a481ca80c2f61b3a10</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>aeac1d8abd81b80d1550213f5a0cdd0d0</anchor>
      <arglist>(InArchive &amp;ar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>ac9c1bfb999363139a18252af55b119d5</anchor>
      <arglist>(OutArchive &amp;ar) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SubKernel * &gt;</type>
      <name>m_kernels</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>a22104c47d6b9c63d2a1854f561c53502</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_numberOfParameters</name>
      <anchorfile>classshark_1_1_product_kernel.html</anchorfile>
      <anchor>a32f0a658c9e09cfc1f7229b0f129bac1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ProjectBudgetMaintenanceStrategy</name>
    <filename>classshark_1_1_project_budget_maintenance_strategy.html</filename>
    <templarg>class InputType</templarg>
    <base>shark::AbstractBudgetMaintenanceStrategy</base>
    <member kind="function">
      <type></type>
      <name>ProjectBudgetMaintenanceStrategy</name>
      <anchorfile>classshark_1_1_project_budget_maintenance_strategy.html</anchorfile>
      <anchor>aeb21c7cad1d543eb5e492b76db1dc659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToModel</name>
      <anchorfile>classshark_1_1_project_budget_maintenance_strategy.html</anchorfile>
      <anchor>a2c1ffe6ed6921945f7e9b955baf1b0cf</anchor>
      <arglist>(ModelType &amp;model, InputType const &amp;alpha, ElementType const &amp;supportVector)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_project_budget_maintenance_strategy.html</anchorfile>
      <anchor>a4ad4af7c05df1da75fc1ed537ef74de9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ProjectBudgetMaintenanceStrategy&lt; RealVector &gt;</name>
    <filename>classshark_1_1_project_budget_maintenance_strategy_3_01_real_vector_01_4.html</filename>
    <base>AbstractBudgetMaintenanceStrategy&lt; RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>ProjectBudgetMaintenanceStrategy</name>
      <anchorfile>classshark_1_1_project_budget_maintenance_strategy_3_01_real_vector_01_4.html</anchorfile>
      <anchor>a53e3bfad62d2c2e4d74ccfccfb9faae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToModel</name>
      <anchorfile>classshark_1_1_project_budget_maintenance_strategy_3_01_real_vector_01_4.html</anchorfile>
      <anchor>a716c4803d4a64e0e30ef4d57032ed5d9</anchor>
      <arglist>(ModelType &amp;model, InputType const &amp;alpha, ElementType const &amp;supportVector)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_project_budget_maintenance_strategy_3_01_real_vector_01_4.html</anchorfile>
      <anchor>aab3b1e4a1bd156bbb425963c174efaec</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ProxyIterator</name>
    <filename>classshark_1_1_proxy_iterator.html</filename>
    <templarg>class Sequence</templarg>
    <templarg>class ValueType</templarg>
    <templarg>class Reference</templarg>
    <member kind="function">
      <type></type>
      <name>ProxyIterator</name>
      <anchorfile>classshark_1_1_proxy_iterator.html</anchorfile>
      <anchor>a041d0a9c6f0e3d05ca3d99205e1a1e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProxyIterator</name>
      <anchorfile>classshark_1_1_proxy_iterator.html</anchorfile>
      <anchor>a0dcd8ac7e39ee16d2eff76eaa43fd2a5</anchor>
      <arglist>(Sequence &amp;seq, std::size_t position)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProxyIterator</name>
      <anchorfile>classshark_1_1_proxy_iterator.html</anchorfile>
      <anchor>aef06d02111f5af4b73ad1fe6f2d0ebfa</anchor>
      <arglist>(ProxyIterator&lt; S, V, R &gt; const &amp;other)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SHARK_ITERATOR_CORE_ACCESS</name>
      <anchorfile>classshark_1_1_proxy_iterator.html</anchorfile>
      <anchor>ad04e1f8c5114da431d0d97fb42329621</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ProxyIterator</name>
      <anchorfile>classshark_1_1_proxy_iterator.html</anchorfile>
      <anchor>aa6a1bbfb0c569f7a36652f00eb5c60c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::QpBoxLinear</name>
    <filename>classshark_1_1_qp_box_linear.html</filename>
    <templarg>class InputT</templarg>
    <member kind="typedef">
      <type>LabeledData&lt; InputT, unsigned int &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_qp_box_linear.html</anchorfile>
      <anchor>a5f5ee4e503f9d387f657f41a43297e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabeledData&lt; InputT, unsignedint &gt;::const_element_reference</type>
      <name>ElementType</name>
      <anchorfile>classshark_1_1_qp_box_linear.html</anchorfile>
      <anchor>a696d6a324ef267b80dcfa3133a13a341</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QpBoxLinear</name>
      <anchorfile>classshark_1_1_qp_box_linear.html</anchorfile>
      <anchor>ad4964a8fe4aaba27dca214bf956ef481</anchor>
      <arglist>(const DatasetType &amp;dataset, std::size_t dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffset</name>
      <anchorfile>classshark_1_1_qp_box_linear.html</anchorfile>
      <anchor>a40ff9688a83628fbb9691f0973ea2e4b</anchor>
      <arglist>(double newOffset)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>offsetGradient</name>
      <anchorfile>classshark_1_1_qp_box_linear.html</anchorfile>
      <anchor>a3dce83db17b67190bd6730e44cdb773e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>solutionWeightVector</name>
      <anchorfile>classshark_1_1_qp_box_linear.html</anchorfile>
      <anchor>a6db58d9b283d570485001ae03a9b0b87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classshark_1_1_qp_box_linear.html</anchorfile>
      <anchor>ab8274b4499b2b4c342735a3ab338e2fb</anchor>
      <arglist>(double bound, double reg, QpStoppingCondition &amp;stop, QpSolutionProperties *prop=NULL, bool verbose=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataView&lt; const DatasetType &gt;</type>
      <name>m_data</name>
      <anchorfile>classshark_1_1_qp_box_linear.html</anchorfile>
      <anchor>a34abab91280fd4241fcd454de20149ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_dim</name>
      <anchorfile>classshark_1_1_qp_box_linear.html</anchorfile>
      <anchor>acaabcca91e016569f345712678d2aa28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_xSquared</name>
      <anchorfile>classshark_1_1_qp_box_linear.html</anchorfile>
      <anchor>a78c4ce2d9151c4b7014e5850d0125171</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_alpha</name>
      <anchorfile>classshark_1_1_qp_box_linear.html</anchorfile>
      <anchor>af77735b134d075719f94fe773b3f1232</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_weights</name>
      <anchorfile>classshark_1_1_qp_box_linear.html</anchorfile>
      <anchor>a83c9d19b5cde386a1236928a7ffd94b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_pref</name>
      <anchorfile>classshark_1_1_qp_box_linear.html</anchorfile>
      <anchor>a98f0b8dd922bc1abdd26760f9d1de488</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_offset</name>
      <anchorfile>classshark_1_1_qp_box_linear.html</anchorfile>
      <anchor>a285997ddc6b5d29ce7d22dc999032823</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::QpConfig</name>
    <filename>classshark_1_1_qp_config.html</filename>
    <member kind="function">
      <type></type>
      <name>QpConfig</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>afca82d9f41e7ca9dc16f958571143ea4</anchor>
      <arglist>(bool precomputedFlag=false, bool sparsifyFlag=true)</arglist>
    </member>
    <member kind="function">
      <type>QpStoppingCondition &amp;</type>
      <name>stoppingCondition</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a66fa342063f4fb0c8686a821dd14370e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QpStoppingCondition const &amp;</type>
      <name>stoppingCondition</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>aa26b91d3c5f8907fdf977e3dafedc9a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>QpSolutionProperties &amp;</type>
      <name>solutionProperties</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a0ea8552b2732cbfe664b7d0706c46d80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>precomputeKernel</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>ae90c5c93fc02fad6fc07ca6b04fc78cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool const &amp;</type>
      <name>precomputeKernel</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a0de2262f5cfb80a3b42706a5121a53e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>sparsify</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a32477b55142b80bd9f82f2a2e201f5b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool const &amp;</type>
      <name>sparsify</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a7af8db760393211a1c1416d3b1f53611</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>shrinking</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>ab538a92231c05e20575f181b06c5689d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool const &amp;</type>
      <name>shrinking</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>ac60da7ecd51c8eceea655cc60492e4a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>s2do</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a5a4d6d3ff5c8acbd809108786e973f7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool const &amp;</type>
      <name>s2do</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a7f20cd2196e1fc785a18cb155eb5ec68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int &amp;</type>
      <name>verbosity</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a71328214090e442c9fee46103868b0ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int const &amp;</type>
      <name>verbosity</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a60f71b218d096838f527c6eb62a75501</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long const &amp;</type>
      <name>accessCount</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a240e6aeb51dee3764a4ee3962e0ff7e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinAccuracy</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a435ff9b5dd3337872c2e49d46c95c417</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxIterations</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>aa0ebe3d3e7163bb1eb7a5f3a56b95644</anchor>
      <arglist>(unsigned long long i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetValue</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>ac13ad894e8ac68325c6f7ebb629e644c</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxSeconds</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a1453635db8f97cec56f4f943e31e7520</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QpStoppingCondition</type>
      <name>m_stoppingcondition</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a5032921be220d76232e7db3db3ef5225</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QpSolutionProperties</type>
      <name>m_solutionproperties</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a994efb841504c52e509d0bac04f41fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_precomputedKernelMatrix</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a5d65189eed8ced4b3cadb2392cf2b46c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_sparsify</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a3288e99aefde9b1d7e30992d5feb582e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_shrinking</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>ac7bd118550c2bfa50f9497182b4b086d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_s2do</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a82049a531c2f9621c737c8fe51d53739</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_verbosity</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>ad6f54a3b58cd6a2e1774d5decf8fcc79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long long</type>
      <name>m_accessCount</name>
      <anchorfile>classshark_1_1_qp_config.html</anchorfile>
      <anchor>a073a19a266651c9a689f433b93ea4e3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::QpMcBoxDecomp</name>
    <filename>classshark_1_1_qp_mc_box_decomp.html</filename>
    <templarg>class Matrix</templarg>
    <class kind="struct">shark::QpMcBoxDecomp::Example</class>
    <class kind="struct">shark::QpMcBoxDecomp::PreferedSelectionStrategy</class>
    <class kind="struct">shark::QpMcBoxDecomp::Variable</class>
    <member kind="typedef">
      <type>Matrix::QpFloatType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>ac2fe2210fb427c7fb077394ddd0e6b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QpMcBoxDecomp</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>af0e3156b64e9f2b9f879549393ddc219</anchor>
      <arglist>(Matrix &amp;kernel, QpSparseArray&lt; QpFloatType &gt; const &amp;M, Data&lt; unsigned int &gt; const &amp;target, RealMatrix const &amp;linearMat, double C)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShrinking</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a3800f70db6acd2b333addd3800c34596</anchor>
      <arglist>(bool shrinking=true)</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix</type>
      <name>solution</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a6f5a77de164d1a1a378301d74cc7223c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a3534431d3320ea945bf59be4b6287133</anchor>
      <arglist>(std::size_t i, std::size_t p) const</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix</type>
      <name>solutionGradient</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>aa2b04c8858013d4258dac188781106af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>functionValue</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a2d43b3f583ea163dd937b273b88a5a60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>label</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>aa8b9277779382ed758e61e86a22bd990</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>dimensions</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a6ac922e31302971419d628beb007661e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>cardP</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a1f350d9542e7f74116f37648d5a2e582</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumExamples</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>aa02d1a80c2f8d85ebb392bd88bddf7e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>checkKKT</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a0aa24d59eb4a98a8fcc5c9c37d03d3b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDeltaLinear</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a3ac7767ba5e2c3d50301aea5fcb30f43</anchor>
      <arglist>(RealMatrix const &amp;deltaLinear)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateSMO</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>af64f1b2273c9101fc553bdc19741d57f</anchor>
      <arglist>(std::size_t v, std::size_t w)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shrink</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a9f3a0cb23c72fcc1d894cf6e052cc0a0</anchor>
      <arglist>(double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unshrink</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>abcf9cd029620d604c9eee35e1904551f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>selectWorkingSet</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>af243a2c18c76b3ee74d1729b3172cad8</anchor>
      <arglist>(std::size_t &amp;i, std::size_t &amp;j)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>gradientUpdate</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>ade403dcbf202a00f57c0c5f1cdbdf6d1</anchor>
      <arglist>(std::size_t r, double mu, QpFloatType *q)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deactivateVariable</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a099ea4c9a5b161181ba18e0e540fd159</anchor>
      <arglist>(std::size_t v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deactivateExample</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a972625074dc6705ab4db62d68320c6c3</anchor>
      <arglist>(std::size_t e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::size_t</type>
      <name>originalIndex</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>aa22a592f6560da037e33a24f05b1f41a</anchor>
      <arglist>(std::size_t v) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>bUnshrinked</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>aca3e51d1597fbb5e54f7a0e88c96a7dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix &amp;</type>
      <name>m_kernelMatrix</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a597f5a10db64def1c34e6ba8a100865f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QpSparseArray&lt; QpFloatType &gt; const  &amp;</type>
      <name>m_M</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a2177096acfbf03594d0ec0ea8880a850</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_C</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>af9dc4119649bae0b499bb357bc597ca4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_classes</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a4945d9b2146550ec74e0a228b310ba18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_cardP</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>aaafb26db48c0503662b4be923a524897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_numExamples</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>ad361f0ed89407eaaa8d6f9d29dfc3b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_numVariables</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>afef2cafcc58132bacc924cf2953ac8f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_linear</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a6de728f85c9e5617e11df9c7ac82a232</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_alpha</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>ad7bcf70932ab693e3d3afc1c11c26ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_gradient</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a2e82ba7b29b20804593b91dd78e134f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Example &gt;</type>
      <name>m_examples</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a511c350848efdf3c141d05ff2b9220ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Variable &gt;</type>
      <name>m_variables</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a9154f8aa555a2bc3b290a33884c554ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>m_storage1</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>ac8f39a5e9d0a8497c496f0592462208d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>m_storage2</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a5066dbad6eaba2f469cfa3fe42bc1409</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_activeEx</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>abd89ad37077119ea36d9f2641f2dd83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_activeVar</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a8c7ff90187025384bdc8c4c521d66b11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_useShrinking</name>
      <anchorfile>classshark_1_1_qp_mc_box_decomp.html</anchorfile>
      <anchor>a0ef3e99fcf33b83ee4876e80149cd2e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::QpMcLinear</name>
    <filename>classshark_1_1_qp_mc_linear.html</filename>
    <templarg>class InputT</templarg>
    <member kind="enumeration">
      <type></type>
      <name>CoordinateSelectionStrategy</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>a844cac01d9113019e1f89de7d0810d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIFORM</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>a844cac01d9113019e1f89de7d0810d79ac281d0b5f356d094aa5ad039e28cdc35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACF</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>a844cac01d9113019e1f89de7d0810d79a306e16139b81caaa99ea79d3ede9a712</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabeledData&lt; InputT, unsigned int &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>a09a8a598fe1e6c6c625be0c55b03985a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabeledData&lt; InputT, unsignedint &gt;::const_element_reference</type>
      <name>ElementType</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>a8da0d0f5ee8a849b350304e391ae0ea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; InputT &gt;::const_reference</type>
      <name>InputReferenceType</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>a88e09c2e6decd1e35f0755f0faf982f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIFORM</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>a844cac01d9113019e1f89de7d0810d79ac281d0b5f356d094aa5ad039e28cdc35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACF</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>a844cac01d9113019e1f89de7d0810d79a306e16139b81caaa99ea79d3ede9a712</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QpMcLinear</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>a257f16d453818fb33a9b32d8dd7c6bf2</anchor>
      <arglist>(const DatasetType &amp;dataset, std::size_t dim, std::size_t classes, std::size_t strategy=ACF, bool shrinking=false)</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix</type>
      <name>solve</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>a468f877984aab4f95122083bf4a87152</anchor>
      <arglist>(random::rng_type &amp;rng, double C, QpStoppingCondition &amp;stop, QpSolutionProperties *prop=NULL, bool verbose=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_scaled</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>a64edc8279169777bf9ef05052a412acd</anchor>
      <arglist>(RealMatrix &amp;w, RealVector const &amp;mu, InputReferenceType x)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>calcGradient</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>a6ff5650431f4502b6a76e7b79b7ff514</anchor>
      <arglist>(RealVector &amp;gradient, RealVector wx, blas::dense_vector_adaptor&lt; double const &gt; const &amp;alpha, double C, unsigned int y)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>updateWeightVectors</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>addbaf611cbd58e4a4e3d07b80a95fbf4</anchor>
      <arglist>(RealMatrix &amp;w, RealVector const &amp;mu, std::size_t index)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>solveSub</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>ad1bd9cdcfb10e5aca7c77e16812bae92</anchor>
      <arglist>(double epsilon, RealVector &amp;gradient, double q, double C, unsigned int y, blas::dense_vector_adaptor&lt; double &gt; &amp;alpha, RealVector &amp;mu)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataView&lt; const DatasetType &gt;</type>
      <name>m_data</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>ab724fc27e23748209c439970919afdc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_xSquared</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>adb2a6e9f3681450a55dd5764648d0cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_dim</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>a04cb0e529976e34569d0b6863e36b881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_classes</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>a3deaa3c8d8f3b5a15ffc509ed17a0398</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_strategy</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>ab5489cad6b7a0db6065331414ae21dc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_shrinking</name>
      <anchorfile>classshark_1_1_qp_mc_linear.html</anchorfile>
      <anchor>a4881e1ffbdb28a0f2d0fee00373e4e09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::QpMcLinearADM</name>
    <filename>classshark_1_1_qp_mc_linear_a_d_m.html</filename>
    <templarg>class InputT</templarg>
    <base>shark::QpMcLinear</base>
    <member kind="typedef">
      <type>LabeledData&lt; InputT, unsigned int &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_qp_mc_linear_a_d_m.html</anchorfile>
      <anchor>a4d8bc5efdd4db624d7c22a167637e53c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QpMcLinearADM</name>
      <anchorfile>classshark_1_1_qp_mc_linear_a_d_m.html</anchorfile>
      <anchor>a6066f28f061d4bef949314816c67a82c</anchor>
      <arglist>(const DatasetType &amp;dataset, std::size_t dim, std::size_t classes)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcGradient</name>
      <anchorfile>classshark_1_1_qp_mc_linear_a_d_m.html</anchorfile>
      <anchor>af8021dbbe5f3c4b3e5fdc83b941748cd</anchor>
      <arglist>(RealVector &amp;gradient, RealVector wx, blas::dense_vector_adaptor&lt; double const &gt; const &amp;alpha, double C, unsigned int y)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateWeightVectors</name>
      <anchorfile>classshark_1_1_qp_mc_linear_a_d_m.html</anchorfile>
      <anchor>ad9c79ecd1418beba9c94b414a8f3b8ef</anchor>
      <arglist>(RealMatrix &amp;w, RealVector const &amp;mu, std::size_t index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>solveSub</name>
      <anchorfile>classshark_1_1_qp_mc_linear_a_d_m.html</anchorfile>
      <anchor>a81cde691765509bedeafe49950a4f55f</anchor>
      <arglist>(double epsilon, RealVector &amp;gradient, double q, double C, unsigned int y, blas::dense_vector_adaptor&lt; double &gt; &amp;alpha, RealVector &amp;mu)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::QpMcLinearATM</name>
    <filename>classshark_1_1_qp_mc_linear_a_t_m.html</filename>
    <templarg>class InputT</templarg>
    <base>shark::QpMcLinear</base>
    <member kind="typedef">
      <type>LabeledData&lt; InputT, unsigned int &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_qp_mc_linear_a_t_m.html</anchorfile>
      <anchor>ab7575e4a5092dac0849da7907d4b1871</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QpMcLinearATM</name>
      <anchorfile>classshark_1_1_qp_mc_linear_a_t_m.html</anchorfile>
      <anchor>acb93af3d99bdddc6368526cf6adbd0f9</anchor>
      <arglist>(const DatasetType &amp;dataset, std::size_t dim, std::size_t classes)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcGradient</name>
      <anchorfile>classshark_1_1_qp_mc_linear_a_t_m.html</anchorfile>
      <anchor>afe91c0937cc28462d3d6d6dbeca8a52d</anchor>
      <arglist>(RealVector &amp;gradient, RealVector wx, blas::dense_vector_adaptor&lt; double const &gt; const &amp;alpha, double C, unsigned int y)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateWeightVectors</name>
      <anchorfile>classshark_1_1_qp_mc_linear_a_t_m.html</anchorfile>
      <anchor>ac3cac29e695f9788bcf6406dffee8bfc</anchor>
      <arglist>(RealMatrix &amp;w, RealVector const &amp;mu, std::size_t index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>solveSub</name>
      <anchorfile>classshark_1_1_qp_mc_linear_a_t_m.html</anchorfile>
      <anchor>a2844a08c891b42cacec77f53b4e7a1ce</anchor>
      <arglist>(double epsilon, RealVector &amp;gradient, double q, double C, unsigned int y, blas::dense_vector_adaptor&lt; double &gt; &amp;alpha, RealVector &amp;mu)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::QpMcLinearATS</name>
    <filename>classshark_1_1_qp_mc_linear_a_t_s.html</filename>
    <templarg>class InputT</templarg>
    <base>shark::QpMcLinear</base>
    <member kind="typedef">
      <type>LabeledData&lt; InputT, unsigned int &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_qp_mc_linear_a_t_s.html</anchorfile>
      <anchor>aaead2754cb9291e5f6d528cbcb8fe7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QpMcLinearATS</name>
      <anchorfile>classshark_1_1_qp_mc_linear_a_t_s.html</anchorfile>
      <anchor>a5a3a765ed2a5d848be8a47d80eec1c98</anchor>
      <arglist>(const DatasetType &amp;dataset, std::size_t dim, std::size_t classes)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcGradient</name>
      <anchorfile>classshark_1_1_qp_mc_linear_a_t_s.html</anchorfile>
      <anchor>aa878c63a7b0758bc2ad71d77bc65975f</anchor>
      <arglist>(RealVector &amp;gradient, RealVector wx, blas::dense_vector_adaptor&lt; double const &gt; const &amp;alpha, double C, unsigned int y)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateWeightVectors</name>
      <anchorfile>classshark_1_1_qp_mc_linear_a_t_s.html</anchorfile>
      <anchor>a879e147e3dd09399635bfc2df2f46013</anchor>
      <arglist>(RealMatrix &amp;w, RealVector const &amp;mu, std::size_t index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>solveSub</name>
      <anchorfile>classshark_1_1_qp_mc_linear_a_t_s.html</anchorfile>
      <anchor>ab28cf05fe5056dee19e00821473f62b6</anchor>
      <arglist>(double epsilon, RealVector &amp;gradient, double q, double C, unsigned int y, blas::dense_vector_adaptor&lt; double &gt; &amp;alpha, RealVector &amp;mu)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::QpMcLinearCS</name>
    <filename>classshark_1_1_qp_mc_linear_c_s.html</filename>
    <templarg>class InputT</templarg>
    <base>shark::QpMcLinear</base>
    <member kind="typedef">
      <type>LabeledData&lt; InputT, unsigned int &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_qp_mc_linear_c_s.html</anchorfile>
      <anchor>a59105bb31b6de78f13982629b32eb178</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QpMcLinearCS</name>
      <anchorfile>classshark_1_1_qp_mc_linear_c_s.html</anchorfile>
      <anchor>a1040b9d355cee9ce6ada95fd73df6667</anchor>
      <arglist>(const DatasetType &amp;dataset, std::size_t dim, std::size_t classes)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcGradient</name>
      <anchorfile>classshark_1_1_qp_mc_linear_c_s.html</anchorfile>
      <anchor>a800c787ffc88f44571a67e66f83d9f2b</anchor>
      <arglist>(RealVector &amp;gradient, RealVector wx, blas::dense_vector_adaptor&lt; double const &gt; const &amp;alpha, double C, unsigned int y)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateWeightVectors</name>
      <anchorfile>classshark_1_1_qp_mc_linear_c_s.html</anchorfile>
      <anchor>a55c0490023e02754a2cdfad01bfa05ce</anchor>
      <arglist>(RealMatrix &amp;w, RealVector const &amp;mu, std::size_t index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>solveSub</name>
      <anchorfile>classshark_1_1_qp_mc_linear_c_s.html</anchorfile>
      <anchor>a8de556a5e4be31c01350c6b0c125e17e</anchor>
      <arglist>(double epsilon, RealVector &amp;gradient, double q, double C, unsigned int y, blas::dense_vector_adaptor&lt; double &gt; &amp;alpha, RealVector &amp;mu)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::QpMcLinearLLW</name>
    <filename>classshark_1_1_qp_mc_linear_l_l_w.html</filename>
    <templarg>class InputT</templarg>
    <base>shark::QpMcLinear</base>
    <member kind="typedef">
      <type>LabeledData&lt; InputT, unsigned int &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_qp_mc_linear_l_l_w.html</anchorfile>
      <anchor>aaaf325364d5232e671602d914ef03f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QpMcLinearLLW</name>
      <anchorfile>classshark_1_1_qp_mc_linear_l_l_w.html</anchorfile>
      <anchor>a6c65ffa1852f11ca67f8d819dd383756</anchor>
      <arglist>(const DatasetType &amp;dataset, std::size_t dim, std::size_t classes)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcGradient</name>
      <anchorfile>classshark_1_1_qp_mc_linear_l_l_w.html</anchorfile>
      <anchor>a5d36501d3f63730064d4439657bcb21f</anchor>
      <arglist>(RealVector &amp;gradient, RealVector wx, blas::dense_vector_adaptor&lt; double const &gt; const &amp;alpha, double C, unsigned int y)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateWeightVectors</name>
      <anchorfile>classshark_1_1_qp_mc_linear_l_l_w.html</anchorfile>
      <anchor>a9c312d2e29afc1323b24d84ca390d2c0</anchor>
      <arglist>(RealMatrix &amp;w, RealVector const &amp;mu, std::size_t index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>solveSub</name>
      <anchorfile>classshark_1_1_qp_mc_linear_l_l_w.html</anchorfile>
      <anchor>a5d146ba6191a078d4d02ef0f385c1f66</anchor>
      <arglist>(double epsilon, RealVector &amp;gradient, double q, double C, unsigned int y, blas::dense_vector_adaptor&lt; double &gt; &amp;alpha, RealVector &amp;mu)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::QpMcLinearMMR</name>
    <filename>classshark_1_1_qp_mc_linear_m_m_r.html</filename>
    <templarg>class InputT</templarg>
    <base>shark::QpMcLinear</base>
    <member kind="typedef">
      <type>LabeledData&lt; InputT, unsigned int &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_qp_mc_linear_m_m_r.html</anchorfile>
      <anchor>a601bad9efffcbb3f7e95a7dd634e62c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QpMcLinearMMR</name>
      <anchorfile>classshark_1_1_qp_mc_linear_m_m_r.html</anchorfile>
      <anchor>a5af936784fc41fa371c1a47fe1ffd548</anchor>
      <arglist>(const DatasetType &amp;dataset, std::size_t dim, std::size_t classes)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcGradient</name>
      <anchorfile>classshark_1_1_qp_mc_linear_m_m_r.html</anchorfile>
      <anchor>a63cf5cf3a2059c597bc266cc4cd35674</anchor>
      <arglist>(RealVector &amp;gradient, RealVector wx, blas::dense_vector_adaptor&lt; double const &gt; const &amp;alpha, double C, unsigned int y)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateWeightVectors</name>
      <anchorfile>classshark_1_1_qp_mc_linear_m_m_r.html</anchorfile>
      <anchor>a93f9f804635fb731f339bf8419776efd</anchor>
      <arglist>(RealMatrix &amp;w, RealVector const &amp;mu, std::size_t index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>solveSub</name>
      <anchorfile>classshark_1_1_qp_mc_linear_m_m_r.html</anchorfile>
      <anchor>a08dec16354913fbbad8e3628b608c4e1</anchor>
      <arglist>(double epsilon, RealVector &amp;gradient, double q, double C, unsigned int y, blas::dense_vector_adaptor&lt; double &gt; &amp;alpha, RealVector &amp;mu)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::QpMcLinearReinforced</name>
    <filename>classshark_1_1_qp_mc_linear_reinforced.html</filename>
    <templarg>class InputT</templarg>
    <base>shark::QpMcLinear</base>
    <member kind="typedef">
      <type>LabeledData&lt; InputT, unsigned int &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_qp_mc_linear_reinforced.html</anchorfile>
      <anchor>a6cddfc666a5511751458970c83a0fa82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QpMcLinearReinforced</name>
      <anchorfile>classshark_1_1_qp_mc_linear_reinforced.html</anchorfile>
      <anchor>a3bd3712996fc586f17118eb739653276</anchor>
      <arglist>(const DatasetType &amp;dataset, std::size_t dim, std::size_t classes)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcGradient</name>
      <anchorfile>classshark_1_1_qp_mc_linear_reinforced.html</anchorfile>
      <anchor>ab3ba8e3be351d681e3bbba6da830d6a3</anchor>
      <arglist>(RealVector &amp;gradient, RealVector wx, blas::dense_vector_adaptor&lt; double const &gt; const &amp;alpha, double C, unsigned int y)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateWeightVectors</name>
      <anchorfile>classshark_1_1_qp_mc_linear_reinforced.html</anchorfile>
      <anchor>a17bbc888e42a6144ab9868f1a821809d</anchor>
      <arglist>(RealMatrix &amp;w, RealVector const &amp;mu, std::size_t index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>solveSub</name>
      <anchorfile>classshark_1_1_qp_mc_linear_reinforced.html</anchorfile>
      <anchor>aa5609174ae0b3735e073e828f2a8839b</anchor>
      <arglist>(double epsilon, RealVector &amp;gradient, double q, double C, unsigned int y, blas::dense_vector_adaptor&lt; double &gt; &amp;alpha, RealVector &amp;mu)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::QpMcLinearWW</name>
    <filename>classshark_1_1_qp_mc_linear_w_w.html</filename>
    <templarg>class InputT</templarg>
    <base>shark::QpMcLinear</base>
    <member kind="typedef">
      <type>LabeledData&lt; InputT, unsigned int &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_qp_mc_linear_w_w.html</anchorfile>
      <anchor>aeab1965cb2ef7795e64e2949c8ec1089</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QpMcLinearWW</name>
      <anchorfile>classshark_1_1_qp_mc_linear_w_w.html</anchorfile>
      <anchor>ac41f4189c1fc9f6ea185bbe152cd88bb</anchor>
      <arglist>(const DatasetType &amp;dataset, std::size_t dim, std::size_t classes)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcGradient</name>
      <anchorfile>classshark_1_1_qp_mc_linear_w_w.html</anchorfile>
      <anchor>a229d689f6acbd6074b047fea92f90ce3</anchor>
      <arglist>(RealVector &amp;gradient, RealVector wx, blas::dense_vector_adaptor&lt; double const &gt; const &amp;alpha, double C, unsigned int y)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateWeightVectors</name>
      <anchorfile>classshark_1_1_qp_mc_linear_w_w.html</anchorfile>
      <anchor>a2a6f6e6036ecf905606e62db0dc3816a</anchor>
      <arglist>(RealMatrix &amp;w, RealVector const &amp;mu, std::size_t index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>solveSub</name>
      <anchorfile>classshark_1_1_qp_mc_linear_w_w.html</anchorfile>
      <anchor>ac24ff73630263bee2b552222196d7ca6</anchor>
      <arglist>(double epsilon, RealVector &amp;gradient, double q, double C, unsigned int y, blas::dense_vector_adaptor&lt; double &gt; &amp;alpha, RealVector &amp;mu)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::QpMcSimplexDecomp</name>
    <filename>classshark_1_1_qp_mc_simplex_decomp.html</filename>
    <templarg>class Matrix</templarg>
    <class kind="struct">shark::QpMcSimplexDecomp::Example</class>
    <class kind="struct">shark::QpMcSimplexDecomp::PreferedSelectionStrategy</class>
    <class kind="struct">shark::QpMcSimplexDecomp::Variable</class>
    <member kind="typedef">
      <type>Matrix::QpFloatType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>ac2dfe25a10f0c19a059d4a5625a19937</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QpMcSimplexDecomp</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a902ef2e3553bb5cf42a5126199301abe</anchor>
      <arglist>(Matrix &amp;kernel, QpSparseArray&lt; QpFloatType &gt; const &amp;M, Data&lt; unsigned int &gt; const &amp;target, RealMatrix const &amp;linearMat, double C)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShrinking</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>aca9c90b5417b11327ae5447322078986</anchor>
      <arglist>(bool shrinking=true)</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix</type>
      <name>solution</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>aa9b4ddd02acf37a4ba2f5183e5436b79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix</type>
      <name>solutionGradient</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a865bba06e22ecaf94d95e3284e28c184</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>functionValue</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>ab697e161708891d6a088a5f8ea14aabd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>label</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a8cc961f63f6f3cb17ebda1b48e4ca3bc</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>dimensions</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a7ce0f79ca192b9cff806f6dd74180911</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>cardP</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a7d1d145388dafe52b13d4537c185df9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumExamples</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a2a6a69df2e864c4437c99c4b99718f69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDeltaLinear</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a4ec3b3bf8b8dc4d6861ac2f8756575d8</anchor>
      <arglist>(RealMatrix const &amp;deltaLinear)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateSMO</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>ac8de8b9664c3e7d61c88a8060e3ed7ac</anchor>
      <arglist>(std::size_t v, std::size_t w)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shrink</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>aca9f261b3af439c641c5f198ab31edc1</anchor>
      <arglist>(double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unshrink</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a5e41ddc4c2f813b5c50dd3e5df4f2697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>selectWorkingSet</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a8304e5a2955859682a416bc28c3d743f</anchor>
      <arglist>(std::size_t &amp;i, std::size_t &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>checkKKT</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a62b40d1335f1aa500d790cf6b5e0d735</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; std::pair&lt; std::size_t, std::size_t &gt;, double &gt;</type>
      <name>maxGainBox</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a3689cea409b991cc35f58e8cf23ddc00</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; std::pair&lt; std::size_t, std::size_t &gt;, double &gt;</type>
      <name>maxGainSimplex</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a190272c5d5f87ebd96e5efe34b7d5614</anchor>
      <arglist>(std::size_t e) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; std::pair&lt; double, std::size_t &gt;, std::pair&lt; double, std::size_t &gt; &gt;</type>
      <name>getSimplexMVP</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>abed9aa58f4c24140ba445737987a6f98</anchor>
      <arglist>(Example const &amp;ex) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVarsum</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a23aa81fc5a1341bacbbb65f4bba9bd38</anchor>
      <arglist>(std::size_t exampleId, double mu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>gradientUpdate</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a2407864545443c298157fb489c3038f3</anchor>
      <arglist>(std::size_t r, double mu, QpFloatType *q)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deactivateVariable</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a1d59e69be46dee9ca569fe8f4a4116d3</anchor>
      <arglist>(std::size_t v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deactivateExample</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>afd8b5d8d95c2235fe44423d9833761bd</anchor>
      <arglist>(std::size_t e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::size_t</type>
      <name>originalIndex</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a35458b4d12a371cf221c1643e7295072</anchor>
      <arglist>(std::size_t v) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix &amp;</type>
      <name>m_kernelMatrix</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>ac8b9a895906060a9d50e13b0523d4255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QpSparseArray&lt; QpFloatType &gt; const  &amp;</type>
      <name>m_M</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a7b64dccd47c7db2a9fa4110b55b52c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_C</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a9a6ceeb1c95124d14fd75a061282063e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_classes</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a4b3c753187efbb58b433a76face7a52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_cardP</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a4998fe91e32ad7b0248b7ae9bf049698</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_numExamples</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a6bb02dd76df204682c6c914b9c6d8287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_numVariables</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a837aabb43bc054e78dc73e831e6ac95c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_linear</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>acae515e014c4002712b8d7204b2e5d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_alpha</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a273c3111e4f92b69208b8d6956d92632</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_gradient</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>ae10be0310484cc2dd7b23e17a9eb2a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Example &gt;</type>
      <name>m_examples</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a5a5b7d832f3d8ac9cf0cc485e6339ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Variable &gt;</type>
      <name>m_variables</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>af6d2c8d896fddf2d93b6c3941301ca3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>m_storage1</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a9b901d9fb12638fcbf12704c0bf41bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>m_storage2</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>a3e94df73fba2f12fcbdc923c062ff752</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_activeEx</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>ad7997f63459adc594c8d1cd649438838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_activeVar</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>aac002eeaa49e5ff3b667f9934d92392f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_useShrinking</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>af69f443110c3a0e0c6d34ec331c71a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>bUnshrinked</name>
      <anchorfile>classshark_1_1_qp_mc_simplex_decomp.html</anchorfile>
      <anchor>ae4356261aaf70b6569308fa13f01a56a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::QpSolutionProperties</name>
    <filename>structshark_1_1_qp_solution_properties.html</filename>
    <member kind="function">
      <type></type>
      <name>QpSolutionProperties</name>
      <anchorfile>structshark_1_1_qp_solution_properties.html</anchorfile>
      <anchor>a43adbf4089a94cf2124fc28602600719</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>accuracy</name>
      <anchorfile>structshark_1_1_qp_solution_properties.html</anchorfile>
      <anchor>a754cf16ef14ec337a626ab31c11ac444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long long</type>
      <name>iterations</name>
      <anchorfile>structshark_1_1_qp_solution_properties.html</anchorfile>
      <anchor>aa1b7fb15931dfebb70364b0bf949fa15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>value</name>
      <anchorfile>structshark_1_1_qp_solution_properties.html</anchorfile>
      <anchor>aa3b4e5dcba8e39ee858c6ea36c8879b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>seconds</name>
      <anchorfile>structshark_1_1_qp_solution_properties.html</anchorfile>
      <anchor>a965ff3df7a7c9ae101b0b06e82921c91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::QpSolver</name>
    <filename>classshark_1_1_qp_solver.html</filename>
    <templarg>class Problem</templarg>
    <templarg>class SelectionStrategy</templarg>
    <member kind="function">
      <type></type>
      <name>QpSolver</name>
      <anchorfile>classshark_1_1_qp_solver.html</anchorfile>
      <anchor>ae9572667955c34708e869e081542b018</anchor>
      <arglist>(Problem &amp;problem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classshark_1_1_qp_solver.html</anchorfile>
      <anchor>aef891551dc0bc92ab4571cb7d479706f</anchor>
      <arglist>(QpStoppingCondition &amp;stop, QpSolutionProperties *prop=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Problem &amp;</type>
      <name>m_problem</name>
      <anchorfile>classshark_1_1_qp_solver.html</anchorfile>
      <anchor>adb8ce16903004d00cc5fa08ae56c82a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::QpSparseArray</name>
    <filename>classshark_1_1_qp_sparse_array.html</filename>
    <templarg>class QpFloatType</templarg>
    <class kind="struct">shark::QpSparseArray::Entry</class>
    <class kind="struct">shark::QpSparseArray::Row</class>
    <member kind="function">
      <type></type>
      <name>QpSparseArray</name>
      <anchorfile>classshark_1_1_qp_sparse_array.html</anchorfile>
      <anchor>a2c7b17a115b4972833f6ef53270dae10</anchor>
      <arglist>(std::size_t height, std::size_t width, std::size_t space)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QpSparseArray</name>
      <anchorfile>classshark_1_1_qp_sparse_array.html</anchorfile>
      <anchor>a3f6cf91a1ea520781f35de6779acaaaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>width</name>
      <anchorfile>classshark_1_1_qp_sparse_array.html</anchorfile>
      <anchor>aeaeaa2435983010624e3d8149fb8cb26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>height</name>
      <anchorfile>classshark_1_1_qp_sparse_array.html</anchorfile>
      <anchor>a8e29bae5873d6deeb884081ec0a414da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_qp_sparse_array.html</anchorfile>
      <anchor>aa9c70dcd6ba6f62a66c1321c1f979930</anchor>
      <arglist>(std::size_t row, std::size_t col) const</arglist>
    </member>
    <member kind="function">
      <type>Row const &amp;</type>
      <name>row</name>
      <anchorfile>classshark_1_1_qp_sparse_array.html</anchorfile>
      <anchor>a48374ef20f984fd3d290600fc5af63f8</anchor>
      <arglist>(std::size_t row) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValue</name>
      <anchorfile>classshark_1_1_qp_sparse_array.html</anchorfile>
      <anchor>acd9012fb7ee87ce9a0dfde253259e249</anchor>
      <arglist>(std::size_t row, QpFloatType defaultvalue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classshark_1_1_qp_sparse_array.html</anchorfile>
      <anchor>a3e824fc525e7c61c28b01158f778fb81</anchor>
      <arglist>(std::size_t row, std::size_t col, QpFloatType value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classshark_1_1_qp_sparse_array.html</anchorfile>
      <anchor>a4b337a24b7e0345a681d912b917f16ff</anchor>
      <arglist>(std::size_t height, std::size_t width, std::size_t space)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_width</name>
      <anchorfile>classshark_1_1_qp_sparse_array.html</anchorfile>
      <anchor>a952bfa4094a1550df61de8cec113b31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_height</name>
      <anchorfile>classshark_1_1_qp_sparse_array.html</anchorfile>
      <anchor>ae93f0f6c0490fd4da35ae9238a8357d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_used</name>
      <anchorfile>classshark_1_1_qp_sparse_array.html</anchorfile>
      <anchor>a1c4341610157c57de2350e31c3c72067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Entry &gt;</type>
      <name>m_data</name>
      <anchorfile>classshark_1_1_qp_sparse_array.html</anchorfile>
      <anchor>ab5cfd3694af7a89bb9a9a2ffbdbcfa15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Row &gt;</type>
      <name>m_row</name>
      <anchorfile>classshark_1_1_qp_sparse_array.html</anchorfile>
      <anchor>a6e8a8bd9a4ea5ad8791ad97812bbed06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::QpStoppingCondition</name>
    <filename>structshark_1_1_qp_stopping_condition.html</filename>
    <member kind="function">
      <type></type>
      <name>QpStoppingCondition</name>
      <anchorfile>structshark_1_1_qp_stopping_condition.html</anchorfile>
      <anchor>a71120944a5b9a474f278fb346d82019c</anchor>
      <arglist>(double accuracy=0.001, unsigned long long iterations=0xffffffff, double value=1e100, double seconds=1e100)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minAccuracy</name>
      <anchorfile>structshark_1_1_qp_stopping_condition.html</anchorfile>
      <anchor>addc2ea7f6d15eb25187586e329f33ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long long</type>
      <name>maxIterations</name>
      <anchorfile>structshark_1_1_qp_stopping_condition.html</anchorfile>
      <anchor>af747ff263a208a610fc2ca4dccec44d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>targetValue</name>
      <anchorfile>structshark_1_1_qp_stopping_condition.html</anchorfile>
      <anchor>aef0871941c7b0acd271996801b05b47b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxSeconds</name>
      <anchorfile>structshark_1_1_qp_stopping_condition.html</anchorfile>
      <anchor>a2f2037cc62c817ff88ec0801591a0240</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::statistics::Quantile</name>
    <filename>classshark_1_1statistics_1_1_quantile.html</filename>
    <base>shark::statistics::BaseStatisticsObject</base>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1statistics_1_1_quantile.html</anchorfile>
      <anchor>a505221ce995a1c6b169aef2056cb3661</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quantile</name>
      <anchorfile>classshark_1_1statistics_1_1_quantile.html</anchorfile>
      <anchor>aa2c9657fb9409a6e4f3e5b2808105966</anchor>
      <arglist>(double quantile)</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>statistics</name>
      <anchorfile>classshark_1_1statistics_1_1_quantile.html</anchorfile>
      <anchor>a1f72cc7a0073f0638c8be885b0dcdacd</anchor>
      <arglist>(std::vector&lt; RealVector &gt; const &amp;points) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::RadiusMarginQuotient</name>
    <filename>classshark_1_1_radius_margin_quotient.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class CacheType</templarg>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <class kind="struct">shark::RadiusMarginQuotient::Result</class>
    <member kind="typedef">
      <type>CacheType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_radius_margin_quotient.html</anchorfile>
      <anchor>ae03c687bda1588110232c1a43812e8ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KernelMatrix&lt; InputType, QpFloatType &gt;</type>
      <name>KernelMatrixType</name>
      <anchorfile>classshark_1_1_radius_margin_quotient.html</anchorfile>
      <anchor>a7a5a2a542b3007d3f3b8d8ed10d26aee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CachedMatrix&lt; KernelMatrixType &gt;</type>
      <name>CachedMatrixType</name>
      <anchorfile>classshark_1_1_radius_margin_quotient.html</anchorfile>
      <anchor>aba8f1ccdea62f3c8ede792f83647b518</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabeledData&lt; InputType, unsigned int &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_radius_margin_quotient.html</anchorfile>
      <anchor>aad5feb801b7d44a7e9f571460ce44295</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_radius_margin_quotient.html</anchorfile>
      <anchor>a5a7df1077dea1469766996f4dd3072b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadiusMarginQuotient</name>
      <anchorfile>classshark_1_1_radius_margin_quotient.html</anchorfile>
      <anchor>aca26f45e233b839060e16d49bf27d72b</anchor>
      <arglist>(DatasetType const &amp;dataset, KernelType *kernel)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_radius_margin_quotient.html</anchorfile>
      <anchor>a58a79c47263f74c4406c87f24376ac18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_radius_margin_quotient.html</anchorfile>
      <anchor>a2ad114b67e0b9d29179bb67a52da3760</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_radius_margin_quotient.html</anchorfile>
      <anchor>ab089f14d5575c3a831d285992f80fcb1</anchor>
      <arglist>(SearchPointType const &amp;parameters) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_radius_margin_quotient.html</anchorfile>
      <anchor>a61c0b73eaf10d43b9a1af891fc51dd5f</anchor>
      <arglist>(SearchPointType const &amp;parameters, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Result</type>
      <name>computeRadiusMargin</name>
      <anchorfile>classshark_1_1_radius_margin_quotient.html</anchorfile>
      <anchor>a72f6cfe0cc96c2f1551861af80323f47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KernelType *</type>
      <name>mep_kernel</name>
      <anchorfile>classshark_1_1_radius_margin_quotient.html</anchorfile>
      <anchor>a5414bd1a47ec645662a85aa9a62f969e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DatasetType</type>
      <name>m_dataset</name>
      <anchorfile>classshark_1_1_radius_margin_quotient.html</anchorfile>
      <anchor>a04a7f50772dd0474897867490ddf38fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::RankingSvmTrainer</name>
    <filename>classshark_1_1_ranking_svm_trainer.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class CacheType</templarg>
    <base>AbstractSvmTrainer&lt; InputType, unsigned int, KernelExpansion&lt; InputType &gt; &gt;</base>
    <member kind="typedef">
      <type>CacheType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_ranking_svm_trainer.html</anchorfile>
      <anchor>a865d9bea84143e7f5bd16d0ac36dccd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_ranking_svm_trainer.html</anchorfile>
      <anchor>af33d5d5d2b50eb37f3b54a80bedc2aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RankingSvmTrainer</name>
      <anchorfile>classshark_1_1_ranking_svm_trainer.html</anchorfile>
      <anchor>a54df15bbf0fc10b90891b7e47243657a</anchor>
      <arglist>(KernelType *kernel, double C, bool unconstrained=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_ranking_svm_trainer.html</anchorfile>
      <anchor>a25ffc4b3b8a854bdd92386786b67edac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_ranking_svm_trainer.html</anchorfile>
      <anchor>a2a7c219733a19872f9f340bc2051335b</anchor>
      <arglist>(KernelExpansion&lt; InputType &gt; &amp;function, Data&lt; InputType &gt; const &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_ranking_svm_trainer.html</anchorfile>
      <anchor>afba6be5a23b22bdd152cc545e6db388e</anchor>
      <arglist>(KernelExpansion&lt; InputType &gt; &amp;function, LabeledData&lt; InputType, unsigned int &gt; const &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_ranking_svm_trainer.html</anchorfile>
      <anchor>a62dc84445c4882ea841c70916cdeb2ef</anchor>
      <arglist>(KernelExpansion&lt; InputType &gt; &amp;function, Data&lt; InputType &gt; const &amp;dataset, std::vector&lt; std::pair&lt; std::size_t, std::size_t &gt; &gt; const &amp;pairs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::Individual::RankOrdering</name>
    <filename>structshark_1_1_individual_1_1_rank_ordering.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_individual_1_1_rank_ordering.html</anchorfile>
      <anchor>ac4a9e7013da6bdd76788cd4a0c1f1fb7</anchor>
      <arglist>(Individual const &amp;individual1, Individual const &amp;individual2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::RBFLayer</name>
    <filename>classshark_1_1_r_b_f_layer.html</filename>
    <base>AbstractModel&lt; RealVector, RealVector &gt;</base>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL</type>
      <name>RBFLayer</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>aa6b23dfb2c34ecbb5d96034eb17bd5b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL</type>
      <name>RBFLayer</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>aa6a28b5b0f7b69d9b2a319b1e1e8408e</anchor>
      <arglist>(std::size_t numInput, std::size_t numOutput)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>a5c92a238e03636179012151422f54024</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>a5e089c9692be82ff557922798fecd588</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>a8b8883b0033bb8a18936be6ee378d866</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>ae53a34bf645bccbbbc940159401268cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>a44b2ae85c21a914c7e82b613fd99b311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>a5f0b042b8eaffbd25b1c3b980f0073c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>a3193c0bff83fdf1e5ed37f12d9639351</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>setStructure</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>a1218b1268f1cac744be2ac911fce9484</anchor>
      <arglist>(std::size_t numInput, std::size_t numOutput)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>ab37758750b8174cf1d93aa5e90eacef1</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>ae157c4443c817e640e439081a380c1c9</anchor>
      <arglist>(BatchInputType const &amp;pattern, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, RealVector &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>setTrainingParameters</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>ab5f5fa653d9306ed7f27d415531d1b75</anchor>
      <arglist>(bool centers, bool width)</arglist>
    </member>
    <member kind="function">
      <type>BatchInputType const &amp;</type>
      <name>centers</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>ad8f489205e3fb40eb807298df0c4819a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BatchInputType &amp;</type>
      <name>centers</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>af81dd8790d90e312bb3c7e595e86fe3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>gamma</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>ae5709681c4970ec1eecfc091ef67a17c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>setGamma</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>a9cd0894ca90ba7ec7c52956c22ada23c</anchor>
      <arglist>(RealVector const &amp;gamma)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>a332b99e89c51c3a80da79691f7b878f5</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>a05b2cbad373fbe6e71cae2df22cc6887</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealMatrix</type>
      <name>m_centers</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>a47e3acee6084df0af2c5cfcfd116c57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_gamma</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>abe31b5060f353d51e3ad91033ea74b93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_logNormalization</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>a0542425d6c552464e08a91b36fe869be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_trainCenters</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>ae255d94e66059ddd373c4690aa25f5cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_trainWidth</name>
      <anchorfile>classshark_1_1_r_b_f_layer.html</anchorfile>
      <anchor>a73ce38fb63627cc5f1ae4ad8c3aae9db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::RBM</name>
    <filename>classshark_1_1_r_b_m.html</filename>
    <templarg>class VisibleLayerT</templarg>
    <templarg>class HiddenLayerT</templarg>
    <templarg>class randomT</templarg>
    <base>AbstractModel&lt; RealVector, RealVector &gt;</base>
    <member kind="typedef">
      <type>HiddenLayerT</type>
      <name>HiddenType</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a1b20cbe042d3ac817fbf26c562e5b277</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VisibleLayerT</type>
      <name>VisibleType</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a5e271a43da1f3c33db74235402d7a84b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>randomT</type>
      <name>randomType</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a5b791282749a918b7894a9cb01c29a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Energy&lt; RBM&lt; VisibleType, HiddenType, randomT &gt; &gt;</type>
      <name>EnergyType</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a9e64a75e314d39c06b298f348f4edb27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::AverageEnergyGradient&lt; RBM &gt;</type>
      <name>GradientType</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a916086702525de4b9ccd1a715f4317d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>ae23bef32feaf5bf153d2fc25fca42557</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a49d157ed652e935efdf9e64671a2cb46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RBM</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>ab7e7691d5840fe1a87b9b220e9d9ab47</anchor>
      <arglist>(randomType &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>ae2d7c8d3c93a4d8e01a066793d5f2cb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a7db1411301e34ef5fb6c1ab98dfbfed4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>aef829473dfa3b3c8bce134aba6fd7420</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a4412f9b10e320b1db350284a94a4b34d</anchor>
      <arglist>(const RealVector &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStructure</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a9ef4cbc58af54464387b84111938dd12</anchor>
      <arglist>(std::size_t visibleNeurons, std::size_t hiddenNeurons)</arglist>
    </member>
    <member kind="function">
      <type>HiddenType const &amp;</type>
      <name>hiddenNeurons</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a2c69b9101da84089ff38a8eb3e6b4a9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HiddenType &amp;</type>
      <name>hiddenNeurons</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>ad185b821633258df02fe62c3d5e08a54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VisibleType &amp;</type>
      <name>visibleNeurons</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a5d79874854c30c34ff7d13a62bbf6b45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VisibleType const &amp;</type>
      <name>visibleNeurons</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a579f3f64d7eb907a501c91a1907f6133</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix &amp;</type>
      <name>weightMatrix</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a84024ce828171989645feca12095c3cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix const &amp;</type>
      <name>weightMatrix</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a09fbb9d2b6b4dddd151ec65ca278acc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EnergyType</type>
      <name>energy</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a8fb50f496bfd20e8a3e1cd9573b82ce2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>randomType &amp;</type>
      <name>rng</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a7ec198cf576079447b2c78661625980b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluationType</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>ad94533d058118a9a0ba544b4c38d9517</anchor>
      <arglist>(bool forward, bool evalMean)</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a38b0902cc476633d87d332220d13e9a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a51a624959ff348a01150a8ea654709ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a5e0f8d86ec292aeb2cd89525750a5079</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a25713d2a3e7881d18fe7d767e0021da9</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a4ba01d8ede9a53e1771471dc62e74a74</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inputHidden</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a87ff1500124f108b836beebc4ee0eeb4</anchor>
      <arglist>(RealMatrix &amp;inputs, RealMatrix const &amp;visibleStates) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inputVisible</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>ab6140a0df931943c1c26bc07065a5565</anchor>
      <arglist>(RealMatrix &amp;inputs, RealMatrix const &amp;hiddenStates) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfHN</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>aff68280f2b354df64b4ac311bcd0a240</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVN</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>aa2832c9073247890ae6f17285cc5056c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a1f347deac6a9d06e1ae485dfa0fd276e</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_r_b_m.html</anchorfile>
      <anchor>a86fc20140fb2838b0e2dbbdee0a36650</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::RealCodedNSGAIII</name>
    <filename>classshark_1_1_real_coded_n_s_g_a_i_i_i.html</filename>
    <base>IndicatorBasedRealCodedNSGAII&lt; NSGA3Indicator &gt;</base>
    <member kind="function">
      <type></type>
      <name>RealCodedNSGAIII</name>
      <anchorfile>classshark_1_1_real_coded_n_s_g_a_i_i_i.html</anchorfile>
      <anchor>a02a9bb202121e316d486b15b24b8856b</anchor>
      <arglist>(random::rng_type &amp;rng=random::globalRng)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_real_coded_n_s_g_a_i_i_i.html</anchorfile>
      <anchor>a3ddf2bb350b0053ddd30bd283a22ffbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doInit</name>
      <anchorfile>classshark_1_1_real_coded_n_s_g_a_i_i_i.html</anchorfile>
      <anchor>ad457877fd7ad0a79ca7bcba1179d7df0</anchor>
      <arglist>(std::vector&lt; SearchPointType &gt; const &amp;initialSearchPoints, std::vector&lt; ResultType &gt; const &amp;functionValues, RealVector const &amp;lowerBounds, RealVector const &amp;upperBounds, std::size_t mu, double nm, double nc, double crossover_prob, std::vector&lt; Preference &gt; const &amp;indicatorPreferences=std::vector&lt; Preference &gt;())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::RealSpace</name>
    <filename>structshark_1_1_real_space.html</filename>
    <member kind="typedef">
      <type>tags::RealSpace</type>
      <name>EnumerationTag</name>
      <anchorfile>structshark_1_1_real_space.html</anchorfile>
      <anchor>a320adbcadd9ca090ae369b31126363b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::tags::RealSpace</name>
    <filename>structshark_1_1tags_1_1_real_space.html</filename>
  </compound>
  <compound kind="struct">
    <name>shark::RectifierNeuron</name>
    <filename>structshark_1_1_rectifier_neuron.html</filename>
    <member kind="typedef">
      <type>EmptyState</type>
      <name>State</name>
      <anchorfile>structshark_1_1_rectifier_neuron.html</anchorfile>
      <anchor>aa38a1de9ef83ef387b9661ed96116299</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalInPlace</name>
      <anchorfile>structshark_1_1_rectifier_neuron.html</anchorfile>
      <anchor>a4e9454a3195b9d72861cc0f854d26f2d</anchor>
      <arglist>(Arg &amp;arg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalInPlace</name>
      <anchorfile>structshark_1_1_rectifier_neuron.html</anchorfile>
      <anchor>a992fc8280d37f7acd749de15765c74ab</anchor>
      <arglist>(Arg &amp;arg, State &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyDerivative</name>
      <anchorfile>structshark_1_1_rectifier_neuron.html</anchorfile>
      <anchor>aa0346706ce48969b5759c117e062442d</anchor>
      <arglist>(Output const &amp;output, Derivative &amp;der, State const &amp;state) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::ReferenceVectorAdaptation</name>
    <filename>structshark_1_1_reference_vector_adaptation.html</filename>
    <templarg>typename IndividualType</templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_reference_vector_adaptation.html</anchorfile>
      <anchor>a2e06c3dc458dc3292ed87c700ccac2c1</anchor>
      <arglist>(std::vector&lt; IndividualType &gt; const &amp;population, RealMatrix &amp;referenceVectors, RealVector &amp;minAngles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_reference_vector_adaptation.html</anchorfile>
      <anchor>a4cf77240090562c020ad4c5093df0ccc</anchor>
      <arglist>(Archive &amp;archive)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>updateAngles</name>
      <anchorfile>structshark_1_1_reference_vector_adaptation.html</anchorfile>
      <anchor>a595d5f3ea74e2b31cc6fcfe79daa262f</anchor>
      <arglist>(RealMatrix const &amp;referenceVectors, RealVector &amp;minAngles)</arglist>
    </member>
    <member kind="variable">
      <type>RealMatrix</type>
      <name>m_initVecs</name>
      <anchorfile>structshark_1_1_reference_vector_adaptation.html</anchorfile>
      <anchor>a7454753da4bdaef9f4a23cb66351f007</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::ReferenceVectorGuidedSelection</name>
    <filename>structshark_1_1_reference_vector_guided_selection.html</filename>
    <templarg>typename IndividualType</templarg>
    <member kind="typedef">
      <type>std::set&lt; std::size_t &gt;</type>
      <name>bag_t</name>
      <anchorfile>structshark_1_1_reference_vector_guided_selection.html</anchorfile>
      <anchor>aa924daa48c07ebab02ad0f09f1775f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_reference_vector_guided_selection.html</anchorfile>
      <anchor>a7bf23c25be28a0dc6a93b1ccb419233f</anchor>
      <arglist>(std::vector&lt; IndividualType &gt; &amp;population, RealMatrix const &amp;referenceVectors, RealVector const &amp;gammas, std::size_t const curIteration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_reference_vector_guided_selection.html</anchorfile>
      <anchor>ab8091809b0e95b77de9c89fd08ecf232</anchor>
      <arglist>(Archive &amp;archive)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; bag_t &gt;</type>
      <name>populationPartition</name>
      <anchorfile>structshark_1_1_reference_vector_guided_selection.html</anchorfile>
      <anchor>a5baaad83af9cfd6838db277c4ad41a84</anchor>
      <arglist>(RealMatrix const &amp;cosAngles)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RealMatrix</type>
      <name>extractPopulationFitness</name>
      <anchorfile>structshark_1_1_reference_vector_guided_selection.html</anchorfile>
      <anchor>aaca1139b4474117041edd70ecf33afa2</anchor>
      <arglist>(std::vector&lt; IndividualType &gt; const &amp;population)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RealVector</type>
      <name>minCol</name>
      <anchorfile>structshark_1_1_reference_vector_guided_selection.html</anchorfile>
      <anchor>ab44cdfa5f098b005d1033b97dcfa1b17</anchor>
      <arglist>(RealMatrix const &amp;m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RealMatrix</type>
      <name>cosAngles</name>
      <anchorfile>structshark_1_1_reference_vector_guided_selection.html</anchorfile>
      <anchor>aef0dbf448c9f01c70eb7defccabdd58b</anchor>
      <arglist>(RealMatrix const &amp;m1, RealMatrix const &amp;m2)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_alpha</name>
      <anchorfile>structshark_1_1_reference_vector_guided_selection.html</anchorfile>
      <anchor>aa70d7ca4f48a31dbe4e838e9ebb5c581</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>m_maxIters</name>
      <anchorfile>structshark_1_1_reference_vector_guided_selection.html</anchorfile>
      <anchor>a3be26c2c82b5592c9c666bdedbf771c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::RegularizationNetworkTrainer</name>
    <filename>classshark_1_1_regularization_network_trainer.html</filename>
    <templarg>class InputType</templarg>
    <base>AbstractSvmTrainer&lt; InputType, RealVector, KernelExpansion&lt; InputType &gt; &gt;</base>
    <member kind="typedef">
      <type>AbstractModel&lt; InputType, RealVector &gt;</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_regularization_network_trainer.html</anchorfile>
      <anchor>a681d8e1fad11bcd8a7c8a73c5e1fb38e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_regularization_network_trainer.html</anchorfile>
      <anchor>a8eda3b552bb1deb882a8fb1bcf604a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularizationNetworkTrainer</name>
      <anchorfile>classshark_1_1_regularization_network_trainer.html</anchorfile>
      <anchor>a9893276bab3d8102d1f1d8610e7f120c</anchor>
      <arglist>(KernelType *kernel, double betaInv, bool unconstrained=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_regularization_network_trainer.html</anchorfile>
      <anchor>a9e48be55e7a79ad8a6fd1355aa2bd8da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>noiseVariance</name>
      <anchorfile>classshark_1_1_regularization_network_trainer.html</anchorfile>
      <anchor>a5bc0b145342c383e4b5825ba887256c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoiseVariance</name>
      <anchorfile>classshark_1_1_regularization_network_trainer.html</anchorfile>
      <anchor>a2577164dc6cc24401b2901ae9e3ac6e9</anchor>
      <arglist>(double betaInv)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>precision</name>
      <anchorfile>classshark_1_1_regularization_network_trainer.html</anchorfile>
      <anchor>a87ce3df17f42b18767bcb593dfbf2ac6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrecision</name>
      <anchorfile>classshark_1_1_regularization_network_trainer.html</anchorfile>
      <anchor>ac4eeec2481645b35732f80dc8f96f8e5</anchor>
      <arglist>(double beta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_regularization_network_trainer.html</anchorfile>
      <anchor>a0c203b749f48be1b99e679ea666ff0c0</anchor>
      <arglist>(KernelExpansion&lt; InputType &gt; &amp;svm, const LabeledData&lt; InputType, RealVector &gt; &amp;dataset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::RegularizedKernelMatrix</name>
    <filename>classshark_1_1_regularized_kernel_matrix.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class CacheType</templarg>
    <member kind="typedef">
      <type>Matrix::QpFloatType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_regularized_kernel_matrix.html</anchorfile>
      <anchor>ab9a480348d4b71ee2e01ca9bb9d3cd3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularizedKernelMatrix</name>
      <anchorfile>classshark_1_1_regularized_kernel_matrix.html</anchorfile>
      <anchor>a36bdf57606893668b6b7fc2e187d38fc</anchor>
      <arglist>(AbstractKernelFunction&lt; InputType &gt; const &amp;kernelfunction, Data&lt; InputType &gt; const &amp;data, const RealVector &amp;diagModification)</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_regularized_kernel_matrix.html</anchorfile>
      <anchor>ad5c4405d369405498a16ae04e7cf8f18</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>QpFloatType</type>
      <name>entry</name>
      <anchorfile>classshark_1_1_regularized_kernel_matrix.html</anchorfile>
      <anchor>aaef24efda3b1d8bff9a9e23c58985694</anchor>
      <arglist>(std::size_t i, std::size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>classshark_1_1_regularized_kernel_matrix.html</anchorfile>
      <anchor>a4c6ca54b0374328f55954e902b88321d</anchor>
      <arglist>(std::size_t k, std::size_t start, std::size_t end, QpFloatType *storage) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matrix</name>
      <anchorfile>classshark_1_1_regularized_kernel_matrix.html</anchorfile>
      <anchor>a831a5280628bf93c3725c0998b3e6a94</anchor>
      <arglist>(blas::matrix_expression&lt; M, blas::cpu_tag &gt; &amp;storage) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipColumnsAndRows</name>
      <anchorfile>classshark_1_1_regularized_kernel_matrix.html</anchorfile>
      <anchor>af31efdb92598b323f1f170bd869d56a8</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_regularized_kernel_matrix.html</anchorfile>
      <anchor>ad45561456f338f3e1d21495030a49d5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>getAccessCount</name>
      <anchorfile>classshark_1_1_regularized_kernel_matrix.html</anchorfile>
      <anchor>ae18e8a97284551effcabcbf2a4bac945</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetAccessCount</name>
      <anchorfile>classshark_1_1_regularized_kernel_matrix.html</anchorfile>
      <anchor>a5b05f90e9cab384c7a217a6d3e16550b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>m_matrix</name>
      <anchorfile>classshark_1_1_regularized_kernel_matrix.html</anchorfile>
      <anchor>a20c2d877a6ec81f5862e36ba63966200</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_diagMod</name>
      <anchorfile>classshark_1_1_regularized_kernel_matrix.html</anchorfile>
      <anchor>aea1357071964b834f427e45f9d3bb304</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::RemoveBudgetMaintenanceStrategy</name>
    <filename>classshark_1_1_remove_budget_maintenance_strategy.html</filename>
    <templarg>class InputType</templarg>
    <base>shark::AbstractBudgetMaintenanceStrategy</base>
    <member kind="enumeration">
      <type></type>
      <name>RemoveStrategyFlavor</name>
      <anchorfile>classshark_1_1_remove_budget_maintenance_strategy.html</anchorfile>
      <anchor>afa4ea66adb4e0114f913bf49e9737804</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RANDOM</name>
      <anchorfile>classshark_1_1_remove_budget_maintenance_strategy.html</anchorfile>
      <anchor>afa4ea66adb4e0114f913bf49e9737804a33a06748f85038c3e3652ffc18ec07fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SMALLEST</name>
      <anchorfile>classshark_1_1_remove_budget_maintenance_strategy.html</anchorfile>
      <anchor>afa4ea66adb4e0114f913bf49e9737804af408fd53121e41a537ca4280ca96e545</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RANDOM</name>
      <anchorfile>classshark_1_1_remove_budget_maintenance_strategy.html</anchorfile>
      <anchor>afa4ea66adb4e0114f913bf49e9737804a33a06748f85038c3e3652ffc18ec07fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SMALLEST</name>
      <anchorfile>classshark_1_1_remove_budget_maintenance_strategy.html</anchorfile>
      <anchor>afa4ea66adb4e0114f913bf49e9737804af408fd53121e41a537ca4280ca96e545</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RemoveBudgetMaintenanceStrategy</name>
      <anchorfile>classshark_1_1_remove_budget_maintenance_strategy.html</anchorfile>
      <anchor>a381bddc222d4060c66065b7afa16247b</anchor>
      <arglist>(RemoveStrategyFlavor flavor=SMALLEST)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToModel</name>
      <anchorfile>classshark_1_1_remove_budget_maintenance_strategy.html</anchorfile>
      <anchor>a795f1710e6f333fcf7c7baad2e7bcc54</anchor>
      <arglist>(ModelType &amp;model, InputType const &amp;alpha, ElementType const &amp;supportVector)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_remove_budget_maintenance_strategy.html</anchorfile>
      <anchor>afc3e2aa3bdd4d56064f4063ba5895f78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_flavor</name>
      <anchorfile>classshark_1_1_remove_budget_maintenance_strategy.html</anchorfile>
      <anchor>ab7a150aeae274478480ba3b58337ba80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ResizeLayer</name>
    <filename>classshark_1_1_resize_layer.html</filename>
    <templarg>class VectorType</templarg>
    <base>shark::AbstractModel</base>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>a83d970b4538adad3aa095e08ca639c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>a0cfbefe78f78e071d3b9db899b3c3f29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ParameterVectorType</type>
      <name>ParameterVectorType</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>a165db648b407275a7a9b2d870757c8ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResizeLayer</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>a05beadeb7f4aec71d513d624b9ca95be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResizeLayer</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>a76c3b0f7b0fbe80c02e43ad1990ce737</anchor>
      <arglist>(Shape const &amp;inputShape, Shape const &amp;outputShape, Interpolation type=Interpolation::Spline)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>aea826ee3fef39378ae5d73850de34850</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>a66576bbb87bfcc6bdb701e7f1cccc5b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>ae43eb5d812fd6d8cfa09404779c90973</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ParameterVectorType</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>aa5ceb0d72cba7461594d9dd2f6642a1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>a9ea41f7fa3024defb23ce0199c4a99f9</anchor>
      <arglist>(ParameterVectorType const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>a6918d49bd4beb58f02ae8c31ce7a6df0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStructure</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>afffd6a3b962c11a7500180f4550ae42d</anchor>
      <arglist>(Shape const &amp;inputShape, Shape const &amp;outputShape, Interpolation type=Interpolation::Spline)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>a997263b15ab2384f4d2b3006caf32211</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>a422e9b8b2a8b3d8c96e88ae413828faa</anchor>
      <arglist>(BatchInputType const &amp;inputs, BatchOutputType &amp;outputs, State &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>aaafcc82e666ef955a86f1ddd4510f81f</anchor>
      <arglist>(BatchInputType const &amp;inputs, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, ParameterVectorType &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedInputDerivative</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>ac7e74232d7382fa6040bb3c3b86a30d9</anchor>
      <arglist>(BatchInputType const &amp;inputs, BatchOutputType const &amp;outputs, BatchOutputType const &amp;coefficients, State const &amp;state, BatchInputType &amp;derivatives) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>a11d506d07029226e1436c78e3ee75df7</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_resize_layer.html</anchorfile>
      <anchor>ad2d44978e71a8e9181d4204bf2b6bdce</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::RadiusMarginQuotient::Result</name>
    <filename>structshark_1_1_radius_margin_quotient_1_1_result.html</filename>
    <member kind="variable">
      <type>RealVector</type>
      <name>alpha</name>
      <anchorfile>structshark_1_1_radius_margin_quotient_1_1_result.html</anchorfile>
      <anchor>a1781bf49428c9d7d4146842f5003309b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>beta</name>
      <anchorfile>structshark_1_1_radius_margin_quotient_1_1_result.html</anchorfile>
      <anchor>a3e738702ef77426ccfd6dfc05fc9716d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>w2</name>
      <anchorfile>structshark_1_1_radius_margin_quotient_1_1_result.html</anchorfile>
      <anchor>a1884ef5965389e108a6d14f9a8bb9348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>R2</name>
      <anchorfile>structshark_1_1_radius_margin_quotient_1_1_result.html</anchorfile>
      <anchor>a652933073158d9486c6208d2151b7a0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::ResultSet</name>
    <filename>structshark_1_1_result_set.html</filename>
    <templarg>class SearchPointT</templarg>
    <templarg>class ResultT</templarg>
    <member kind="typedef">
      <type>SearchPointT</type>
      <name>SearchPointType</name>
      <anchorfile>structshark_1_1_result_set.html</anchorfile>
      <anchor>a98235d340d7642d8a5a3be9da541f742</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ResultT</type>
      <name>ResultType</name>
      <anchorfile>structshark_1_1_result_set.html</anchorfile>
      <anchor>a6643e0c7e17f497f9158a3a4f59753f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResultSet</name>
      <anchorfile>structshark_1_1_result_set.html</anchorfile>
      <anchor>abcbaa0cc10e7ecd9514cedabc09b44b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResultSet</name>
      <anchorfile>structshark_1_1_result_set.html</anchorfile>
      <anchor>a7058c6840542b6b3357a6b282531cb20</anchor>
      <arglist>(ResultType const &amp;value, SearchPointType const &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_result_set.html</anchorfile>
      <anchor>a18325e1e0df9c5e197dafd5148a7db68</anchor>
      <arglist>(Archive &amp;archive, const unsigned int)</arglist>
    </member>
    <member kind="variable">
      <type>SearchPointType</type>
      <name>point</name>
      <anchorfile>structshark_1_1_result_set.html</anchorfile>
      <anchor>a5afb306cbdabb9ddb962eb22dbf79bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ResultType</type>
      <name>value</name>
      <anchorfile>structshark_1_1_result_set.html</anchorfile>
      <anchor>abfb2c7bc8ee3b184bbef15cb250ead50</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>structshark_1_1_result_set.html</anchorfile>
      <anchor>a01d217c4e9ac5a62eb097eeeab97b4fe</anchor>
      <arglist>(ResultSet &amp;set1, ResultSet &amp;set2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::statistics::ResultTable</name>
    <filename>classshark_1_1statistics_1_1_result_table.html</filename>
    <templarg>class Parameter</templarg>
    <member kind="typedef">
      <type>std::map&lt; Parameter, std::vector&lt; RealVector &gt; &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classshark_1_1statistics_1_1_result_table.html</anchorfile>
      <anchor>ad2a8085f0d9504b1954427f3b5d8bd80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResultTable</name>
      <anchorfile>classshark_1_1statistics_1_1_result_table.html</anchorfile>
      <anchor>a55b1f8bc5a3768c332a6812adf52111c</anchor>
      <arglist>(std::size_t numDimensions, std::string const &amp;parameterName=&quot;unnamed&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string const &amp;</type>
      <name>parameterName</name>
      <anchorfile>classshark_1_1statistics_1_1_result_table.html</anchorfile>
      <anchor>acaf72de2fe5ff0bc13c8de25dc49ac3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimensionName</name>
      <anchorfile>classshark_1_1statistics_1_1_result_table.html</anchorfile>
      <anchor>afe19a5e05f777ae0a4d3c1558802be60</anchor>
      <arglist>(std::size_t i, std::string const &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string const &amp;</type>
      <name>dimensionName</name>
      <anchorfile>classshark_1_1statistics_1_1_result_table.html</anchorfile>
      <anchor>aa4164b251cc24d9baa1801904eeeccb9</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numDimensions</name>
      <anchorfile>classshark_1_1statistics_1_1_result_table.html</anchorfile>
      <anchor>ae18bb53680392f0a01529605a7a06e1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classshark_1_1statistics_1_1_result_table.html</anchorfile>
      <anchor>a88f2f11e9a9ecf081473005886014509</anchor>
      <arglist>(Parameter const &amp;parameter, RealVector const &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classshark_1_1statistics_1_1_result_table.html</anchorfile>
      <anchor>a46fb26a36d4ff270f49af3451cb9d471</anchor>
      <arglist>(Parameter const &amp;parameter, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classshark_1_1statistics_1_1_result_table.html</anchorfile>
      <anchor>a783a41e6b13a1ca98ea49abf7e0246cf</anchor>
      <arglist>(Parameter const &amp;parameter, double value1, double value2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classshark_1_1statistics_1_1_result_table.html</anchorfile>
      <anchor>a0545680c8216278789064e4e2ed3f2d7</anchor>
      <arglist>(Parameter const &amp;parameter, double value1, double value2, double value3)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; RealVector &gt; const &amp;</type>
      <name>operator[]</name>
      <anchorfile>classshark_1_1statistics_1_1_result_table.html</anchorfile>
      <anchor>ac223c84eb37e83cfc179082ec43f1d46</anchor>
      <arglist>(Parameter const &amp;param) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classshark_1_1statistics_1_1_result_table.html</anchorfile>
      <anchor>a45c52fe99fcb6389ea30d6541efec2fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classshark_1_1statistics_1_1_result_table.html</anchorfile>
      <anchor>a25e1a3791ce867ca83ff84fa324bbf45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numParams</name>
      <anchorfile>classshark_1_1statistics_1_1_result_table.html</anchorfile>
      <anchor>ab0508e88d83415f0bb8d64f2b9a21dac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Parameter const &amp;</type>
      <name>parameterValue</name>
      <anchorfile>classshark_1_1statistics_1_1_result_table.html</anchorfile>
      <anchor>a3d24ba543fac0fb8f92026d52a17ca63</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classshark_1_1statistics_1_1_result_table.html</anchorfile>
      <anchor>a23f154547b15deff3764577e3d8935da</anchor>
      <arglist>(Archive &amp;ar, const unsigned int file_version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::RFClassifier</name>
    <filename>classshark_1_1_r_f_classifier.html</filename>
    <templarg>class LabelType</templarg>
    <base>Ensemble&lt; CARTree&lt; LabelType &gt; &gt;</base>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_r_f_classifier.html</anchorfile>
      <anchor>a5104a2e299a21cd91d909fe755db1ea1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>OOBerror</name>
      <anchorfile>classshark_1_1_r_f_classifier.html</anchorfile>
      <anchor>acd70da3c9340d47d5d7611e0b35f5d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>featureImportances</name>
      <anchorfile>classshark_1_1_r_f_classifier.html</anchorfile>
      <anchor>ad4e4af4f01321b8836554517ef629c0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UIntVector</type>
      <name>countAttributes</name>
      <anchorfile>classshark_1_1_r_f_classifier.html</anchorfile>
      <anchor>a6cc321d1bcb9c18ba50857d093063730</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeOOBerror</name>
      <anchorfile>classshark_1_1_r_f_classifier.html</anchorfile>
      <anchor>a336a6c2b13f973dd780644319dab4e8a</anchor>
      <arglist>(std::vector&lt; std::vector&lt; std::size_t &gt; &gt; const &amp;oobIndices, LabeledData&lt; RealVector, LabelType &gt; const &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeFeatureImportances</name>
      <anchorfile>classshark_1_1_r_f_classifier.html</anchorfile>
      <anchor>a290cb9386878b0264faf15dae5dc2068</anchor>
      <arglist>(std::vector&lt; std::vector&lt; std::size_t &gt; &gt; const &amp;oobIndices, LabeledData&lt; RealVector, LabelType &gt; const &amp;data, random::rng_type &amp;rng)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::RFTrainer</name>
    <filename>classshark_1_1_r_f_trainer.html</filename>
    <templarg>class LabelType</templarg>
  </compound>
  <compound kind="class">
    <name>shark::RFTrainer&lt; RealVector &gt;</name>
    <filename>classshark_1_1_r_f_trainer_3_01_real_vector_01_4.html</filename>
    <base>AbstractWeightedTrainer&lt; RFClassifier&lt; RealVector &gt; &gt;</base>
    <base>IParameterizable&lt; RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>RFTrainer</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01_real_vector_01_4.html</anchorfile>
      <anchor>aa70d6bf3520d6a5961cdacfa7f540d36</anchor>
      <arglist>(bool computeFeatureImportances=false, bool computeOOBerror=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01_real_vector_01_4.html</anchorfile>
      <anchor>ae1ad33346b1541c85c3d239306acd92b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMTry</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01_real_vector_01_4.html</anchorfile>
      <anchor>a26132d8880d145e1e09e0e5c5b92e53a</anchor>
      <arglist>(std::size_t mtry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNTrees</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01_real_vector_01_4.html</anchorfile>
      <anchor>a47b5618fe873957a5cd17ff5568361a3</anchor>
      <arglist>(std::size_t numTrees)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinSplit</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01_real_vector_01_4.html</anchorfile>
      <anchor>a7973029c913a68140dc5082f8c5b5678</anchor>
      <arglist>(std::size_t numSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDepth</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01_real_vector_01_4.html</anchorfile>
      <anchor>a82e8773ba20dcf97ea659ffc51713ba9</anchor>
      <arglist>(std::size_t maxDepth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeSize</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01_real_vector_01_4.html</anchorfile>
      <anchor>a03743949c6b502d953db82e98280de3e</anchor>
      <arglist>(std::size_t nodeSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minImpurity</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01_real_vector_01_4.html</anchorfile>
      <anchor>a0afd1b5c06d9eeea0f09ce75b1c3a160</anchor>
      <arglist>(double impurity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>epsilon</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01_real_vector_01_4.html</anchorfile>
      <anchor>a15b07750636e93b6caf5ce721226a0c5</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01_real_vector_01_4.html</anchorfile>
      <anchor>a9a0674d771e229c820f0d3dfa24b38a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01_real_vector_01_4.html</anchorfile>
      <anchor>a2172de721b6e63265d67c56076036121</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01_real_vector_01_4.html</anchorfile>
      <anchor>a4975033b328b481f5bbfa2fea88ddcd9</anchor>
      <arglist>(RFClassifier&lt; LabelType &gt; &amp;model, WeightedLabeledData&lt; RealVector, LabelType &gt; const &amp;dataset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::RFTrainer&lt; unsigned int &gt;</name>
    <filename>classshark_1_1_r_f_trainer_3_01unsigned_01int_01_4.html</filename>
    <base>AbstractWeightedTrainer&lt; RFClassifier&lt; unsigned int &gt; &gt;</base>
    <base>IParameterizable&lt; RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>RFTrainer</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a53204a1b23c9d4faa542ce5179162b9f</anchor>
      <arglist>(bool computeFeatureImportances=false, bool computeOOBerror=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a12989f50963a1854f1fbc45c1009a839</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMTry</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>ad3c4d4e9765940e801e123de6fed5aea</anchor>
      <arglist>(std::size_t mtry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNTrees</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>ab5eee35787957f2a60b558ab92ed4797</anchor>
      <arglist>(std::size_t numTrees)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinSplit</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a1fa08ae23d6263bc895a6a52625fe7f9</anchor>
      <arglist>(std::size_t numSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDepth</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a8ac7b0ff4a67b29d8d098d9a737c34c1</anchor>
      <arglist>(std::size_t maxDepth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeSize</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>af0462340f6a69e42aa4f790948762457</anchor>
      <arglist>(std::size_t nodeSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minImpurity</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a650e555b24698db9bdc5d01fc764ddb7</anchor>
      <arglist>(double impurity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>epsilon</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a256c970e32f9064ce73cef2a658d0b87</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>adefc3f79dc834760239e68f7a3ad4f24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>afc8c6b93118f575b2759d72b3dd39d85</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_r_f_trainer_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a4c1081a998508d12064ec653130f1a8f</anchor>
      <arglist>(RFClassifier&lt; LabelType &gt; &amp;model, WeightedLabeledData&lt; RealVector, LabelType &gt; const &amp;dataset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ROC</name>
    <filename>classshark_1_1_r_o_c.html</filename>
    <member kind="function">
      <type></type>
      <name>ROC</name>
      <anchorfile>classshark_1_1_r_o_c.html</anchorfile>
      <anchor>a86d4d7fe5ba1f81b0fd212127d7679cd</anchor>
      <arglist>(AbstractModel&lt; InputType, RealVector &gt; &amp;model, LabeledData&lt; InputType, unsigned int &gt; const &amp;set)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL double</type>
      <name>threshold</name>
      <anchorfile>classshark_1_1_r_o_c.html</anchorfile>
      <anchor>ac88209bb77c813352b590d89a8173b5d</anchor>
      <arglist>(double falseAcceptanceRate) const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL double</type>
      <name>value</name>
      <anchorfile>classshark_1_1_r_o_c.html</anchorfile>
      <anchor>a02c969175f2f4600b9668ab54b4d741a</anchor>
      <arglist>(double falseAcceptanceRate) const</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL double</type>
      <name>equalErrorRate</name>
      <anchorfile>classshark_1_1_r_o_c.html</anchorfile>
      <anchor>ab6ac16568d496fa8875d10b2ff602040</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_scorePositive</name>
      <anchorfile>classshark_1_1_r_o_c.html</anchorfile>
      <anchor>a38c4316af84e776dd793015447c6780b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_scoreNegative</name>
      <anchorfile>classshark_1_1_r_o_c.html</anchorfile>
      <anchor>a3a276775f91a2249b01329458667c635</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::Rosenbrock</name>
    <filename>structshark_1_1benchmarks_1_1_rosenbrock.html</filename>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>Rosenbrock</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rosenbrock.html</anchorfile>
      <anchor>a253269afd1fde83d8015f0d837b2f8a6</anchor>
      <arglist>(std::size_t dimensions=23, double initialSpread=1.0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rosenbrock.html</anchorfile>
      <anchor>a576147204da2e04c0444b0faa40982ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rosenbrock.html</anchorfile>
      <anchor>a012d39517313e0ab2e0d4606b49f82bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rosenbrock.html</anchorfile>
      <anchor>a4a193a486822065af1732a33b1c34460</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rosenbrock.html</anchorfile>
      <anchor>afa34ef2350b0e4499bf512c983b47207</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rosenbrock.html</anchorfile>
      <anchor>ab58f55f1cc973e170f132b1e193fa131</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rosenbrock.html</anchorfile>
      <anchor>a500dc291180aba61510ba674f1fb2f63</anchor>
      <arglist>(const SearchPointType &amp;p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ResultType</type>
      <name>evalDerivative</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rosenbrock.html</anchorfile>
      <anchor>a2fec6001dddb00499e3929d2288b706c</anchor>
      <arglist>(const SearchPointType &amp;p, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ResultType</type>
      <name>evalDerivative</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rosenbrock.html</anchorfile>
      <anchor>af79cef1d212aabe7f927430f20557148</anchor>
      <arglist>(const SearchPointType &amp;p, SecondOrderDerivative &amp;derivative) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::RotatedObjectiveFunction</name>
    <filename>structshark_1_1benchmarks_1_1_rotated_objective_function.html</filename>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>RotatedObjectiveFunction</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rotated_objective_function.html</anchorfile>
      <anchor>abc34880a75d766d9ec8e2cd835ee3a8d</anchor>
      <arglist>(SingleObjectiveFunction *objective)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rotated_objective_function.html</anchorfile>
      <anchor>ae349e44ba5ac6f2f6c2533d2da9fdb03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rotated_objective_function.html</anchorfile>
      <anchor>abfb75d1b0459522b55453876f67de08b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rotated_objective_function.html</anchorfile>
      <anchor>aade55634541439051253553179f9ed49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rotated_objective_function.html</anchorfile>
      <anchor>ac8ebe27e9cc5a2d2d2af386d5107a081</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rotated_objective_function.html</anchorfile>
      <anchor>abf5df22a0f2c0810a6a0b89d5a69cf3e</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rotated_objective_function.html</anchorfile>
      <anchor>ac45c8de9fc95df81191d2bf766193abb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rotated_objective_function.html</anchorfile>
      <anchor>a831217fb74e7d6245ae90aa34a1ef8de</anchor>
      <arglist>(SearchPointType const &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>evalDerivative</name>
      <anchorfile>structshark_1_1benchmarks_1_1_rotated_objective_function.html</anchorfile>
      <anchor>a7454a4af99d7620038fd3970649ba561</anchor>
      <arglist>(SearchPointType const &amp;p, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::RouletteWheelSelection</name>
    <filename>structshark_1_1_roulette_wheel_selection.html</filename>
    <member kind="function">
      <type>Iterator</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_roulette_wheel_selection.html</anchorfile>
      <anchor>a4549b968b1d3f518727abc573f91f162</anchor>
      <arglist>(Rng &amp;rng, Iterator it, Iterator itE, RealVector const &amp;probabilities) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::QpSparseArray::Row</name>
    <filename>structshark_1_1_qp_sparse_array_1_1_row.html</filename>
    <member kind="variable">
      <type>Entry *</type>
      <name>entry</name>
      <anchorfile>structshark_1_1_qp_sparse_array_1_1_row.html</anchorfile>
      <anchor>ab8ece4fb5a874f87b81ae1c8fb25bdc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>structshark_1_1_qp_sparse_array_1_1_row.html</anchorfile>
      <anchor>a0bb9aa2d856471d12442566d93781211</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QpFloatType</type>
      <name>defaultvalue</name>
      <anchorfile>structshark_1_1_qp_sparse_array_1_1_row.html</anchorfile>
      <anchor>a26a98ced15022c5c9249beb503184667</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Rprop</name>
    <filename>classshark_1_1_rprop.html</filename>
    <templarg>class SearchPointType</templarg>
    <base>shark::AbstractSingleObjectiveOptimizer</base>
    <member kind="typedef">
      <type>AbstractObjectiveFunction&lt; SearchPointType, double &gt;</type>
      <name>ObjectiveFunctionType</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>ae68ade4b0906576bad469acb71cd679e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rprop</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>a390d96027842e4f13ff3a1a32853951b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>ae04b0f8744beddb91f16038954ee34cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>aa5283be5eb772fcdad29af346c98b498</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction, SearchPointType const &amp;startingPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>a015c8b2cbc204bd39b2ef89500679625</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction, SearchPointType const &amp;startingPoint, double initDelta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>a9173edb5b7a84bcd46b62a46445754a6</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>ac754e595049b6dbbc114ac9c0f54ce0b</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>aa3eeff5854571f527c46558397f4e23b</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEtaMinus</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>a73397b4ec932c2fff8cde203f05e75df</anchor>
      <arglist>(double etaMinus)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEtaPlus</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>af14caea0cc918c17a285ab4ec1ed37df</anchor>
      <arglist>(double etaPlus)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDelta</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>aaa0ed6fd2ea27d56ef0cb203b1ef21d2</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinDelta</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>aa6efebd4d0dd0203239434574e6fbd70</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseOldValue</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>af828e4f52722599bda4f244599699d68</anchor>
      <arglist>(bool useOldValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseFreezing</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>adf4586f45e4dfdab3dc01ed08e96e076</anchor>
      <arglist>(bool useFreezing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseBacktracking</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>a560914675f5b0cfbc089f5afb2143780</anchor>
      <arglist>(bool useBacktracking)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxDelta</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>a7ca10945bb7ef8a73f53512ff25a77a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType const &amp;</type>
      <name>derivative</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>a4758301af0b01ee2d2025d66f3bc0885</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SearchPointType</type>
      <name>m_derivative</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>a678dae5fcefbec650622cf4700ef8e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_increaseFactor</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>acfea7fd8e09c841959fedf30c05e89e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_decreaseFactor</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>a8e529c7460eee4b633db970572450ac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_maxDelta</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>aeb42fc2e0045b5fe4ef3583c9ab879d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_minDelta</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>a4f24ed0314c79c6cf94d0436f3b220c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_oldValue</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>ae0aa5e8b04e94f5c47dc2f282a8cfe31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_parameterSize</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>a00c8b33da2ef3ac08a9fa0f3c66bdeb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SearchPointType</type>
      <name>m_oldDerivative</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>a5aaadcfbb66e181642e5458031fab3d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SearchPointType</type>
      <name>m_deltaw</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>a97c2b98a403a2dcfa4b57140e85d0b74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SearchPointType</type>
      <name>m_delta</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>affadb8b3614b3b8ff1c5a94a4e3878b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_useFreezing</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>af99be2b46efa0f35e4e9ce63aa046c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_useBacktracking</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>a21e63bfe6371ae23ada9529230a0b473</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_useOldValue</name>
      <anchorfile>classshark_1_1_rprop.html</anchorfile>
      <anchor>a013068bdc4b644904c14f0b732173af3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::RVEA</name>
    <filename>classshark_1_1_r_v_e_a.html</filename>
    <base>AbstractMultiObjectiveOptimizer&lt; RealVector &gt;</base>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL</type>
      <name>RVEA</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>aea4a153e99eb52eb6e946d5b1da4e275</anchor>
      <arglist>(random::rng_type &amp;rng=random::globalRng)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>a570e039a9773303f3cdc304079391b9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>crossoverProbability</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>a24e4f06d4e80c60c5d5c808aca9441c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>crossoverProbability</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>ad1fe73b971a02a75b1e0e1b69122840e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nm</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>a42f756cb121540d3e27477024f7b45d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>nm</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>ab49d472bdceb49c60152a7c6f5d03997</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nc</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>a12f8457c3d88a53c10d7963a2c821e5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>nc</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>aee88e78568e6910fa173c7544139c3e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>a8c6b046bd8c02578d5d6e07510997806</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>alpha</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>a43bf95140c67223db83e817836dbeeaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>adaptationFrequency</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>af69164a51c9b14e1bd54c811f0f48134</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>adaptationFrequency</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>ae71f7617631fda1e9ba305a82773057c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>mu</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>ae55c14d099207526073282c311362554</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numInitPoints</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>aa89e84602ca691bf124a6fcaaf9869f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>approxMu</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>af00048a74be3db8fb273ba0cfb01de6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>approxMu</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>aa31d0522f1f071bf46c936e674ac973a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix</type>
      <name>referenceVectors</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>ac8650000c2627c4324370f222ee454eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix &amp;</type>
      <name>referenceVectors</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>ab4a73eef984968711dd3509275a407fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix</type>
      <name>initialReferenceVectors</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>ac1a96c7b2280d8e8be432b9bc45edab5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxIterations</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>a7c15e038ac3d45a47426859f9e0c5f40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>maxIterations</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>af984012d53a8f9eeba518375d4fc9b24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>willAdaptReferenceVectors</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>aaa84d48241b320888745cfc4eb5ed668</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>aa2a3484f54c7c2d46331bd19c3f8c53e</anchor>
      <arglist>(Archive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>a7f3c0738f3f6ef3501ea9554ab5829cf</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, std::vector&lt; SearchPointType &gt; const &amp;initialSearchPoints)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>ad62e938861ebc6b6e0749775e67c8b54</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SHARK_EXPORT_SYMBOL std::size_t</type>
      <name>suggestMu</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>af24f818da10910dabfbbb1028df31bbb</anchor>
      <arglist>(std::size_t n, std::size_t const approx_mu)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>shark::Individual&lt; RealVector, RealVector &gt;</type>
      <name>IndividualType</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>a8bb1e998e00dd942159e31a2a9381198</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>doInit</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>a4630d1d33af282abfd60b6a8e14b839e</anchor>
      <arglist>(std::vector&lt; SearchPointType &gt; const &amp;initialSearchPoints, std::vector&lt; ResultType &gt; const &amp;functionValues, RealVector const &amp;lowerBounds, RealVector const &amp;upperBounds, std::size_t const approx_mu, double const nm, double const nc, double const crossover_prob, double const alph, double const fr, std::size_t const max_iterations, std::vector&lt; Preference &gt; const &amp;referenceVectorsPreferences=std::vector&lt; Preference &gt;())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SHARK_EXPORT_SYMBOL std::vector&lt; IndividualType &gt;</type>
      <name>generateOffspring</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>a31e0f61704214e7183f04d824b21ddf1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>updatePopulation</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>a422bdd1e5027703a8b672b3044076c55</anchor>
      <arglist>(std::vector&lt; IndividualType &gt; const &amp;offspringvec)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IndividualType &gt;</type>
      <name>m_parents</name>
      <anchorfile>classshark_1_1_r_v_e_a.html</anchorfile>
      <anchor>add1ca1a478b3054ee37237d65dbf0933</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ScaledKernel</name>
    <filename>classshark_1_1_scaled_kernel.html</filename>
    <templarg>class InputType</templarg>
    <base>shark::AbstractKernelFunction</base>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>ade088748ce9c72aadd6218534d0b918f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstInputReference</type>
      <name>ConstInputReference</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>ab85abce78b37836e18d288c605b01cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstBatchInputReference</type>
      <name>ConstBatchInputReference</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>af44d5bf984a272c173913941b1c3b819</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScaledKernel</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>a8d5c8bd1b104f323b14c6f8178fe00b1</anchor>
      <arglist>(AbstractKernelFunction&lt; InputType &gt; *base, double factor=1.0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>a6a15e6434ad5c78ebc492c369e67a6ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>a62e229f1458a7a82f9739bedd4e5009c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>a4d0ac39729f3db9c00f87bc61ef7b3f1</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>a836fc009bdd0f6a83b184f73b503308d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>a8ea7e45b7d287c3e15968937c5076d17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const double</type>
      <name>factor</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>ab039d0f8d3e1e40d61d0897f1c4953a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFactor</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>ac490cef71bad929273de841755455d87</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>const base_type *</type>
      <name>base</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>ac5c3092e58aaf96feefbe3e51822e78a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>afc59d0d0d69706360cfd5b30bbd10a0e</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>a7f53eaf21702a5378fa499d50f7aaf12</anchor>
      <arglist>(ConstBatchInputReference x1, ConstBatchInputReference x2, RealMatrix &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>a2cbbeef99432522d721f48e9aa62ba8e</anchor>
      <arglist>(ConstBatchInputReference x1, ConstBatchInputReference x2, RealMatrix &amp;result, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>aa0f2ea06b6721fdb90cc6324e1254e91</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficients, State const &amp;state, RealVector &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedInputDerivative</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>a27d1b92e9651b938feb3f61938f0d92f</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficientsX2, State const &amp;state, BatchInputType &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>a7f6e20a47ab00f460f22ade7bb4d9d47</anchor>
      <arglist>(InArchive &amp;ar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>a41ae2a868b1e1c64f8eaac6bc0e8453a</anchor>
      <arglist>(OutArchive &amp;ar) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AbstractKernelFunction&lt; InputType &gt; *</type>
      <name>m_base</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>a04fa2a023b7166f2a0dc4daeb5ef25c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_factor</name>
      <anchorfile>classshark_1_1_scaled_kernel.html</anchorfile>
      <anchor>a77aec6f4404eece47eeb3898ab66c6c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::Schwefel</name>
    <filename>structshark_1_1benchmarks_1_1_schwefel.html</filename>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>Schwefel</name>
      <anchorfile>structshark_1_1benchmarks_1_1_schwefel.html</anchorfile>
      <anchor>ad9d6f14884a23d51c02feea6c69af263</anchor>
      <arglist>(std::size_t numberOfVariables=5)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_schwefel.html</anchorfile>
      <anchor>a41f4c49e2c880e69d8ecf856150afef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_schwefel.html</anchorfile>
      <anchor>a0dc42548c3f2dea70acbeb31dc4faab9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_schwefel.html</anchorfile>
      <anchor>aef8f3bb2ba46b99cdc0cb2cafc46e6b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_schwefel.html</anchorfile>
      <anchor>ad37c5048dd055c79cdfae395d73d7656</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>structshark_1_1benchmarks_1_1_schwefel.html</anchorfile>
      <anchor>aad3a4189844043269e946af7c43a3a18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_schwefel.html</anchorfile>
      <anchor>a2f10c07aec460b9bc5dac68380df8d27</anchor>
      <arglist>(const SearchPointType &amp;p) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::AbstractObjectiveFunction::SecondOrderDerivative</name>
    <filename>structshark_1_1_abstract_objective_function_1_1_second_order_derivative.html</filename>
    <member kind="variable">
      <type>FirstOrderDerivative</type>
      <name>gradient</name>
      <anchorfile>structshark_1_1_abstract_objective_function_1_1_second_order_derivative.html</anchorfile>
      <anchor>a525f2019dbf953b847ad45cf2adf7aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealMatrix</type>
      <name>hessian</name>
      <anchorfile>structshark_1_1_abstract_objective_function_1_1_second_order_derivative.html</anchorfile>
      <anchor>a2f0998489fda1b495c3310d0aacd2c50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Shape</name>
    <filename>classshark_1_1_shape.html</filename>
    <member kind="function">
      <type></type>
      <name>Shape</name>
      <anchorfile>classshark_1_1_shape.html</anchorfile>
      <anchor>a08a3ef9a73686fab368d457696ded55e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Shape</name>
      <anchorfile>classshark_1_1_shape.html</anchorfile>
      <anchor>a9c65100ceb2eabd3fc2bff01449d662d</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Shape</name>
      <anchorfile>classshark_1_1_shape.html</anchorfile>
      <anchor>a693a0967abfe86b5ebe69b5ffb554ed9</anchor>
      <arglist>(std::initializer_list&lt; std::size_t &gt; dims)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classshark_1_1_shape.html</anchorfile>
      <anchor>ac9c42cc38131c57eac4cc0a5ecf8ca4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator[]</name>
      <anchorfile>classshark_1_1_shape.html</anchorfile>
      <anchor>a4acfa4c44dd55f4e3ed0b155674d7325</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numElements</name>
      <anchorfile>classshark_1_1_shape.html</anchorfile>
      <anchor>ad36fc62c674b01150cc5addab9dcc38d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>flatten</name>
      <anchorfile>classshark_1_1_shape.html</anchorfile>
      <anchor>ad2583b9d040d9b3bb076be4a58976de5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>stride</name>
      <anchorfile>classshark_1_1_shape.html</anchorfile>
      <anchor>af22f21df156b245f02d5729701282b75</anchor>
      <arglist>(std::size_t dim) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classshark_1_1_shape.html</anchorfile>
      <anchor>a54cd223c48635388a82288a7bfb37a9c</anchor>
      <arglist>(Archive &amp;archive, unsigned int version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Shark</name>
    <filename>classshark_1_1_shark.html</filename>
    <class kind="struct">shark::Shark::Version</class>
    <member kind="function" static="yes">
      <type>static BuildType</type>
      <name>buildType</name>
      <anchorfile>classshark_1_1_shark.html</anchorfile>
      <anchor>a468b025010bb4cbced92b7362f916d3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasOpenMp</name>
      <anchorfile>classshark_1_1_shark.html</anchorfile>
      <anchor>a8942bfd1e10759b90f7d7efc9a884625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isDynamicLibrary</name>
      <anchorfile>classshark_1_1_shark.html</anchorfile>
      <anchor>a2ca0b2788d4f82f18b5bece96508c068</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isOfficialRelease</name>
      <anchorfile>classshark_1_1_shark.html</anchorfile>
      <anchor>ab9f662426dc2bf5ede89bb5fc2c8dc46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>info</name>
      <anchorfile>classshark_1_1_shark.html</anchorfile>
      <anchor>a620b111e1c1a195fa9f4f24c885fdc00</anchor>
      <arglist>(Stream &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Shark</name>
      <anchorfile>classshark_1_1_shark.html</anchorfile>
      <anchor>a6fdaded1b30405d032656495bf28ad3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Shark</name>
      <anchorfile>classshark_1_1_shark.html</anchorfile>
      <anchor>a6f8920723fe5cc9956c6f184178dddca</anchor>
      <arglist>(const Shark &amp;shark)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Shark &amp;</type>
      <name>operator=</name>
      <anchorfile>classshark_1_1_shark.html</anchorfile>
      <anchor>a6f03a2c641c67f83775d255d1e3b02d3</anchor>
      <arglist>(const Shark &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Shifter</name>
    <filename>classshark_1_1_shifter.html</filename>
    <member kind="function">
      <type></type>
      <name>Shifter</name>
      <anchorfile>classshark_1_1_shifter.html</anchorfile>
      <anchor>ac21cf17a7ec41054823beaac148ad979</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData&lt; RealVector &gt;</type>
      <name>data</name>
      <anchorfile>classshark_1_1_shifter.html</anchorfile>
      <anchor>aaf08cd5054280e317072ebaf846ff81e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>inputDimension</name>
      <anchorfile>classshark_1_1_shifter.html</anchorfile>
      <anchor>a6b4e0397cefc7876e48a5cb4ce3d2e6e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SimpleNearestNeighbors</name>
    <filename>classshark_1_1_simple_nearest_neighbors.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class LabelType</templarg>
    <base>shark::AbstractNearestNeighbors</base>
    <member kind="typedef">
      <type>LabeledData&lt; InputType, LabelType &gt;</type>
      <name>Dataset</name>
      <anchorfile>classshark_1_1_simple_nearest_neighbors.html</anchorfile>
      <anchor>a34c2838b82d29e9f725bef18d3540514</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractMetric&lt; InputType &gt;</type>
      <name>Metric</name>
      <anchorfile>classshark_1_1_simple_nearest_neighbors.html</anchorfile>
      <anchor>ac39c0a94032d08b667e3cb692f514fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::DistancePair</type>
      <name>DistancePair</name>
      <anchorfile>classshark_1_1_simple_nearest_neighbors.html</anchorfile>
      <anchor>ae85bcee60ffdda60be8830e682785b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; InputType &gt;::type</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_simple_nearest_neighbors.html</anchorfile>
      <anchor>ad878c943fb9776f495b796d718e3a099</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleNearestNeighbors</name>
      <anchorfile>classshark_1_1_simple_nearest_neighbors.html</anchorfile>
      <anchor>ac5425f13309ffab8422d344accddd3fa</anchor>
      <arglist>(Dataset const &amp;dataset, Metric const *metric)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; DistancePair &gt;</type>
      <name>getNeighbors</name>
      <anchorfile>classshark_1_1_simple_nearest_neighbors.html</anchorfile>
      <anchor>a389a29728ce4a6d7e50e2b94d449eb87</anchor>
      <arglist>(BatchInputType const &amp;patterns, std::size_t k) const</arglist>
    </member>
    <member kind="function">
      <type>LabeledData&lt; InputType, LabelType &gt; const &amp;</type>
      <name>dataset</name>
      <anchorfile>classshark_1_1_simple_nearest_neighbors.html</anchorfile>
      <anchor>a87bb8ea903edac0d8a5ad560be47f47d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SimplexDownhill</name>
    <filename>classshark_1_1_simplex_downhill.html</filename>
    <base>AbstractSingleObjectiveOptimizer&lt; RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>SimplexDownhill</name>
      <anchorfile>classshark_1_1_simplex_downhill.html</anchorfile>
      <anchor>ae373497a152c2ced0c402cc6b8ddcc26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_simplex_downhill.html</anchorfile>
      <anchor>ad37f7025e5e94221a1c7fd50528eb095</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_simplex_downhill.html</anchorfile>
      <anchor>ae4c829c04db9534c9c44e3f893a512b5</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_simplex_downhill.html</anchorfile>
      <anchor>a5d9266eb4c29db81c104eab71c7890e7</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_simplex_downhill.html</anchorfile>
      <anchor>a5362ffe8e7c5d448f2b4072cd0e62ab6</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction, SearchPointType const &amp;startingPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_simplex_downhill.html</anchorfile>
      <anchor>ab1218ff639987ce11281cf4565aaa051</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; SolutionType &gt; const &amp;</type>
      <name>simplex</name>
      <anchorfile>classshark_1_1_simplex_downhill.html</anchorfile>
      <anchor>aac01e044e8c2b9c80122574751db7322</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SolutionType &gt;</type>
      <name>m_simplex</name>
      <anchorfile>classshark_1_1_simplex_downhill.html</anchorfile>
      <anchor>a095bc7f1c01178c4d751a11a86659fce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::SimulatedBinaryCrossover</name>
    <filename>structshark_1_1_simulated_binary_crossover.html</filename>
    <templarg>typename PointType</templarg>
    <member kind="function">
      <type></type>
      <name>SimulatedBinaryCrossover</name>
      <anchorfile>structshark_1_1_simulated_binary_crossover.html</anchorfile>
      <anchor>a0074ea3a7575786ae8bfdc440fe9b1c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structshark_1_1_simulated_binary_crossover.html</anchorfile>
      <anchor>aa868f6ac83e29e113e4fd4a6628998d9</anchor>
      <arglist>(RealVector const &amp;lower, RealVector const &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_simulated_binary_crossover.html</anchorfile>
      <anchor>a23c71848225890e90268af5696dce7c1</anchor>
      <arglist>(randomType &amp;rng, IndividualType &amp;i1, IndividualType &amp;i2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_simulated_binary_crossover.html</anchorfile>
      <anchor>adabf150b6e3069c5bbe68c37933b110b</anchor>
      <arglist>(Archive &amp;archive, const unsigned int version)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_nc</name>
      <anchorfile>structshark_1_1_simulated_binary_crossover.html</anchorfile>
      <anchor>a9527780aa1750e443053a5d982ae7f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_prob</name>
      <anchorfile>structshark_1_1_simulated_binary_crossover.html</anchorfile>
      <anchor>af05eeb6ee1273f45620843a6cb040c35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>m_upper</name>
      <anchorfile>structshark_1_1_simulated_binary_crossover.html</anchorfile>
      <anchor>a550046585e0d867cc63bbbd6cb2bd437</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealVector</type>
      <name>m_lower</name>
      <anchorfile>structshark_1_1_simulated_binary_crossover.html</anchorfile>
      <anchor>a27a74dfc06d371b4087f3972e35ae91a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SingleChainApproximator</name>
    <filename>classshark_1_1_single_chain_approximator.html</filename>
    <templarg>class MarkovChainType</templarg>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="typedef">
      <type>MarkovChainType::RBM</type>
      <name>RBM</name>
      <anchorfile>classshark_1_1_single_chain_approximator.html</anchorfile>
      <anchor>af212889ee84951451d6166be19f0fb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingleChainApproximator</name>
      <anchorfile>classshark_1_1_single_chain_approximator.html</anchorfile>
      <anchor>ae9205b048b7d52e6196c97e43e683ecf</anchor>
      <arglist>(RBM *rbm)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_single_chain_approximator.html</anchorfile>
      <anchor>a903b03c0f62d229c3586dcfcb628f793</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setK</name>
      <anchorfile>classshark_1_1_single_chain_approximator.html</anchorfile>
      <anchor>a7544401c94210a0b111ce91192d62e35</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfSamples</name>
      <anchorfile>classshark_1_1_single_chain_approximator.html</anchorfile>
      <anchor>a5191876b06e803f1c6ea7accd397b6a9</anchor>
      <arglist>(std::size_t samples)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numBatches</name>
      <anchorfile>classshark_1_1_single_chain_approximator.html</anchorfile>
      <anchor>af7f41180f8480a2da3cc1dd5879fba80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>numBatches</name>
      <anchorfile>classshark_1_1_single_chain_approximator.html</anchorfile>
      <anchor>a76b9ad81e6b6d71b37dc4b4c968f1ca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MarkovChainType &amp;</type>
      <name>chain</name>
      <anchorfile>classshark_1_1_single_chain_approximator.html</anchorfile>
      <anchor>a62326355cc08502f382293d242e14e65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MarkovChainType const &amp;</type>
      <name>chain</name>
      <anchorfile>classshark_1_1_single_chain_approximator.html</anchorfile>
      <anchor>a07da57d4fabea09a3fba5551e400a95c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>classshark_1_1_single_chain_approximator.html</anchorfile>
      <anchor>aa73a32da08c8e47d9db9b7afbb68d7b3</anchor>
      <arglist>(UnlabeledData&lt; RealVector &gt; const &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>classshark_1_1_single_chain_approximator.html</anchorfile>
      <anchor>aa02497017d33d8929b7a8a21f7baf6b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_single_chain_approximator.html</anchorfile>
      <anchor>a42c7938b0bb7fd94dcf5d440b81ae1c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRegularizer</name>
      <anchorfile>classshark_1_1_single_chain_approximator.html</anchorfile>
      <anchor>a8df6ef4fa106093f126c54dc3041bd16</anchor>
      <arglist>(double factor, SingleObjectiveFunction *regularizer)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_single_chain_approximator.html</anchorfile>
      <anchor>ae8a55add4de41e9c37141e14eda96fee</anchor>
      <arglist>(SearchPointType const &amp;parameter, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::SingleObjectiveResultSet</name>
    <filename>structshark_1_1_single_objective_result_set.html</filename>
    <templarg>class SearchPointTypeT</templarg>
    <base>ResultSet&lt; SearchPointTypeT, double &gt;</base>
    <member kind="typedef">
      <type>SearchPointTypeT</type>
      <name>SearchPointType</name>
      <anchorfile>structshark_1_1_single_objective_result_set.html</anchorfile>
      <anchor>a9f9776536d60085bea0a185d15dbdb96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>ResultType</name>
      <anchorfile>structshark_1_1_single_objective_result_set.html</anchorfile>
      <anchor>a2724afa837b424895c634d11ca899bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingleObjectiveResultSet</name>
      <anchorfile>structshark_1_1_single_objective_result_set.html</anchorfile>
      <anchor>a02b2f1988c379dd17310d41a2e7f065f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingleObjectiveResultSet</name>
      <anchorfile>structshark_1_1_single_objective_result_set.html</anchorfile>
      <anchor>af212314ac66d695bf596b47d537a48c3</anchor>
      <arglist>(double value, SearchPointType const &amp;point)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structshark_1_1_single_objective_result_set.html</anchorfile>
      <anchor>af8c7bd7c2b4d91a01b3f23c3e0b8d8e4</anchor>
      <arglist>(SingleObjectiveResultSet const &amp;op1, SingleObjectiveResultSet const &amp;op2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SinglePole</name>
    <filename>classshark_1_1_single_pole.html</filename>
    <member kind="function">
      <type>unsigned</type>
      <name>noVars</name>
      <anchorfile>classshark_1_1_single_pole.html</anchorfile>
      <anchor>a5dddaf6857e49b1b9fb0f627d3a6ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SinglePole</name>
      <anchorfile>classshark_1_1_single_pole.html</anchorfile>
      <anchor>a7928ff59632dbc23a4b46a7d532b701e</anchor>
      <arglist>(bool markovian, bool normalize=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initDegree</name>
      <anchorfile>classshark_1_1_single_pole.html</anchorfile>
      <anchor>a126636632b5572c99dbdc98194c59132</anchor>
      <arglist>(double state2init)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_single_pole.html</anchorfile>
      <anchor>a4f3d9a11b06df99676eed8478ec1f757</anchor>
      <arglist>(double state2init=0.07)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_single_pole.html</anchorfile>
      <anchor>a10915d80c83ebb6bc866454c1b99350d</anchor>
      <arglist>(double a, double b, double c, double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getState</name>
      <anchorfile>classshark_1_1_single_pole.html</anchorfile>
      <anchor>a84352b3865ca9ee359f2a2c2422d58d1</anchor>
      <arglist>(RealVector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>failure</name>
      <anchorfile>classshark_1_1_single_pole.html</anchorfile>
      <anchor>a1a9ee1aca5514ed133abd001934dd892</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classshark_1_1_single_pole.html</anchorfile>
      <anchor>a454e9979968b1b6a4c667cde379d1e1f</anchor>
      <arglist>(double output)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>degrad</name>
      <anchorfile>classshark_1_1_single_pole.html</anchorfile>
      <anchor>a9f9f67ccd4513296a47a2b1acfbc3c33</anchor>
      <arglist>(double x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SMSEMOA</name>
    <filename>classshark_1_1_s_m_s_e_m_o_a.html</filename>
    <base>AbstractMultiObjectiveOptimizer&lt; RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>SMSEMOA</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>aa6096dca040f1baaba3fd313c5b3ddf6</anchor>
      <arglist>(random::rng_type &amp;rng=random::globalRng)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>a640d6d8ab81e423b0adca134dc8fd73a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>crossoverProbability</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>a3e3aa4a746555fd8305b86140b32701a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nm</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>ad34a29e72cdc9b81f1daea9e72b7e377</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nc</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>ad5ee8c74bdcfd17dc581c37e2a3f3686</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>mu</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>a0fd9a5e6ba1b1d0d54ab9ec49dbb49df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int &amp;</type>
      <name>mu</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>af3860aac7283214c94a7a3aeda41d57f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numInitPoints</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>a5c170f3b1acd7ade3f2ab73b2e5928e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HypervolumeIndicator &amp;</type>
      <name>indicator</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>af7280dcb62a1e9b554f84516ebf6dbc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HypervolumeIndicator const &amp;</type>
      <name>indicator</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>a810bc33237cd97aa9dc0b067af297940</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>a1dc7fa02907634dc5d2a7d01f99cc431</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>ae17de769f47872348814bdff64ba1f9d</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>ac3c42fb3fa621d61e42c0d8cfa3de003</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, std::vector&lt; SearchPointType &gt; const &amp;initialSearchPoints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>abb385622c65f299e476a8cb5207a0ae5</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>shark::Individual&lt; RealVector, RealVector &gt;</type>
      <name>IndividualType</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>a4aa64963d8c067f26d3ea4f3ff14cb8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doInit</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>a3f58af17cf4d59cd57d8dc81e9cf9946</anchor>
      <arglist>(std::vector&lt; SearchPointType &gt; const &amp;initialSearchPoints, std::vector&lt; ResultType &gt; const &amp;functionValues, RealVector const &amp;lowerBounds, RealVector const &amp;upperBounds, std::size_t mu, double nm, double nc, double crossover_prob)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; IndividualType &gt;</type>
      <name>generateOffspring</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>a1cd1cd9d45bcc0e48819dd712c7adae8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePopulation</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>a2dd8a11f1dc08103ecc639c749a0aa45</anchor>
      <arglist>(std::vector&lt; IndividualType &gt; const &amp;offspring)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IndividualType &gt;</type>
      <name>m_parents</name>
      <anchorfile>classshark_1_1_s_m_s_e_m_o_a.html</anchorfile>
      <anchor>a5f725247526a1f383241546c2c13d048</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SoftClusteringModel</name>
    <filename>classshark_1_1_soft_clustering_model.html</filename>
    <templarg>class InputT</templarg>
    <base>ClusteringModel&lt; InputT, RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>SoftClusteringModel</name>
      <anchorfile>classshark_1_1_soft_clustering_model.html</anchorfile>
      <anchor>affdb2f86777b7ea99eab8d4b46b5bc5c</anchor>
      <arglist>(ClusteringType *clustering)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_soft_clustering_model.html</anchorfile>
      <anchor>a47a2a9d36ae1ac3d2b762c057a02fd29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_soft_clustering_model.html</anchorfile>
      <anchor>aec891941d34d604d57e42d4c47e86bdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>outputShape</name>
      <anchorfile>classshark_1_1_soft_clustering_model.html</anchorfile>
      <anchor>a5e8c47e53870f7bf4734478980e65667</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_soft_clustering_model.html</anchorfile>
      <anchor>a33826adb32937312fb6a25216d6d4df0</anchor>
      <arglist>(InputType const &amp;pattern, OutputType &amp;output) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_soft_clustering_model.html</anchorfile>
      <anchor>a347c88b0017a3c70725a3339061e1fac</anchor>
      <arglist>(BatchInputType const &amp;patterns, BatchOutputType &amp;outputs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::SoftmaxNeuron</name>
    <filename>structshark_1_1_softmax_neuron.html</filename>
    <templarg>class VectorType</templarg>
    <member kind="typedef">
      <type>EmptyState</type>
      <name>State</name>
      <anchorfile>structshark_1_1_softmax_neuron.html</anchorfile>
      <anchor>af038bf1643d03969d2d452a9d9b179d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalInPlace</name>
      <anchorfile>structshark_1_1_softmax_neuron.html</anchorfile>
      <anchor>a5aa448d520b5f546fe0a73bf19155dbd</anchor>
      <arglist>(blas::vector_expression&lt; Arg, Device &gt; &amp;arg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalInPlace</name>
      <anchorfile>structshark_1_1_softmax_neuron.html</anchorfile>
      <anchor>af88a83052e09f807908a741dcfebc594</anchor>
      <arglist>(blas::matrix_expression&lt; Arg, Device &gt; &amp;arg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalInPlace</name>
      <anchorfile>structshark_1_1_softmax_neuron.html</anchorfile>
      <anchor>a2108ad138b296d05e270343ef296096c</anchor>
      <arglist>(blas::matrix_expression&lt; Arg, Device &gt; &amp;arg, State &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyDerivative</name>
      <anchorfile>structshark_1_1_softmax_neuron.html</anchorfile>
      <anchor>a8c3076e3fe3b18da00cfcd29e0e0cf79</anchor>
      <arglist>(Output const &amp;output, Derivative &amp;der, State const &amp;s) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::Sphere</name>
    <filename>structshark_1_1benchmarks_1_1_sphere.html</filename>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>Sphere</name>
      <anchorfile>structshark_1_1benchmarks_1_1_sphere.html</anchorfile>
      <anchor>a4ce48d4e6d13d66215c3015a06456e0e</anchor>
      <arglist>(std::size_t numberOfVariables=5)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_sphere.html</anchorfile>
      <anchor>adcabf9b493ca6da2b55bd1cb3b4eedb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_sphere.html</anchorfile>
      <anchor>aec0e9aa514e01b0c505ab7a0c336ef40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_sphere.html</anchorfile>
      <anchor>aaedcacc617ca05362724d91b72d80ec5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_sphere.html</anchorfile>
      <anchor>ae0769a63a040ae2a53a3c16a3e3f4027</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>structshark_1_1benchmarks_1_1_sphere.html</anchorfile>
      <anchor>abf22976a98b7e31e9f97945c2c7550c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_sphere.html</anchorfile>
      <anchor>aa728229e1271c45834f6d08b6cc24a69</anchor>
      <arglist>(SearchPointType const &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>structshark_1_1benchmarks_1_1_sphere.html</anchorfile>
      <anchor>a226c6e4e20b50e028829fa4898947b7c</anchor>
      <arglist>(SearchPointType const &amp;x, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SquaredEpsilonHingeLoss</name>
    <filename>classshark_1_1_squared_epsilon_hinge_loss.html</filename>
    <base>AbstractLoss&lt; RealVector, RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>SquaredEpsilonHingeLoss</name>
      <anchorfile>classshark_1_1_squared_epsilon_hinge_loss.html</anchorfile>
      <anchor>a200a234a76a69808e9ed2fe42355737a</anchor>
      <arglist>(double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_squared_epsilon_hinge_loss.html</anchorfile>
      <anchor>a487e5694453ff461bd10fb415ff3f236</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_squared_epsilon_hinge_loss.html</anchorfile>
      <anchor>a798597a7b89c708b0f5b271444841a9c</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_squared_epsilon_hinge_loss.html</anchorfile>
      <anchor>ab087f58c1d1c61a18897be4af91a8206</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions, BatchOutputType &amp;gradient) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SquaredHingeCSvmTrainer</name>
    <filename>classshark_1_1_squared_hinge_c_svm_trainer.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class CacheType</templarg>
    <base>AbstractSvmTrainer&lt; InputType, unsigned int &gt;</base>
    <member kind="typedef">
      <type>CacheType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_squared_hinge_c_svm_trainer.html</anchorfile>
      <anchor>affbfafc782f6b2e49bf755b51ce36711</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RegularizedKernelMatrix&lt; InputType, QpFloatType &gt;</type>
      <name>KernelMatrixType</name>
      <anchorfile>classshark_1_1_squared_hinge_c_svm_trainer.html</anchorfile>
      <anchor>a0a8c323de0c8ba22a762902be6628305</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CachedMatrix&lt; KernelMatrixType &gt;</type>
      <name>CachedMatrixType</name>
      <anchorfile>classshark_1_1_squared_hinge_c_svm_trainer.html</anchorfile>
      <anchor>aaa0072f82e11ef975525ce5dff730d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PrecomputedMatrix&lt; KernelMatrixType &gt;</type>
      <name>PrecomputedMatrixType</name>
      <anchorfile>classshark_1_1_squared_hinge_c_svm_trainer.html</anchorfile>
      <anchor>a9fe861ad7ccd5a4f2d89732f010c26c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractModel&lt; InputType, RealVector &gt;</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_squared_hinge_c_svm_trainer.html</anchorfile>
      <anchor>ad69153c70a470b6e40b73e746c578fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_squared_hinge_c_svm_trainer.html</anchorfile>
      <anchor>a9de0c374813d406e795c3612f16f7148</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SquaredHingeCSvmTrainer</name>
      <anchorfile>classshark_1_1_squared_hinge_c_svm_trainer.html</anchorfile>
      <anchor>a9448aa8e5bffd616d9a5ba2955b432ed</anchor>
      <arglist>(KernelType *kernel, double C, bool unconstrained=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SquaredHingeCSvmTrainer</name>
      <anchorfile>classshark_1_1_squared_hinge_c_svm_trainer.html</anchorfile>
      <anchor>aa4a1b4bcb8ddcd53de1928109d29e39a</anchor>
      <arglist>(KernelType *kernel, double negativeC, double positiveC, bool unconstrained=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_squared_hinge_c_svm_trainer.html</anchorfile>
      <anchor>a71ab3305c3272052460e3e163cd0c6e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_squared_hinge_c_svm_trainer.html</anchorfile>
      <anchor>a039491eb212c684d4585db0132545a85</anchor>
      <arglist>(KernelClassifier&lt; InputType &gt; &amp;svm, LabeledData&lt; InputType, unsigned int &gt; const &amp;dataset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SquaredHingeLinearCSvmTrainer</name>
    <filename>classshark_1_1_squared_hinge_linear_c_svm_trainer.html</filename>
    <templarg>class InputType</templarg>
    <base>shark::AbstractLinearSvmTrainer</base>
    <member kind="function">
      <type></type>
      <name>SquaredHingeLinearCSvmTrainer</name>
      <anchorfile>classshark_1_1_squared_hinge_linear_c_svm_trainer.html</anchorfile>
      <anchor>a2bfdfe17a77da644c389211a1129efff</anchor>
      <arglist>(double C, bool unconstrained=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_squared_hinge_linear_c_svm_trainer.html</anchorfile>
      <anchor>a5bb2c885adf7369a791ac721e0b2bab0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classshark_1_1_squared_hinge_linear_c_svm_trainer.html</anchorfile>
      <anchor>a9c7df5c98dee200e4214abac74ad3bab</anchor>
      <arglist>(LinearClassifier&lt; InputType &gt; &amp;model, LabeledData&lt; InputType, unsigned int &gt; const &amp;dataset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SquaredHingeLoss</name>
    <filename>classshark_1_1_squared_hinge_loss.html</filename>
    <base>AbstractLoss&lt; unsigned int, RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>SquaredHingeLoss</name>
      <anchorfile>classshark_1_1_squared_hinge_loss.html</anchorfile>
      <anchor>a9881ffee48a0cb96c693af16c21b7c92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_squared_hinge_loss.html</anchorfile>
      <anchor>adca6579fa31cdf05f372241168f225b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_squared_hinge_loss.html</anchorfile>
      <anchor>a65618ed172bb6452953fa8f113975881</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_squared_hinge_loss.html</anchorfile>
      <anchor>afb08d1f581fb2d539c2d98e2138ce916</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions, BatchOutputType &amp;gradient) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SquaredLoss</name>
    <filename>classshark_1_1_squared_loss.html</filename>
    <templarg>class OutputType</templarg>
    <templarg>class LabelType</templarg>
    <base>shark::AbstractLoss</base>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_squared_loss.html</anchorfile>
      <anchor>ad38b488ba8cd4842e9423bf4d632f6ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchLabelType</type>
      <name>BatchLabelType</name>
      <anchorfile>classshark_1_1_squared_loss.html</anchorfile>
      <anchor>ad4f8ad15cf428d7ed9e128f501a10964</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SquaredLoss</name>
      <anchorfile>classshark_1_1_squared_loss.html</anchorfile>
      <anchor>a3ff7bf885f6de94578fbc4b835a7c514</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_squared_loss.html</anchorfile>
      <anchor>a5ac187e301fe104bab8ff1129198b441</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_squared_loss.html</anchorfile>
      <anchor>a008effb959fd46a659caea8c651529f6</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_squared_loss.html</anchorfile>
      <anchor>a5b0f3b5bc5125e81aa93dd9900863567</anchor>
      <arglist>(BatchLabelType const &amp;label, BatchOutputType const &amp;prediction, BatchOutputType &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>virtual double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_squared_loss.html</anchorfile>
      <anchor>add4a2b4308ff290a10552824fdb33550</anchor>
      <arglist>(BatchLabelType const &amp;target, BatchOutputType const &amp;prediction) const=0</arglist>
    </member>
    <member kind="function">
      <type>virtual double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_squared_loss.html</anchorfile>
      <anchor>a26f69483e0f62462bbc45e2734f65a4b</anchor>
      <arglist>(ConstLabelReference target, ConstOutputReference prediction) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_squared_loss.html</anchorfile>
      <anchor>a0d53dd678d58b2cb3a213cdc829937da</anchor>
      <arglist>(Data&lt; LabelType &gt; const &amp;targets, Data&lt; OutputType &gt; const &amp;predictions) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SquaredLoss&lt; OutputType, unsigned int &gt;</name>
    <filename>classshark_1_1_squared_loss_3_01_output_type_00_01unsigned_01int_01_4.html</filename>
    <templarg>class OutputType</templarg>
    <base>AbstractLoss&lt; unsigned int, OutputType &gt;</base>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_squared_loss_3_01_output_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>ab92e8fb56e9a07ceb63e82a73f13e72b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchLabelType</type>
      <name>BatchLabelType</name>
      <anchorfile>classshark_1_1_squared_loss_3_01_output_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>aa0b3345ab9e670e41a9018746a333e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SquaredLoss</name>
      <anchorfile>classshark_1_1_squared_loss_3_01_output_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>accc4fbbfc67fdd4cb367dab783772d2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_squared_loss_3_01_output_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a0910c05148c8f6d42d8f61370c63f76d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_squared_loss_3_01_output_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>abe143c0109604bf20b41a7740c0b6b8e</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_squared_loss_3_01_output_type_00_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a6fe44728c4f9e28a4362c7c3374b1451</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions, BatchOutputType &amp;gradient) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SquaredLoss&lt; Sequence, Sequence &gt;</name>
    <filename>classshark_1_1_squared_loss_3_01_sequence_00_01_sequence_01_4.html</filename>
    <base>AbstractLoss&lt; Sequence, Sequence &gt;</base>
    <member kind="function">
      <type></type>
      <name>SquaredLoss</name>
      <anchorfile>classshark_1_1_squared_loss_3_01_sequence_00_01_sequence_01_4.html</anchorfile>
      <anchor>a8f743edb4396725b93164612b16e73ac</anchor>
      <arglist>(std::size_t ignore=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_squared_loss_3_01_sequence_00_01_sequence_01_4.html</anchorfile>
      <anchor>a8fe3f3f55e5274d416f48d2cfa1978f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_squared_loss_3_01_sequence_00_01_sequence_01_4.html</anchorfile>
      <anchor>a29691a1939b6513d200fdb8d3fe4f13a</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_squared_loss_3_01_sequence_00_01_sequence_01_4.html</anchorfile>
      <anchor>ac81ef3e0d96e4d1321235e8f843bf363</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions, BatchOutputType &amp;gradient) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::NormalizerNeuron::State</name>
    <filename>structshark_1_1_normalizer_neuron_1_1_state.html</filename>
    <base>shark::State</base>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>structshark_1_1_normalizer_neuron_1_1_state.html</anchorfile>
      <anchor>a7f6662070f8f4d6392645eb81388e9ac</anchor>
      <arglist>(std::size_t patterns)</arglist>
    </member>
    <member kind="variable">
      <type>VectorType</type>
      <name>norm</name>
      <anchorfile>structshark_1_1_normalizer_neuron_1_1_state.html</anchorfile>
      <anchor>ae4dbe59df763bbf1b1bbe41910a707bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::State</name>
    <filename>structshark_1_1_state.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~State</name>
      <anchorfile>structshark_1_1_state.html</anchorfile>
      <anchor>a1214a001a7ebd5b22142a2cd1b58441f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedStateType const &amp;</type>
      <name>toState</name>
      <anchorfile>structshark_1_1_state.html</anchorfile>
      <anchor>a9847e65e063245c6b02371c8b84f8da3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DerivedStateType &amp;</type>
      <name>toState</name>
      <anchorfile>structshark_1_1_state.html</anchorfile>
      <anchor>ad6dd9bbeffc1942ae528cce76dbc8cc6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::statistics::Statistics</name>
    <filename>structshark_1_1statistics_1_1_statistics.html</filename>
    <templarg>class Parameter</templarg>
    <member kind="typedef">
      <type>std::map&lt; Parameter, std::map&lt; std::string, RealVector &gt; &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>structshark_1_1statistics_1_1_statistics.html</anchorfile>
      <anchor>ae6ad9c1c3206b8a4d6cb23e10c3a46b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Statistics</name>
      <anchorfile>structshark_1_1statistics_1_1_statistics.html</anchorfile>
      <anchor>ae35c8f063ca93f3c9d28cad6c02e7d24</anchor>
      <arglist>(ResultTable&lt; Parameter &gt; const *table)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStatistic</name>
      <anchorfile>structshark_1_1statistics_1_1_statistics.html</anchorfile>
      <anchor>ab958ce0475386d433f26998225c7c4c8</anchor>
      <arglist>(std::string const &amp;statisticName, BaseStatisticsObject const &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStatistic</name>
      <anchorfile>structshark_1_1statistics_1_1_statistics.html</anchorfile>
      <anchor>a620146b789a93c5ec656012d415fbb22</anchor>
      <arglist>(BaseStatisticsObject const &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, RealVector &gt; const &amp;</type>
      <name>operator[]</name>
      <anchorfile>structshark_1_1statistics_1_1_statistics.html</anchorfile>
      <anchor>a2c0d24ac828f87438af9637a5142a161</anchor>
      <arglist>(Parameter const &amp;parameter) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structshark_1_1statistics_1_1_statistics.html</anchorfile>
      <anchor>aa6adcdd673621c217d95aa93c0f61dac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structshark_1_1statistics_1_1_statistics.html</anchorfile>
      <anchor>afd31ad8b93c0bd7b061a21459eec9b61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string const &amp;</type>
      <name>parameterName</name>
      <anchorfile>structshark_1_1statistics_1_1_statistics.html</anchorfile>
      <anchor>aa5790b0a3c024406f404fe42274b177e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numParams</name>
      <anchorfile>structshark_1_1statistics_1_1_statistics.html</anchorfile>
      <anchor>a3f73b88b6b7891e986dc3f48b233833b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Parameter const &amp;</type>
      <name>parameterValue</name>
      <anchorfile>structshark_1_1statistics_1_1_statistics.html</anchorfile>
      <anchor>a3f693c6f2d0e7781206e8c4b6faf5a30</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numDimensions</name>
      <anchorfile>structshark_1_1statistics_1_1_statistics.html</anchorfile>
      <anchor>a1e09f59ff6a8506ad715db1e3a97c562</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string const &amp;</type>
      <name>dimensionName</name>
      <anchorfile>structshark_1_1statistics_1_1_statistics.html</anchorfile>
      <anchor>abb1ca8f721bab341a459771dfedf12b0</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numStatistics</name>
      <anchorfile>structshark_1_1statistics_1_1_statistics.html</anchorfile>
      <anchor>a7625604459272f7feceb7711c18632d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string const &amp;</type>
      <name>statisticName</name>
      <anchorfile>structshark_1_1statistics_1_1_statistics.html</anchorfile>
      <anchor>a2a43e43d4788db0bc6b4d294b12ed655</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SteepestDescent</name>
    <filename>classshark_1_1_steepest_descent.html</filename>
    <templarg>class SearchPointType</templarg>
    <base>shark::AbstractSingleObjectiveOptimizer</base>
    <member kind="typedef">
      <type>AbstractObjectiveFunction&lt; SearchPointType, double &gt;</type>
      <name>ObjectiveFunctionType</name>
      <anchorfile>classshark_1_1_steepest_descent.html</anchorfile>
      <anchor>a501e27e3b011c497bf497f4b30f0d8f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SteepestDescent</name>
      <anchorfile>classshark_1_1_steepest_descent.html</anchorfile>
      <anchor>a97c32efccb3ecdb3e9b4296428d4c020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_steepest_descent.html</anchorfile>
      <anchor>aab19ca67c867bf74af2c42610f420705</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_steepest_descent.html</anchorfile>
      <anchor>ad8a11c43e286716c78eddcaad85e2c35</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction, SearchPointType const &amp;startingPoint)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>learningRate</name>
      <anchorfile>classshark_1_1_steepest_descent.html</anchorfile>
      <anchor>aba0edaf42d57bfb853f814e362415ae5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLearningRate</name>
      <anchorfile>classshark_1_1_steepest_descent.html</anchorfile>
      <anchor>a68b3feecb0210689c16f1b471e60a9da</anchor>
      <arglist>(double learningRate)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>momentum</name>
      <anchorfile>classshark_1_1_steepest_descent.html</anchorfile>
      <anchor>a12f98f7bfca8fdc699223acc0764658b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMomentum</name>
      <anchorfile>classshark_1_1_steepest_descent.html</anchorfile>
      <anchor>aea92742aa25e250dfa2674edb522212b</anchor>
      <arglist>(double momentum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_steepest_descent.html</anchorfile>
      <anchor>a481c680541979d1827c1b386203ee4e2</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_steepest_descent.html</anchorfile>
      <anchor>aedba477b932e74a2228e40403ca72664</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_steepest_descent.html</anchorfile>
      <anchor>a3a829170c0a8e14fba555d3eb30b7f96</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SubrangeKernel</name>
    <filename>classshark_1_1_subrange_kernel.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class InnerKernel</templarg>
    <base>shark::WeightedSumKernel</base>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_subrange_kernel.html</anchorfile>
      <anchor>ad3d16c38f2af5e5cb43bcf716bea225b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubrangeKernel</name>
      <anchorfile>classshark_1_1_subrange_kernel.html</anchorfile>
      <anchor>af74f43289f60c804b43e0c87305b8991</anchor>
      <arglist>(Kernels const &amp;kernels, Ranges const &amp;ranges)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SvmLogisticInterpretation</name>
    <filename>classshark_1_1_svm_logistic_interpretation.html</filename>
    <templarg>class InputType</templarg>
    <base>AbstractObjectiveFunction&lt; RealVector, double &gt;</base>
    <member kind="typedef">
      <type>CVFolds&lt; LabeledData&lt; InputType, unsigned int &gt; &gt;</type>
      <name>FoldsType</name>
      <anchorfile>classshark_1_1_svm_logistic_interpretation.html</anchorfile>
      <anchor>aacebd95928685e014eafb5fb6efe20b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractKernelFunction&lt; InputType &gt;</type>
      <name>KernelType</name>
      <anchorfile>classshark_1_1_svm_logistic_interpretation.html</anchorfile>
      <anchor>a27b2b67af5e5b9d2de969f43320cbca4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SvmLogisticInterpretation</name>
      <anchorfile>classshark_1_1_svm_logistic_interpretation.html</anchorfile>
      <anchor>acd0536c312b58338f044a8d655d8739a</anchor>
      <arglist>(FoldsType const &amp;folds, KernelType *kernel, bool unconstrained=true, QpStoppingCondition *stop_cond=NULL)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_svm_logistic_interpretation.html</anchorfile>
      <anchor>a609bdc62676220fa7b1e27366db2e0fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classshark_1_1_svm_logistic_interpretation.html</anchorfile>
      <anchor>a9a2421271fa2504061af8532340529c6</anchor>
      <arglist>(const SearchPointType &amp;input) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_svm_logistic_interpretation.html</anchorfile>
      <anchor>ae710c2360a5059c8f872757bdcb4c631</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_svm_logistic_interpretation.html</anchorfile>
      <anchor>a67444886b71f0bef297aaa3d396e6b81</anchor>
      <arglist>(SearchPointType const &amp;parameters) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_svm_logistic_interpretation.html</anchorfile>
      <anchor>aaf23373024f5c16cb6de60ee2c4fc2c8</anchor>
      <arglist>(SearchPointType const &amp;parameters, FirstOrderDerivative &amp;derivative) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FoldsType</type>
      <name>m_folds</name>
      <anchorfile>classshark_1_1_svm_logistic_interpretation.html</anchorfile>
      <anchor>a0d205e3f7137f8535c650637b4f6f46b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KernelType *</type>
      <name>mep_kernel</name>
      <anchorfile>classshark_1_1_svm_logistic_interpretation.html</anchorfile>
      <anchor>ae6a2b133a65cdb723b3a5fe4b71b961b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_nhp</name>
      <anchorfile>classshark_1_1_svm_logistic_interpretation.html</anchorfile>
      <anchor>a02e5bdf24c4bfeca6f92fd38a4270ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_nkp</name>
      <anchorfile>classshark_1_1_svm_logistic_interpretation.html</anchorfile>
      <anchor>a1c61672212c6e54cb1178dd5bc859c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_numFolds</name>
      <anchorfile>classshark_1_1_svm_logistic_interpretation.html</anchorfile>
      <anchor>a9a17b63f0101e55aa0e3249cfc253f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_numSamples</name>
      <anchorfile>classshark_1_1_svm_logistic_interpretation.html</anchorfile>
      <anchor>a370c5373314e75218c5802779378ac22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_inputDims</name>
      <anchorfile>classshark_1_1_svm_logistic_interpretation.html</anchorfile>
      <anchor>a03027cc334469ae03a79f47fe428012a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_svmCIsUnconstrained</name>
      <anchorfile>classshark_1_1_svm_logistic_interpretation.html</anchorfile>
      <anchor>a7c5a5bb5f1a377b3133a9598e6e18af6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QpStoppingCondition *</type>
      <name>mep_svmStoppingCondition</name>
      <anchorfile>classshark_1_1_svm_logistic_interpretation.html</anchorfile>
      <anchor>a19565575b801e17ebdf3597bc49bd526</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SvmProblem</name>
    <filename>classshark_1_1_svm_problem.html</filename>
    <templarg>class Problem</templarg>
    <member kind="typedef">
      <type>Problem::QpFloatType</type>
      <name>QpFloatType</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>a36f9963fc67abd79168cc9bcbaf98b6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Problem::MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>a4e039c8a44164e2f96137119779ef344</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LibSVMSelectionCriterion</type>
      <name>PreferedSelectionStrategy</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>acef7c20b210e81a62d01e9eadd61dc49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SvmProblem</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>ad10f8907862c01b1fc4ec5cd0ff06823</anchor>
      <arglist>(Problem &amp;problem)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>dimensions</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>a42f4bb52a5e7c0415519da0ecf060edf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>active</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>a1e36b705c5de7db9cc1a9882753d8102</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>boxMin</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>aeb63064bffd6c4f4ff157a45535bb142</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>boxMax</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>afc78269e1b3b3f0372018eb3172db25e</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerBound</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>a39babf310726215d71ef6e29235342c9</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperBound</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>ab02d8e8ba4ed8d48ba32fed34c6a1247</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType &amp;</type>
      <name>quadratic</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>ac12ebec3daaab85111af6dd0561e993e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>linear</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>afe5c70e6047a13481b3f3dbfbd3b7b4e</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>a97a8afab15ad38ec1fb321317f9454a1</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>diagonal</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>aa8f67d9116f73ddd35faf9f16d13e39f</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gradient</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>ae638f4ac4dba40b797e5f6cfd2244c77</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>permutation</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>aac1b3e0a3248593ed5b917940ea8625f</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>getUnpermutedAlpha</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>acb8152953435a41f851793490341d4c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateSMO</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>a31367cdd5b8129925a6c0e70515b4e0d</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>functionValue</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>aff44e8756f1ce22489ff00bdb25cb95d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shrink</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>aa98f2e4bcbd2311dd36f1c28ade75bd2</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reshrink</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>a073a4ac3cd7dddbd840fe8b38ca2b399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unshrink</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>ad1472ef03326d4e0d8a98f4a3d7e159a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialSolution</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>aa19eecb264f01e1e3f8aa07640004d7b</anchor>
      <arglist>(RealVector const &amp;alpha, RealVector const &amp;gradient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialSolution</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>a21e030b9a4e898dd8ca16f555cad4447</anchor>
      <arglist>(RealVector const &amp;alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deactivateVariable</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>a218c29273fd1258c287357a1b0493918</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activateVariable</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>a0c80f38017ca75c1b2a6bc3654e0b627</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipCoordinates</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>a2906035d35c845bde74e931a3b7b57d0</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleBoxConstraints</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>a0390d19fab99eb4c47afd40ce22deb81</anchor>
      <arglist>(double factor, double variableScalingFactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinear</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>a9b1278df58fcf906b5395793f5bf1b33</anchor>
      <arglist>(std::size_t i, double newValue)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>checkKKT</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>a33eaf27af1bb982dcd7f965fcfbce884</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>applyStep</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>aca60a43765c528fb1e2e5a5acb495de8</anchor>
      <arglist>(std::size_t i, std::size_t j, double step)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateAlphaStatus</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>ade0b5d8577fdb5fde149f542babc1369</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>testShrinkVariable</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>abb9d0ed983afddf9bcc3b856c8b04b02</anchor>
      <arglist>(std::size_t a, double largestUp, double smallestDown) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Problem</type>
      <name>m_problem</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>adb2ad6ad0ad2571b0985f767347223d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>m_gradient</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>abe3da8520eacc5b4c5c5f1b051ad726c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_active</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>a53377e65ea2637c37acb3f7523a837fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; char &gt;</type>
      <name>m_alphaStatus</name>
      <anchorfile>classshark_1_1_svm_problem.html</anchorfile>
      <anchor>a37d6169989efa917c76435eb50167a7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::SvmShrinkingProblem</name>
    <filename>classshark_1_1_svm_shrinking_problem.html</filename>
    <templarg>class Problem</templarg>
    <base>BoxBasedShrinkingStrategy&lt; SvmProblem&lt; Problem &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>SvmShrinkingProblem</name>
      <anchorfile>classshark_1_1_svm_shrinking_problem.html</anchorfile>
      <anchor>a520bb3904668c9c62b43aad128ada107</anchor>
      <arglist>(Problem &amp;problem, bool shrink=true)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::TanhNeuron</name>
    <filename>structshark_1_1_tanh_neuron.html</filename>
    <member kind="typedef">
      <type>EmptyState</type>
      <name>State</name>
      <anchorfile>structshark_1_1_tanh_neuron.html</anchorfile>
      <anchor>acc12c52782340838b649e718de0c3507</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalInPlace</name>
      <anchorfile>structshark_1_1_tanh_neuron.html</anchorfile>
      <anchor>a9107cae5619ca79f8fac8a2370b07f81</anchor>
      <arglist>(Arg &amp;arg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalInPlace</name>
      <anchorfile>structshark_1_1_tanh_neuron.html</anchorfile>
      <anchor>a017e84210491223766b0498e4bae5028</anchor>
      <arglist>(Arg &amp;arg, State &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyDerivative</name>
      <anchorfile>structshark_1_1_tanh_neuron.html</anchorfile>
      <anchor>a89a6085add59e60b91b2ece71e8831d9</anchor>
      <arglist>(Output const &amp;output, Derivative &amp;der, State const &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::WeightedSumKernel::tBase</name>
    <filename>structshark_1_1_weighted_sum_kernel_1_1t_base.html</filename>
    <member kind="variable">
      <type>AbstractKernelFunction&lt; InputType &gt; *</type>
      <name>kernel</name>
      <anchorfile>structshark_1_1_weighted_sum_kernel_1_1t_base.html</anchorfile>
      <anchor>a98d3de94e66213b695c95be5f80f3468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>weight</name>
      <anchorfile>structshark_1_1_weighted_sum_kernel_1_1t_base.html</anchorfile>
      <anchor>a97d62b38ae459d7cc1eca3533de0cea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>adaptive</name>
      <anchorfile>structshark_1_1_weighted_sum_kernel_1_1t_base.html</anchorfile>
      <anchor>ad3110b2d0681b54e7e053ff8fc20f67d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::TemperedMarkovChain</name>
    <filename>classshark_1_1_tempered_markov_chain.html</filename>
    <templarg>class Operator</templarg>
    <member kind="typedef">
      <type>Operator::RBM</type>
      <name>RBM</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>ac3f138b5f03d858ed5c034bb0016db1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; detail::MarkovChainSample&lt; HiddenSample, VisibleSample &gt; &gt;::type</type>
      <name>SampleBatch</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>af3c35158845cdeba9085921999345885</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SampleBatch::reference</type>
      <name>reference</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>af1d86eb103bbb09c1f58684757baae85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SampleBatch::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>a1935b29858910d6209635b4cea577ba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TemperedMarkovChain</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>ae2697b357a9b0a540b10fc5437caf910</anchor>
      <arglist>(RBM *rbm)</arglist>
    </member>
    <member kind="function">
      <type>const Operator &amp;</type>
      <name>transitionOperator</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>a26911979f0d57257974d9fc19e2ce5fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Operator &amp;</type>
      <name>transitionOperator</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>ae140fdb61b9b11611f0b811b569d89b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfTemperatures</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>aecba5353377bf74ef5f5171c943809dc</anchor>
      <arglist>(std::size_t temperatures)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniformTemperatureSpacing</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>ad30ceacbe721d4d53e1b34a9021b602c</anchor>
      <arglist>(std::size_t temperatures)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfTemperatures</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>aecd5dbebaff6502d13430266dda8cec6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBatchSize</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>a29b2f335f3f2b0359057568556844f4a</anchor>
      <arglist>(std::size_t batchSize)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>batchSize</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>a98e24129ec94644d01b644006bcdae91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeta</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>af20c825470283873aa35ca48fb831069</anchor>
      <arglist>(std::size_t i, double beta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>affbe3936aa5f1429657be37e260abce7</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>beta</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>adc27aa66e4f7ade66c78359d67444f89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>sample</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>ae9c9fbdf0f08ef6a805be89c0d891fbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SampleBatch const &amp;</type>
      <name>samples</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>a38ea16dcdd1a7f8182ff95fba7b34554</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SampleBatch &amp;</type>
      <name>samples</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>ae2911be27beec8750ea90a636c6fe942</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeChain</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>a09bdfb62397058b4f8ef2cff44e55654</anchor>
      <arglist>(Data&lt; RealVector &gt; const &amp;dataSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeChain</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>ae06b0d3939662fb60f496f866aa1aa9b</anchor>
      <arglist>(RealMatrix const &amp;sampleData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>af553df4a635f56eac428e064df65ccea</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>computesBatch</name>
      <anchorfile>classshark_1_1_tempered_markov_chain.html</anchorfile>
      <anchor>a8063892e54bc3439a2a81a0af8ae016a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Timer</name>
    <filename>classshark_1_1_timer.html</filename>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>classshark_1_1_timer.html</anchorfile>
      <anchor>a58e306564b232e85ad13d49b59ce42c5</anchor>
      <arglist>(bool measureWallclockTime=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classshark_1_1_timer.html</anchorfile>
      <anchor>a4d88aa872b2f0eb752c01c506cc24555</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stop</name>
      <anchorfile>classshark_1_1_timer.html</anchorfile>
      <anchor>ad3ccd47c0429d28d9600117b5ed57362</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lastLap</name>
      <anchorfile>classshark_1_1_timer.html</anchorfile>
      <anchor>a91e2a527ffbe3eabc7c8cf36ff742318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>now</name>
      <anchorfile>classshark_1_1_timer.html</anchorfile>
      <anchor>a4a3f88c6b69f2ed99176ee4c28057c6b</anchor>
      <arglist>(bool measureWallclockTime=true)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::TournamentSelection</name>
    <filename>structshark_1_1_tournament_selection.html</filename>
    <templarg>class Predicate</templarg>
    <member kind="function">
      <type></type>
      <name>TournamentSelection</name>
      <anchorfile>structshark_1_1_tournament_selection.html</anchorfile>
      <anchor>a51ab39ce52c60251c12e676f99556e71</anchor>
      <arglist>(std::size_t size=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_tournament_selection.html</anchorfile>
      <anchor>aa0755b1e4480e842876287ffd2930084</anchor>
      <arglist>(random::rng_type &amp;rng, IteratorType1 inIt, IteratorType1 inItE, IteratorType2 outIt, IteratorType2 outItE)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_tournament_selection.html</anchorfile>
      <anchor>a1cf91ebaa1dd8dd644e6d58b7dc865eb</anchor>
      <arglist>(random::rng_type &amp;rng, Iterator it, Iterator itE) const</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>tournamentSize</name>
      <anchorfile>structshark_1_1_tournament_selection.html</anchorfile>
      <anchor>a0ced5ff10ee3b9a969e6f015181d5f12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::serialization::tracking_level&lt; shark::TypedFlags&lt; T &gt; &gt;</name>
    <filename>structboost_1_1serialization_1_1tracking__level_3_01shark_1_1_typed_flags_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>mpl::integral_c_tag</type>
      <name>tag</name>
      <anchorfile>structboost_1_1serialization_1_1tracking__level_3_01shark_1_1_typed_flags_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>ad363b07d427d2d82c8566877b96c585c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_CONSTANT</name>
      <anchorfile>structboost_1_1serialization_1_1tracking__level_3_01shark_1_1_typed_flags_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a1c7330570427386ec3c3ed5bcc5490a9</anchor>
      <arglist>(int, value=track_always)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::serialization::tracking_level&lt; std::vector&lt; T &gt; &gt;</name>
    <filename>structboost_1_1serialization_1_1tracking__level_3_01std_1_1vector_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>mpl::integral_c_tag</type>
      <name>tag</name>
      <anchorfile>structboost_1_1serialization_1_1tracking__level_3_01std_1_1vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>ad280b44c08dafd0f280ab7b0b87bf6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_CONSTANT</name>
      <anchorfile>structboost_1_1serialization_1_1tracking__level_3_01std_1_1vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a11bb9f9d1029c8ef233c618863b71281</anchor>
      <arglist>(int, value=track_always)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::TrainingError</name>
    <filename>classshark_1_1_training_error.html</filename>
    <templarg>class PointType</templarg>
    <base>shark::AbstractStoppingCriterion</base>
    <member kind="function">
      <type></type>
      <name>TrainingError</name>
      <anchorfile>classshark_1_1_training_error.html</anchorfile>
      <anchor>a4abe5741e99fa123c17d0fdda45f6b89</anchor>
      <arglist>(size_t intervalSize, double minDifference)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stop</name>
      <anchorfile>classshark_1_1_training_error.html</anchorfile>
      <anchor>a37b74d5cff8620d934e90623766f7a7a</anchor>
      <arglist>(const SingleObjectiveResultSet&lt; PointType &gt; &amp;set)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classshark_1_1_training_error.html</anchorfile>
      <anchor>a72f7fae3c19205d88603b085c83a2acb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::queue&lt; double &gt;</type>
      <name>m_interval</name>
      <anchorfile>classshark_1_1_training_error.html</anchorfile>
      <anchor>a2feb063411ad806f6cc25a54afec832d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_minDifference</name>
      <anchorfile>classshark_1_1_training_error.html</anchorfile>
      <anchor>aeea2acf9ef31d1883c54cc6c9036c144</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_intervalSize</name>
      <anchorfile>classshark_1_1_training_error.html</anchorfile>
      <anchor>a66fc104b694c058f3a7e3ba7d9decc30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::TrainingProgress</name>
    <filename>classshark_1_1_training_progress.html</filename>
    <templarg>class PointType</templarg>
    <base>shark::AbstractStoppingCriterion</base>
    <member kind="typedef">
      <type>SingleObjectiveResultSet&lt; PointType &gt;</type>
      <name>ResultSet</name>
      <anchorfile>classshark_1_1_training_progress.html</anchorfile>
      <anchor>a313c1aa65f6489d735fce017d01cfc94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrainingProgress</name>
      <anchorfile>classshark_1_1_training_progress.html</anchorfile>
      <anchor>a519e14c11c239f4aae0a1d0cf82b792f</anchor>
      <arglist>(size_t intervalSize, double minImprovement)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stop</name>
      <anchorfile>classshark_1_1_training_progress.html</anchorfile>
      <anchor>af320c01d4e54853e8fd3e891488bfba4</anchor>
      <arglist>(const ResultSet &amp;set)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classshark_1_1_training_progress.html</anchorfile>
      <anchor>a6244cca3d61f3d5ce1dee922ed9415ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>classshark_1_1_training_progress.html</anchorfile>
      <anchor>aff4a12440a29b6dc3f9ace7b11642a7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_minTraining</name>
      <anchorfile>classshark_1_1_training_progress.html</anchorfile>
      <anchor>aab3746ac8b741a666ad8c1eb5bb115e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_minImprovement</name>
      <anchorfile>classshark_1_1_training_progress.html</anchorfile>
      <anchor>ae3ac4627d5824dd0f29d551fdc3857c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_meanPerformance</name>
      <anchorfile>classshark_1_1_training_progress.html</anchorfile>
      <anchor>a7a77079e0170e3ebb94ee452e8c96bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_progress</name>
      <anchorfile>classshark_1_1_training_progress.html</anchorfile>
      <anchor>ac49c25a85c635d8930a4b4216f787a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::queue&lt; double &gt;</type>
      <name>m_interval</name>
      <anchorfile>classshark_1_1_training_progress.html</anchorfile>
      <anchor>a28ee365a24266f795f928be8e9352ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_intervalSize</name>
      <anchorfile>classshark_1_1_training_progress.html</anchorfile>
      <anchor>a932d896b5b2d8b2689caef279c710b2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::TransformedData</name>
    <filename>structshark_1_1_transformed_data.html</filename>
    <templarg>class Functor</templarg>
    <templarg>class T</templarg>
  </compound>
  <compound kind="class">
    <name>shark::TreeConstruction</name>
    <filename>classshark_1_1_tree_construction.html</filename>
    <member kind="function">
      <type></type>
      <name>TreeConstruction</name>
      <anchorfile>classshark_1_1_tree_construction.html</anchorfile>
      <anchor>a59a1339479147eec5ea8c780a4cf6ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeConstruction</name>
      <anchorfile>classshark_1_1_tree_construction.html</anchorfile>
      <anchor>ab58da7392a7140a4a51302ab34815172</anchor>
      <arglist>(TreeConstruction const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeConstruction</name>
      <anchorfile>classshark_1_1_tree_construction.html</anchorfile>
      <anchor>adbbd4f3b18ceca7fa693f166a3066daf</anchor>
      <arglist>(unsigned int maxDepth, unsigned int maxBucketSize)</arglist>
    </member>
    <member kind="function">
      <type>TreeConstruction</type>
      <name>nextDepthLevel</name>
      <anchorfile>classshark_1_1_tree_construction.html</anchorfile>
      <anchor>aa76f09fabb33889421b6c8f2771afb8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>maxDepth</name>
      <anchorfile>classshark_1_1_tree_construction.html</anchorfile>
      <anchor>abb2b42865b60ddf110e4915ab6457373</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>maxBucketSize</name>
      <anchorfile>classshark_1_1_tree_construction.html</anchorfile>
      <anchor>aa1b255097aa1e7101783b1300b921aad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_maxDepth</name>
      <anchorfile>classshark_1_1_tree_construction.html</anchorfile>
      <anchor>a4631c3ae5ba78df8b954963e4be22e45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_maxBucketSize</name>
      <anchorfile>classshark_1_1_tree_construction.html</anchorfile>
      <anchor>a46b8dd6388568e3e101435c8cdf0efd4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::TreeNearestNeighbors</name>
    <filename>classshark_1_1_tree_nearest_neighbors.html</filename>
    <templarg>class InputType</templarg>
    <templarg>class LabelType</templarg>
    <base>shark::AbstractNearestNeighbors</base>
    <member kind="typedef">
      <type>LabeledData&lt; InputType, LabelType &gt;</type>
      <name>Dataset</name>
      <anchorfile>classshark_1_1_tree_nearest_neighbors.html</anchorfile>
      <anchor>a81535a6dc1129bf3b9c5db033706ee7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinaryTree&lt; InputType &gt;</type>
      <name>Tree</name>
      <anchorfile>classshark_1_1_tree_nearest_neighbors.html</anchorfile>
      <anchor>a963f6592ded4228aa2a34366b4b5bf15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::DistancePair</type>
      <name>DistancePair</name>
      <anchorfile>classshark_1_1_tree_nearest_neighbors.html</anchorfile>
      <anchor>ad884ac010262866e0fbc13878d7fc0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; InputType &gt;::type</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_tree_nearest_neighbors.html</anchorfile>
      <anchor>a00707a24f04878d9c64546366e3cccea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeNearestNeighbors</name>
      <anchorfile>classshark_1_1_tree_nearest_neighbors.html</anchorfile>
      <anchor>ad3c362695b3ab2d2ac28934e7901a98c</anchor>
      <arglist>(Dataset const &amp;dataset, Tree const *tree)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; DistancePair &gt;</type>
      <name>getNeighbors</name>
      <anchorfile>classshark_1_1_tree_nearest_neighbors.html</anchorfile>
      <anchor>a93240024a5a340943a32c46c88347648</anchor>
      <arglist>(BatchInputType const &amp;patterns, std::size_t k) const</arglist>
    </member>
    <member kind="function">
      <type>LabeledData&lt; InputType, LabelType &gt; const &amp;</type>
      <name>dataset</name>
      <anchorfile>classshark_1_1_tree_nearest_neighbors.html</anchorfile>
      <anchor>a05eda57f90ea8bbb9c1fbe773a7075e6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::TrustRegionNewton</name>
    <filename>classshark_1_1_trust_region_newton.html</filename>
    <base>AbstractSingleObjectiveOptimizer&lt; RealVector &gt;</base>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL</type>
      <name>TrustRegionNewton</name>
      <anchorfile>classshark_1_1_trust_region_newton.html</anchorfile>
      <anchor>ab4bf5d1daf70ee438d8cbdfa258c3029</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_trust_region_newton.html</anchorfile>
      <anchor>a891852f57ed31dda460a76deae33d516</anchor>
      <arglist>(ObjectiveFunctionType &amp;objectiveFunction, SearchPointType const &amp;startingPoint)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_trust_region_newton.html</anchorfile>
      <anchor>a3cc77261a8cc3367b87bd60abb1812c7</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction, SearchPointType const &amp;startingPoint, double initialDelta)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_trust_region_newton.html</anchorfile>
      <anchor>a3b316c4bfc827853a64b03d34c07c165</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minImprovementRatio</name>
      <anchorfile>classshark_1_1_trust_region_newton.html</anchorfile>
      <anchor>ab8f33456dca90c87be30f3dea462c123</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>minImprovementRatio</name>
      <anchorfile>classshark_1_1_trust_region_newton.html</anchorfile>
      <anchor>a1bf2c2a5279196f90fe46bcd31c1e8bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_trust_region_newton.html</anchorfile>
      <anchor>aad95e74aa24a400a20829645a65615f3</anchor>
      <arglist>(ObjectiveFunctionType const &amp;objectiveFunction)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_delta</name>
      <anchorfile>classshark_1_1_trust_region_newton.html</anchorfile>
      <anchor>a303add905011b4cf678b4c3eb204ac1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_minImprovementRatio</name>
      <anchorfile>classshark_1_1_trust_region_newton.html</anchorfile>
      <anchor>a72c8b9f7c03fa28b9d06d2d35aed3280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ObjectiveFunctionType::SecondOrderDerivative</type>
      <name>m_derivatives</name>
      <anchorfile>classshark_1_1_trust_region_newton.html</anchorfile>
      <anchor>a57a6384549c0b1bdf613817c3664cbbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::TwoNormRegularizer</name>
    <filename>classshark_1_1_two_norm_regularizer.html</filename>
    <templarg>class SearchPointType</templarg>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>TwoNormRegularizer</name>
      <anchorfile>classshark_1_1_two_norm_regularizer.html</anchorfile>
      <anchor>a87dd7e7fbc9cc385a253cf663c769143</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_two_norm_regularizer.html</anchorfile>
      <anchor>aaf8a5aa66a1f06358d9b49ee7290a9b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_two_norm_regularizer.html</anchorfile>
      <anchor>ac21be0270a24b01540c445dd4b7dab19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>classshark_1_1_two_norm_regularizer.html</anchorfile>
      <anchor>af8a7425825da2e5ae432442445422812</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>classshark_1_1_two_norm_regularizer.html</anchorfile>
      <anchor>a814fa121947694cf749f61960317b27a</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMask</name>
      <anchorfile>classshark_1_1_two_norm_regularizer.html</anchorfile>
      <anchor>a6db3fc2c6d5809323a4652fbe12e00cc</anchor>
      <arglist>(SearchPointType const &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType const &amp;</type>
      <name>mask</name>
      <anchorfile>classshark_1_1_two_norm_regularizer.html</anchorfile>
      <anchor>a4b761f214564a9ffc804563bd2dd71ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_two_norm_regularizer.html</anchorfile>
      <anchor>a86880f9147269adb0dd29761dcd52ba6</anchor>
      <arglist>(SearchPointType const &amp;input) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_two_norm_regularizer.html</anchorfile>
      <anchor>aaf4f9c2f6dc7b1bf987e6078a3012b45</anchor>
      <arglist>(SearchPointType const &amp;input, SearchPointType &amp;derivative) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::TwoPointStepSizeAdaptation</name>
    <filename>classshark_1_1_two_point_step_size_adaptation.html</filename>
    <member kind="function">
      <type></type>
      <name>TwoPointStepSizeAdaptation</name>
      <anchorfile>classshark_1_1_two_point_step_size_adaptation.html</anchorfile>
      <anchor>afeae0541cca518119296e0d33927aa07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stepSize</name>
      <anchorfile>classshark_1_1_two_point_step_size_adaptation.html</anchorfile>
      <anchor>a2af42fba89576310fd19e7fc45ca4080</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlphaStep</name>
      <anchorfile>classshark_1_1_two_point_step_size_adaptation.html</anchorfile>
      <anchor>af20f6e58a5564dd83f8a770b99fb8124</anchor>
      <arglist>(double alphaStep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLearningRate</name>
      <anchorfile>classshark_1_1_two_point_step_size_adaptation.html</anchorfile>
      <anchor>a6d2d6a051012db295c5fe2ef91c6d2dc</anchor>
      <arglist>(double learningRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_two_point_step_size_adaptation.html</anchorfile>
      <anchor>aa32f71d5a7bcf74aed6ac6e89a4885d6</anchor>
      <arglist>(double initialStepSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStepSize</name>
      <anchorfile>classshark_1_1_two_point_step_size_adaptation.html</anchorfile>
      <anchor>a65f48fafa82bd1b7a3f7e0d44137d139</anchor>
      <arglist>(double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classshark_1_1_two_point_step_size_adaptation.html</anchorfile>
      <anchor>ab05207bccc1bacfaa163727a239099b2</anchor>
      <arglist>(SingleObjectiveFunction const &amp;f, RealVector const &amp;point, RealVector const &amp;direction)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::TwoStateSpace</name>
    <filename>structshark_1_1_two_state_space.html</filename>
    <templarg>int State1</templarg>
    <templarg>int State2</templarg>
    <member kind="typedef">
      <type>tags::DiscreteSpace</type>
      <name>EnumerationTag</name>
      <anchorfile>structshark_1_1_two_state_space.html</anchorfile>
      <anchor>a635e02bf8d7e457bebe693aa4fcf02a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>numberOfStates</name>
      <anchorfile>structshark_1_1_two_state_space.html</anchorfile>
      <anchor>ad19d005ed40ab4cfb59255d386965296</anchor>
      <arglist>(std::size_t numberOfNeurons)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>state</name>
      <anchorfile>structshark_1_1_two_state_space.html</anchorfile>
      <anchor>a71d5152fbe88352cff723e7d5a2f9c0f</anchor>
      <arglist>(V &amp;&amp;vec, std::size_t stateNumber)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::TypedFeatureNotAvailableException</name>
    <filename>classshark_1_1_typed_feature_not_available_exception.html</filename>
    <templarg>class Feature</templarg>
    <base>shark::Exception</base>
    <member kind="function">
      <type></type>
      <name>TypedFeatureNotAvailableException</name>
      <anchorfile>classshark_1_1_typed_feature_not_available_exception.html</anchorfile>
      <anchor>ae5c53113172930672a43e0c102c4c49b</anchor>
      <arglist>(Feature feature, const std::string &amp;file=std::string(), unsigned int line=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypedFeatureNotAvailableException</name>
      <anchorfile>classshark_1_1_typed_feature_not_available_exception.html</anchorfile>
      <anchor>a1988254a739390af38bd040d838b2146</anchor>
      <arglist>(const std::string &amp;message, Feature feature, const std::string &amp;file=std::string(), unsigned int line=0)</arglist>
    </member>
    <member kind="function">
      <type>Feature</type>
      <name>feature</name>
      <anchorfile>classshark_1_1_typed_feature_not_available_exception.html</anchorfile>
      <anchor>a5490d164d80bf2f02767ef481af6ab49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Feature</type>
      <name>m_feature</name>
      <anchorfile>classshark_1_1_typed_feature_not_available_exception.html</anchorfile>
      <anchor>a0f2ad7747156625252e72cf79bbede94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::TypedFlags</name>
    <filename>classshark_1_1_typed_flags.html</filename>
    <templarg>typename Flag</templarg>
    <base>shark::ISerializable</base>
    <member kind="function">
      <type></type>
      <name>TypedFlags</name>
      <anchorfile>classshark_1_1_typed_flags.html</anchorfile>
      <anchor>a9f5438ec9df8530b444597059c657b4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypedFlags</name>
      <anchorfile>classshark_1_1_typed_flags.html</anchorfile>
      <anchor>ae86874f2be7a40353f9dea7f05b18d35</anchor>
      <arglist>(TypedFlags const &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TypedFlags</name>
      <anchorfile>classshark_1_1_typed_flags.html</anchorfile>
      <anchor>aac54f9b6c680c37a1401c59a8b5049ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypedFlags&lt; Flag &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classshark_1_1_typed_flags.html</anchorfile>
      <anchor>a2330d36929aeb94a51045e6585da6e6b</anchor>
      <arglist>(TypedFlags&lt; Flag &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classshark_1_1_typed_flags.html</anchorfile>
      <anchor>a68ce97d08af8aedd27398d8f44218e67</anchor>
      <arglist>(Flag f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>classshark_1_1_typed_flags.html</anchorfile>
      <anchor>a9124e60ed14841aa7e2e8c0686faa31b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classshark_1_1_typed_flags.html</anchorfile>
      <anchor>a68f0c572adf112b680ef11531aa9ffb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classshark_1_1_typed_flags.html</anchorfile>
      <anchor>a132a9d1b3f7b2fdbc2a55fadc85151df</anchor>
      <arglist>(Flag f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test</name>
      <anchorfile>classshark_1_1_typed_flags.html</anchorfile>
      <anchor>a790dadd43f10baf9d14e37badedd4400</anchor>
      <arglist>(Flag f) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&amp;</name>
      <anchorfile>classshark_1_1_typed_flags.html</anchorfile>
      <anchor>a5e9ab823c14e3ffeb568a622e15bc27b</anchor>
      <arglist>(Flag f) const</arglist>
    </member>
    <member kind="function">
      <type>TypedFlags&lt; Flag &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>classshark_1_1_typed_flags.html</anchorfile>
      <anchor>acfa2dc4e7c1f42279437f9e9c62bd752</anchor>
      <arglist>(Flag f)</arglist>
    </member>
    <member kind="function">
      <type>TypedFlags&lt; Flag &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>classshark_1_1_typed_flags.html</anchorfile>
      <anchor>ac105ae0fb77409ffb8b674350ce5a3b1</anchor>
      <arglist>(const TypedFlags&lt; Flag &gt; &amp;flags)</arglist>
    </member>
    <member kind="function">
      <type>TypedFlags&lt; Flag &gt;</type>
      <name>operator|</name>
      <anchorfile>classshark_1_1_typed_flags.html</anchorfile>
      <anchor>af263a3e9826fa6982dbc573ba0eb299a</anchor>
      <arglist>(Flag f) const</arglist>
    </member>
    <member kind="function">
      <type>TypedFlags&lt; Flag &gt;</type>
      <name>operator|</name>
      <anchorfile>classshark_1_1_typed_flags.html</anchorfile>
      <anchor>aa81e7c0e636e7b95c92567a2785e8e85</anchor>
      <arglist>(const TypedFlags&lt; Flag &gt; &amp;flags) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_typed_flags.html</anchorfile>
      <anchor>a93b8873116122847eddc92a3f975cc06</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_typed_flags.html</anchorfile>
      <anchor>a0192569646b37c50d59adc630a317469</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_flags</name>
      <anchorfile>classshark_1_1_typed_flags.html</anchorfile>
      <anchor>aff9738eb4f3ce7889eb9fe27450be7d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::UniformCrossover</name>
    <filename>classshark_1_1_uniform_crossover.html</filename>
    <member kind="function">
      <type></type>
      <name>UniformCrossover</name>
      <anchorfile>classshark_1_1_uniform_crossover.html</anchorfile>
      <anchor>a4d7ae12537c326e742a2d59f46312517</anchor>
      <arglist>(double mixingRatio=0.5)</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator()</name>
      <anchorfile>classshark_1_1_uniform_crossover.html</anchorfile>
      <anchor>a59ba18da8fe3c0bce35d7714ab63d656</anchor>
      <arglist>(randomType &amp;rng, const Point &amp;mom, const Point &amp;dad) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mixingRatio</name>
      <anchorfile>classshark_1_1_uniform_crossover.html</anchorfile>
      <anchor>aaa07b04fde1227e333212e0f9ee4322a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMixingRatio</name>
      <anchorfile>classshark_1_1_uniform_crossover.html</anchorfile>
      <anchor>a40d7c3072bab9dac6f1dc0935cc4df9d</anchor>
      <arglist>(double newRatio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classshark_1_1_uniform_crossover.html</anchorfile>
      <anchor>aa62cdd146ab9c3258e682de1ef811fc2</anchor>
      <arglist>(Archive &amp;ar, const unsigned int version)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::UniformRankingSelection</name>
    <filename>structshark_1_1_uniform_ranking_selection.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_uniform_ranking_selection.html</anchorfile>
      <anchor>a7db44dbe945460adf786b811c0f3615e</anchor>
      <arglist>(RngType &amp;rng, InIterator individuals, InIterator individualsE, OutIterator out, OutIterator outE)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::UnlabeledData</name>
    <filename>classshark_1_1_unlabeled_data.html</filename>
    <templarg>class InputT</templarg>
    <base>Data&lt; InputT &gt;</base>
    <member kind="typedef">
      <type>element_type</type>
      <name>InputType</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaf9233782ab54374d89784a0a8272b29f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::SharedContainer&lt; InputT &gt;</type>
      <name>InputContainer</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga9ac116ed8ec0edc98bb10da4735476d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnlabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga8c0c65e3733192e01b3be129abd04dad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnlabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac53e3ceb409f163b0d19cdcc24a9f0a7</anchor>
      <arglist>(Data&lt; InputT &gt; const &amp;points)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnlabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga6572934f70878dae97a39d6f8dec2f71</anchor>
      <arglist>(std::size_t size, element_type const &amp;element, std::size_t batchSize=base_type::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnlabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac7b43c4cc1e365744a0e9312d0fbccf5</anchor>
      <arglist>(std::size_t numBatches)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnlabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga34fe063dcc415b410a763d841983a379</anchor>
      <arglist>(UnlabeledData const &amp;container, std::vector&lt; std::size_t &gt; batchSizes)</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData</type>
      <name>operator=</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga26e45cc01c8ff9b3e6e0d3fcba2e4718</anchor>
      <arglist>(Data&lt; InputT &gt; const &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData &amp;</type>
      <name>inputs</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaa539b482e46b278300d34502c579c51a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData const &amp;</type>
      <name>inputs</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac6ae0f437a6be0f2ec994f7c47021642</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData</type>
      <name>splice</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga26c40e65414da413dbb3ef6403b76049</anchor>
      <arglist>(std::size_t batch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shuffle</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga67bdcaf03984f3f958b83b5a4fafe77e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Container</type>
      <name>m_data</name>
      <anchorfile>classshark_1_1_unlabeled_data.html</anchorfile>
      <anchor>a2296f2d35aff4d00d07a5d6c99015197</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::statistics::UpperQuantile</name>
    <filename>classshark_1_1statistics_1_1_upper_quantile.html</filename>
    <base>shark::statistics::Quantile</base>
    <member kind="function">
      <type></type>
      <name>UpperQuantile</name>
      <anchorfile>classshark_1_1statistics_1_1_upper_quantile.html</anchorfile>
      <anchor>ad289ede6b27c086226e773253f39b288</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::ValidatedSingleObjectiveResultSet</name>
    <filename>structshark_1_1_validated_single_objective_result_set.html</filename>
    <templarg>class SearchPointTypeT</templarg>
    <base>shark::SingleObjectiveResultSet</base>
    <member kind="function">
      <type></type>
      <name>ValidatedSingleObjectiveResultSet</name>
      <anchorfile>structshark_1_1_validated_single_objective_result_set.html</anchorfile>
      <anchor>a782b606375562fbd2a8f7adefdb72f33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValidatedSingleObjectiveResultSet</name>
      <anchorfile>structshark_1_1_validated_single_objective_result_set.html</anchorfile>
      <anchor>a2e1d92a8d136565b5635dbb13809b841</anchor>
      <arglist>(base_type const &amp;base)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValidatedSingleObjectiveResultSet</name>
      <anchorfile>structshark_1_1_validated_single_objective_result_set.html</anchorfile>
      <anchor>a331fe536e7edad270ee9d98fa8d47d7a</anchor>
      <arglist>(base_type const &amp;base, double validation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structshark_1_1_validated_single_objective_result_set.html</anchorfile>
      <anchor>a684d91ba777740a3bdb7f44aea1fbdff</anchor>
      <arglist>(Archive &amp;archive, const unsigned int)</arglist>
    </member>
    <member kind="variable">
      <type>base_type::ResultType</type>
      <name>validation</name>
      <anchorfile>structshark_1_1_validated_single_objective_result_set.html</anchorfile>
      <anchor>af4c20b22e22ade2827c9e94b9aceccf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structshark_1_1_validated_single_objective_result_set.html</anchorfile>
      <anchor>a49540885465ca71b1c1e48ae9e77edf7</anchor>
      <arglist>(ValidatedSingleObjectiveResultSet const &amp;op1, ValidatedSingleObjectiveResultSet const &amp;op2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ValidatedStoppingCriterion</name>
    <filename>classshark_1_1_validated_stopping_criterion.html</filename>
    <base>AbstractStoppingCriterion&lt; SingleObjectiveResultSet&lt; RealVector &gt; &gt;</base>
    <member kind="typedef">
      <type>ValidatedSingleObjectiveResultSet&lt; PointType &gt;</type>
      <name>ValidationResultSet</name>
      <anchorfile>classshark_1_1_validated_stopping_criterion.html</anchorfile>
      <anchor>ae726bf1b5393b1922455244ceaf1ccbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractStoppingCriterion&lt; ValidationResultSet &gt;</type>
      <name>StoppingCriterionType</name>
      <anchorfile>classshark_1_1_validated_stopping_criterion.html</anchorfile>
      <anchor>a705f981436596372006b07ff5b92fc87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SingleObjectiveFunction</type>
      <name>ObjectiveFunctionType</name>
      <anchorfile>classshark_1_1_validated_stopping_criterion.html</anchorfile>
      <anchor>abbfd2215320a309c13fbec0462a8fd1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValidatedStoppingCriterion</name>
      <anchorfile>classshark_1_1_validated_stopping_criterion.html</anchorfile>
      <anchor>adf351513af8290ce53d53fc3875e5daa</anchor>
      <arglist>(ObjectiveFunctionType *validation, StoppingCriterionType *child)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stop</name>
      <anchorfile>classshark_1_1_validated_stopping_criterion.html</anchorfile>
      <anchor>af9d9d15bbdebb8dbccc1f17a0eff4ccf</anchor>
      <arglist>(ResultSet const &amp;set)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classshark_1_1_validated_stopping_criterion.html</anchorfile>
      <anchor>ad0982fa304282a6ba5d6f8cd48cf2ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ObjectiveFunctionType *</type>
      <name>mpe_validation</name>
      <anchorfile>classshark_1_1_validated_stopping_criterion.html</anchorfile>
      <anchor>a53082362bceeab83131802fb3dd62f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StoppingCriterionType *</type>
      <name>mpe_child</name>
      <anchorfile>classshark_1_1_validated_stopping_criterion.html</anchorfile>
      <anchor>a0c28ec151ef4cbc393c610e153a00354</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::QpMcBoxDecomp::Variable</name>
    <filename>structshark_1_1_qp_mc_box_decomp_1_1_variable.html</filename>
    <member kind="variable">
      <type>std::size_t</type>
      <name>i</name>
      <anchorfile>structshark_1_1_qp_mc_box_decomp_1_1_variable.html</anchorfile>
      <anchor>a2527bf247e11f3ce66c9d573c33a8d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>p</name>
      <anchorfile>structshark_1_1_qp_mc_box_decomp_1_1_variable.html</anchorfile>
      <anchor>ad49781ffc9b6ea569bd20eff24baaa4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>structshark_1_1_qp_mc_box_decomp_1_1_variable.html</anchorfile>
      <anchor>ae9060c5e2faa6f842ee44fdea2399395</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>diagonal</name>
      <anchorfile>structshark_1_1_qp_mc_box_decomp_1_1_variable.html</anchorfile>
      <anchor>aa4cb6314dcd3192a3d1937903446ac42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::QpMcSimplexDecomp::Variable</name>
    <filename>structshark_1_1_qp_mc_simplex_decomp_1_1_variable.html</filename>
    <member kind="variable">
      <type>std::size_t</type>
      <name>example</name>
      <anchorfile>structshark_1_1_qp_mc_simplex_decomp_1_1_variable.html</anchorfile>
      <anchor>afaea06b9275e9e4efcc583ea48870f39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>p</name>
      <anchorfile>structshark_1_1_qp_mc_simplex_decomp_1_1_variable.html</anchorfile>
      <anchor>ab28a742507fae39e644ac56ae9db49e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>structshark_1_1_qp_mc_simplex_decomp_1_1_variable.html</anchorfile>
      <anchor>a3d8c24c03e6ba4850200a58764f2ed84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>diagonal</name>
      <anchorfile>structshark_1_1_qp_mc_simplex_decomp_1_1_variable.html</anchorfile>
      <anchor>a46558dedf8e8f00a5a1dc67cb76783fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::statistics::Variance</name>
    <filename>classshark_1_1statistics_1_1_variance.html</filename>
    <base>shark::statistics::BaseStatisticsObject</base>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1statistics_1_1_variance.html</anchorfile>
      <anchor>a33135df731d4fd37ba3982ba77f9cf9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>statistics</name>
      <anchorfile>classshark_1_1statistics_1_1_variance.html</anchorfile>
      <anchor>a057e285347881100d55c2b054121e13a</anchor>
      <arglist>(std::vector&lt; RealVector &gt; const &amp;points) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::VariationalAutoencoderError</name>
    <filename>classshark_1_1_variational_autoencoder_error.html</filename>
    <templarg>class SearchPointType</templarg>
    <base>AbstractObjectiveFunction&lt; SearchPointType, double &gt;</base>
    <member kind="typedef">
      <type>UnlabeledData&lt; SearchPointType &gt;</type>
      <name>DatasetType</name>
      <anchorfile>classshark_1_1_variational_autoencoder_error.html</anchorfile>
      <anchor>a507e5d525e3ba1bf870a36c6c0b04a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractModel&lt; SearchPointType, SearchPointType, SearchPointType &gt;</type>
      <name>ModelType</name>
      <anchorfile>classshark_1_1_variational_autoencoder_error.html</anchorfile>
      <anchor>a1bcef582ede4db4936b7d6191949000d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariationalAutoencoderError</name>
      <anchorfile>classshark_1_1_variational_autoencoder_error.html</anchorfile>
      <anchor>a60064ffe8b1119e6f63af647e7298e91</anchor>
      <arglist>(DatasetType const &amp;data, ModelType *encoder, ModelType *decoder, AbstractLoss&lt; SearchPointType, SearchPointType &gt; *visible_loss, double lambda=1.0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_variational_autoencoder_error.html</anchorfile>
      <anchor>af6f7db424236e972169be485df11f212</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SearchPointType</type>
      <name>proposeStartingPoint</name>
      <anchorfile>classshark_1_1_variational_autoencoder_error.html</anchorfile>
      <anchor>a5e6dd6b42efb979395d221900550c7bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>classshark_1_1_variational_autoencoder_error.html</anchorfile>
      <anchor>a2ab70e47d4d58df274f7092aac9aff67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>sampleZ</name>
      <anchorfile>classshark_1_1_variational_autoencoder_error.html</anchorfile>
      <anchor>ac5d3fa3f5711e3556e83d536e2e4bcb9</anchor>
      <arglist>(SearchPointType const &amp;parameters, MatrixType const &amp;batch) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_variational_autoencoder_error.html</anchorfile>
      <anchor>a1c248c666ed60b7f985a5e05f2a822c8</anchor>
      <arglist>(SearchPointType const &amp;parameters) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evalDerivative</name>
      <anchorfile>classshark_1_1_variational_autoencoder_error.html</anchorfile>
      <anchor>a8b3b2f63448cb50dbcac630b10982341</anchor>
      <arglist>(SearchPointType const &amp;parameters, SearchPointType &amp;derivative) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::VDCMA</name>
    <filename>classshark_1_1_v_d_c_m_a.html</filename>
    <base>AbstractSingleObjectiveOptimizer&lt; RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>VDCMA</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>a1b75875028d4bcc325723dde79d2d449</anchor>
      <arglist>(random::rng_type &amp;rng=random::globalRng)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>a802231164288dca08bf2d504c4a62733</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>suggestLambda</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>aa745975f4a9c3349eaf9a2ebbc2a876a</anchor>
      <arglist>(std::size_t dimension)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>suggestMu</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>a3d4aaa6f933f6658d22d046ecc0023ee</anchor>
      <arglist>(std::size_t lambda)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>a387173a404de5babcadf81f812154442</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, SearchPointType const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>a0fa083a499437065ddcee88bcdafbfe3</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function, SearchPointType const &amp;initialSearchPoint, std::size_t lambda, std::size_t mu, double initialSigma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>a9df8d807bdf57909ac6b5b5a984faf03</anchor>
      <arglist>(ObjectiveFunctionType const &amp;function)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sigma</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>ac1319db547ccbf4d5d4fa9cd7b3487f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSigma</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>abd76b0216a4b252eb3ef5eb40ad7ae14</anchor>
      <arglist>(double sigma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialSigma</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>a52d9ab529c1c8dc9fd7b2b3f81e026df</anchor>
      <arglist>(double initialSigma)</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>mean</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>a046fe17ddb1b6e2991bb89235b7c1ae0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>weights</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>aa899fb6ab6bf117a8ed37cd058dd2434</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>evolutionPath</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>a0dc57927069dfe99f09c788e6e6a1377</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealVector const &amp;</type>
      <name>evolutionPathSigma</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>a7e045148cdb4d8f928104da38a31be86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>mu</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>aca9a92a95cdf91f4346826ee9f565f14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>mu</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>ac8e9c6a657a7c2c8b68721d9d207b75e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>lambda</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>a69f5bc9d17bfbbe896e8925586bdbba5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>lambda</name>
      <anchorfile>classshark_1_1_v_d_c_m_a.html</anchorfile>
      <anchor>af8784176f99b23cbc1d941d5da30bf0b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::Shark::Version</name>
    <filename>structshark_1_1_shark_1_1_version.html</filename>
    <templarg>unsigned int major</templarg>
    <templarg>unsigned int minor</templarg>
    <templarg>unsigned int patch</templarg>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>DEFAULT_FORMAT</name>
      <anchorfile>structshark_1_1_shark_1_1_version.html</anchorfile>
      <anchor>a0cd56cd50e6836cb6b86e5979353ef44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>MAJOR</name>
      <anchorfile>structshark_1_1_shark_1_1_version.html</anchorfile>
      <anchor>aaf28eda93dd2d3cfd269fe7f05fd3139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>MINOR</name>
      <anchorfile>structshark_1_1_shark_1_1_version.html</anchorfile>
      <anchor>a06fb8113023fbda0bff520dc0d7df574</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>PATCH</name>
      <anchorfile>structshark_1_1_shark_1_1_version.html</anchorfile>
      <anchor>acc94927f9746196f87cc94532b9387d5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::Wave</name>
    <filename>classshark_1_1_wave.html</filename>
    <base>LabeledDataDistribution&lt; RealVector, RealVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>Wave</name>
      <anchorfile>classshark_1_1_wave.html</anchorfile>
      <anchor>aeabdd6a76649d639de25593927428766</anchor>
      <arglist>(double stddev=0.1, double range=5.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classshark_1_1_wave.html</anchorfile>
      <anchor>af7cfadb59070e2fb83ceaf464256dfb5</anchor>
      <arglist>(RealVector &amp;input, RealVector &amp;label) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_stddev</name>
      <anchorfile>classshark_1_1_wave.html</anchorfile>
      <anchor>addec6db7f2ddef1812673177953ecece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_range</name>
      <anchorfile>classshark_1_1_wave.html</anchorfile>
      <anchor>a5eb366d6d5cbbfda637601d92aa4d633</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::WeightedDataBatch</name>
    <filename>structshark_1_1_weighted_data_batch.html</filename>
    <templarg>class DataBatchType</templarg>
    <templarg>class WeightBatchType</templarg>
    <member kind="typedef">
      <type>WeightedDataPair&lt; decltype(getBatchElement(std::declval&lt; DataBatchType &amp; &gt;(), 0)), decltype(getBatchElement(std::declval&lt; WeightBatchType &amp; &gt;(), 0)) &gt;</type>
      <name>reference</name>
      <anchorfile>structshark_1_1_weighted_data_batch.html</anchorfile>
      <anchor>aab93ae72cede17722ce1d1e831e5186d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WeightedDataPair&lt; decltype(getBatchElement(std::declval&lt; typename std::add_const&lt; DataBatchType &gt;::type &amp; &gt;(), 0)), decltype(getBatchElement(std::declval&lt; typename std::add_const&lt; WeightBatchType &gt;::type &amp; &gt;(), 0)) &gt;</type>
      <name>const_reference</name>
      <anchorfile>structshark_1_1_weighted_data_batch.html</anchorfile>
      <anchor>aa6720b317a8ce59206d04aad023c299c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexingIterator&lt; WeightedDataBatch &gt;</type>
      <name>iterator</name>
      <anchorfile>structshark_1_1_weighted_data_batch.html</anchorfile>
      <anchor>a9b970bab9307c3425a433d2582a29c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexingIterator&lt; WeightedDataBatch const  &gt;</type>
      <name>const_iterator</name>
      <anchorfile>structshark_1_1_weighted_data_batch.html</anchorfile>
      <anchor>a0a589f16a9f45a55f7ce78ed8765d4df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedDataBatch</name>
      <anchorfile>structshark_1_1_weighted_data_batch.html</anchorfile>
      <anchor>ac82c6a85cfc3cedcc5f9ad7ab0d370aa</anchor>
      <arglist>(D &amp;&amp;data, W &amp;&amp;weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedDataBatch</name>
      <anchorfile>structshark_1_1_weighted_data_batch.html</anchorfile>
      <anchor>aba773079455339053a533ed884868fc2</anchor>
      <arglist>(std::size_t size, Pair const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>WeightedDataBatch &amp;</type>
      <name>operator=</name>
      <anchorfile>structshark_1_1_weighted_data_batch.html</anchorfile>
      <anchor>a9a07bdf59fd11d9f3bd7cf38dedec869</anchor>
      <arglist>(WeightedDataBatch&lt; I, L &gt; const &amp;batch)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>structshark_1_1_weighted_data_batch.html</anchorfile>
      <anchor>a54a8f4d8ff69f2d811c7bfc61f70fe1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structshark_1_1_weighted_data_batch.html</anchorfile>
      <anchor>a98dd827f038cb5b040270fe7b04dd0bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structshark_1_1_weighted_data_batch.html</anchorfile>
      <anchor>ad59bbfed85b4dcf79cbc5fec32fb0a7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structshark_1_1_weighted_data_batch.html</anchorfile>
      <anchor>a3d52a8bba398c542b279eff348e767ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structshark_1_1_weighted_data_batch.html</anchorfile>
      <anchor>a9d74ee915f51b09f82ea0bd7f0fda253</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>structshark_1_1_weighted_data_batch.html</anchorfile>
      <anchor>adf2340323a3555f694c2401e9c929078</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>structshark_1_1_weighted_data_batch.html</anchorfile>
      <anchor>abe8aa3af931ea176a11c3cd1eb97ad88</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable">
      <type>DataBatchType</type>
      <name>data</name>
      <anchorfile>structshark_1_1_weighted_data_batch.html</anchorfile>
      <anchor>afe97e8d945ac50b033bd2fe8e6c7718f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WeightBatchType</type>
      <name>weight</name>
      <anchorfile>structshark_1_1_weighted_data_batch.html</anchorfile>
      <anchor>a6c2e982d48f580e8f702070e530b9843</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::WeightedDataPair</name>
    <filename>structshark_1_1_weighted_data_pair.html</filename>
    <templarg>class DataType</templarg>
    <templarg>class WeightType</templarg>
    <member kind="function">
      <type></type>
      <name>WeightedDataPair</name>
      <anchorfile>structshark_1_1_weighted_data_pair.html</anchorfile>
      <anchor>a44ea6d553a9c404762877e73a27be98a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedDataPair</name>
      <anchorfile>structshark_1_1_weighted_data_pair.html</anchorfile>
      <anchor>a13d962d654eb99ebd5e6efe31b5f870d</anchor>
      <arglist>(DataT &amp;&amp;data, WeightT &amp;&amp;weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedDataPair</name>
      <anchorfile>structshark_1_1_weighted_data_pair.html</anchorfile>
      <anchor>ad68bb92f39809cde931acb4a9efd5017</anchor>
      <arglist>(WeightedDataPair&lt; DataT, WeightT &gt; const &amp;pair)</arglist>
    </member>
    <member kind="function">
      <type>WeightedDataPair &amp;</type>
      <name>operator=</name>
      <anchorfile>structshark_1_1_weighted_data_pair.html</anchorfile>
      <anchor>a827848bbc7d6900c72814dc6260aec1f</anchor>
      <arglist>(WeightedDataPair&lt; DataT, WeightT &gt; const &amp;batch)</arglist>
    </member>
    <member kind="function">
      <type>WeightedDataPair &amp;</type>
      <name>operator=</name>
      <anchorfile>structshark_1_1_weighted_data_pair.html</anchorfile>
      <anchor>a552caca30cff45615dd102e80694d94a</anchor>
      <arglist>(WeightedDataPair const &amp;batch)</arglist>
    </member>
    <member kind="variable">
      <type>DataType</type>
      <name>data</name>
      <anchorfile>structshark_1_1_weighted_data_pair.html</anchorfile>
      <anchor>a10989da82db7181438ce1ff19272bd75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WeightType</type>
      <name>weight</name>
      <anchorfile>structshark_1_1_weighted_data_pair.html</anchorfile>
      <anchor>acf28cb8512b93ca53958db8ade244ac9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::WeightedLabeledData</name>
    <filename>classshark_1_1_weighted_labeled_data.html</filename>
    <templarg>class InputT</templarg>
    <templarg>class LabelT</templarg>
    <member kind="typedef">
      <type>base_type::DataType</type>
      <name>DataType</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>a281b253f885a39cf0f7b4b536f477850</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::WeightType</type>
      <name>WeightType</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>a021e24cd4fb958820ae16690bf5e70a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InputT</type>
      <name>InputType</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>afaf3abc446e7ebb81ca857d73a34a28b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabelT</type>
      <name>LabelType</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>adf3341286338d8fcd8789fb7a0a2ef77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_CONSTANT</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>af260c63209f6881849b736c91fc000d3</anchor>
      <arglist>(std::size_t, DefaultBatchSize=(LabeledData&lt; InputT, LabelT &gt;::DefaultBatchSize))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedLabeledData</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>a0604b2b664701ba0cfc78c32e43e9f6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedLabeledData</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>a9354b6293662952c09c0d16ccfe9c263</anchor>
      <arglist>(std::size_t numBatches)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedLabeledData</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>abe967a168c030e74c18505403215076b</anchor>
      <arglist>(std::size_t size, element_type const &amp;element, std::size_t batchSize=DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedLabeledData</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>a6c1ca9174edeae5642fcf786700c0418</anchor>
      <arglist>(LabeledData&lt; InputType, LabelType &gt; const &amp;data, Data&lt; WeightType &gt; const &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedLabeledData</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>a6d36f2bcbae5f6fae1b5896c603f44e2</anchor>
      <arglist>(LabeledData&lt; InputType, LabelType &gt; const &amp;data, double weight)</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData&lt; InputType &gt; const &amp;</type>
      <name>inputs</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>ad11b0613785e1c6f36f6dd5d32662ead</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData&lt; InputType &gt; &amp;</type>
      <name>inputs</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>a6ea4cdf11829c2b6f2ca487859f6e617</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Data&lt; LabelType &gt; const &amp;</type>
      <name>labels</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>ae3ca78f96dd1c1881b04d3726213a136</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Data&lt; LabelType &gt; &amp;</type>
      <name>labels</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>a9e8d5d55cc570a4a8cfb8418ccfa1587</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Shape const &amp;</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>a4b369aa6cfa440ecb7f5a150e645a2a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>inputShape</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>a78fdd89eae099be245faff5907baa867</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Shape const &amp;</type>
      <name>labelShape</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>ab551802a4a3d30b09984ee7c92ca64b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>labelShape</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>a5f6639432fcc7498e0cbb4e74a956ab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>WeightedUnlabeledData&lt; InputType &gt;</type>
      <name>weightedInputs</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>a8fe95c73b1014c9e73a377ce6ede962c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WeightedLabeledData</type>
      <name>splice</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>a648fe695e393366e70092d2d80cd4f62</anchor>
      <arglist>(std::size_t batch)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classshark_1_1_weighted_labeled_data.html</anchorfile>
      <anchor>a3379551f7a879a2ed49dd6046024dcf3</anchor>
      <arglist>(WeightedLabeledData &amp;a, WeightedLabeledData &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::WeightedSumKernel</name>
    <filename>classshark_1_1_weighted_sum_kernel.html</filename>
    <templarg>class InputType</templarg>
    <base>shark::AbstractKernelFunction</base>
    <class kind="struct">shark::WeightedSumKernel::tBase</class>
    <member kind="typedef">
      <type>base_type::BatchInputType</type>
      <name>BatchInputType</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>afe31030a33669b789e1d92d56da07882</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstInputReference</type>
      <name>ConstInputReference</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a6caa8268bc333f331d50366fc679419d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::ConstBatchInputReference</type>
      <name>ConstBatchInputReference</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a6c0691276ad97eaf6030cb2e5ab24679</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedSumKernel</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>aee096c1b04abdeb6cc2bdd5a5b01ea17</anchor>
      <arglist>(std::vector&lt; AbstractKernelFunction&lt; InputType &gt; * &gt; const &amp;base)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>abe44dc95e08b7024712f4980e6dbd310</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAdaptive</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a86efd4f545c8abf4caea4d9c38589e80</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdaptive</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>aa433177f587bf2a79c7ec36977f15f00</anchor>
      <arglist>(std::size_t index, bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdaptiveAll</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a227f996baf7f509c9cfe2e95f0ba1135</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a3b684ed2ebcb1c8502e8116ee1ba8153</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdaptiveWeights</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a74cdcb5818e16690ee1088f6d5c2e77e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>parameterVector</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a7947a32a41b0bff7ac5e1f5532cccf51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; State &gt;</type>
      <name>createState</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a8f5c7a811096153b2cc2add881ea3b41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterVector</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a3682a26ae5a4261c1be65d8d672d9252</anchor>
      <arglist>(RealVector const &amp;newParameters)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfParameters</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a0d8ada3a0f91d423094039784f700461</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a41a6851266bc6808f2e271e764989349</anchor>
      <arglist>(ConstInputReference x1, ConstInputReference x2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a2b481f814c6863916b53c9c8918e8bec</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>ad58a7538e994a5d0a0b5d49e7d582f87</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix &amp;result, State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedParameterDerivative</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a32e469b9516edfadd503609e68c2ab4a</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficients, State const &amp;state, RealVector &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightedInputDerivative</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>ac85e0509d78aeb0909c9a4b3876eb94f</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficientsX2, State const &amp;state, BatchInputType &amp;gradient) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a03eb586f4658acdf41643b761f932b3d</anchor>
      <arglist>(InArchive &amp;ar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a8e7dc5ce57c2378159ff080e49a18382</anchor>
      <arglist>(OutArchive &amp;ar) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNumberOfParameters</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a3ea97fa30195ad2fda455a58fa2e2839</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>weightedInputDerivativeImpl</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a8b3fc6653bb38681f0292d81251103a4</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficientsX2, State const &amp;state, BatchInputType &amp;gradient, typename boost::enable_if&lt; boost::is_same&lt; T, RealMatrix &gt; &gt;::type *dummy=0) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>weightedInputDerivativeImpl</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a9c33d52aa95a25710f74bfbcd32c1e8b</anchor>
      <arglist>(ConstBatchInputReference batchX1, ConstBatchInputReference batchX2, RealMatrix const &amp;coefficientsX2, State const &amp;state, BatchInputType &amp;gradient, typename boost::disable_if&lt; boost::is_same&lt; T, RealMatrix &gt; &gt;::type *dummy=0) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; tBase &gt;</type>
      <name>m_base</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a4028738f9aa22e1edab8867bb2aff529</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_weightsum</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>aff1ee3807f90b696b4e5e367d0091e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_numParameters</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>aca8bc10711b10be934175ca051a9b64b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_adaptWeights</name>
      <anchorfile>classshark_1_1_weighted_sum_kernel.html</anchorfile>
      <anchor>a763f50399f37666fc1f81a6fed05e062</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::WeightedUnlabeledData</name>
    <filename>classshark_1_1_weighted_unlabeled_data.html</filename>
    <templarg>class DataT</templarg>
    <member kind="typedef">
      <type>base_type::DataType</type>
      <name>DataType</name>
      <anchorfile>classshark_1_1_weighted_unlabeled_data.html</anchorfile>
      <anchor>a91d5113d9a6f67a6593d76e4a265cf51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::WeightType</type>
      <name>WeightType</name>
      <anchorfile>classshark_1_1_weighted_unlabeled_data.html</anchorfile>
      <anchor>a9b55cb78df8d7a45a4bf3d8086f3a65f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DataT</type>
      <name>InputType</name>
      <anchorfile>classshark_1_1_weighted_unlabeled_data.html</anchorfile>
      <anchor>aed7e005edba4dee30e735fcac0538f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_CONSTANT</name>
      <anchorfile>classshark_1_1_weighted_unlabeled_data.html</anchorfile>
      <anchor>ad6c78becf3a0a703a506f17d9535e0b9</anchor>
      <arglist>(std::size_t, DefaultBatchSize=UnlabeledData&lt; DataT &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedUnlabeledData</name>
      <anchorfile>classshark_1_1_weighted_unlabeled_data.html</anchorfile>
      <anchor>ab781cf87de5c135103795a0c44210b2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedUnlabeledData</name>
      <anchorfile>classshark_1_1_weighted_unlabeled_data.html</anchorfile>
      <anchor>a9301c466c82723786aef62ab802a9a55</anchor>
      <arglist>(std::size_t numBatches)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedUnlabeledData</name>
      <anchorfile>classshark_1_1_weighted_unlabeled_data.html</anchorfile>
      <anchor>ab16d53abba61cf2bb3af7a4f94c1d85b</anchor>
      <arglist>(std::size_t size, element_type const &amp;element, std::size_t batchSize=DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedUnlabeledData</name>
      <anchorfile>classshark_1_1_weighted_unlabeled_data.html</anchorfile>
      <anchor>a29b5ac16bc4687d21baf574641025bf5</anchor>
      <arglist>(UnlabeledData&lt; DataType &gt; const &amp;data, Data&lt; WeightType &gt; const &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedUnlabeledData</name>
      <anchorfile>classshark_1_1_weighted_unlabeled_data.html</anchorfile>
      <anchor>ab5561feeee3c7bbd010c1da83bb7797b</anchor>
      <arglist>(UnlabeledData&lt; DataType &gt; const &amp;data, double weight)</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData&lt; DataT &gt; const &amp;</type>
      <name>inputs</name>
      <anchorfile>classshark_1_1_weighted_unlabeled_data.html</anchorfile>
      <anchor>af30cf1f800bf899e55de467f9e211b52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData&lt; DataT &gt; &amp;</type>
      <name>inputs</name>
      <anchorfile>classshark_1_1_weighted_unlabeled_data.html</anchorfile>
      <anchor>a40369ede148f5687ac274a7f6816809c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Shape const &amp;</type>
      <name>shape</name>
      <anchorfile>classshark_1_1_weighted_unlabeled_data.html</anchorfile>
      <anchor>a928b2414d9a32987c3341743dc0716e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>shape</name>
      <anchorfile>classshark_1_1_weighted_unlabeled_data.html</anchorfile>
      <anchor>a58475c3c9b0480c96397c771a4a1759f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>WeightedUnlabeledData</type>
      <name>splice</name>
      <anchorfile>classshark_1_1_weighted_unlabeled_data.html</anchorfile>
      <anchor>a71bcad4364057b3d20b6315176d6b480</anchor>
      <arglist>(std::size_t batch)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classshark_1_1_weighted_unlabeled_data.html</anchorfile>
      <anchor>aac37ab4ee3db2b92d744146f176b43c2</anchor>
      <arglist>(WeightedUnlabeledData &amp;a, WeightedUnlabeledData &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::WS2MaximumGradientCriterion</name>
    <filename>structshark_1_1_w_s2_maximum_gradient_criterion.html</filename>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structshark_1_1_w_s2_maximum_gradient_criterion.html</anchorfile>
      <anchor>aa8c50f6f2d3d51a215bd355baf638b7c</anchor>
      <arglist>(Problem &amp;problem, std::size_t &amp;i, std::size_t &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structshark_1_1_w_s2_maximum_gradient_criterion.html</anchorfile>
      <anchor>aeaad8c0631f5fdbb14fccf22027c56a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::ZDT1</name>
    <filename>structshark_1_1benchmarks_1_1_z_d_t1.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>ZDT1</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t1.html</anchorfile>
      <anchor>a7f65caac07e2207ea81e0116da68e92e</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t1.html</anchorfile>
      <anchor>af55b74a09701da9b36a634af9dbc408a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t1.html</anchorfile>
      <anchor>a62f78e45c8e14c96e70576ca97c9d489</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t1.html</anchorfile>
      <anchor>ac18d91f6077da5317987295c6adcf904</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t1.html</anchorfile>
      <anchor>afe26838a79d8b91a5af6ae74bd0e7bc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t1.html</anchorfile>
      <anchor>a4d209eae48ca91e0beed768aad6d4ae8</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t1.html</anchorfile>
      <anchor>a1ee1eb2e9b66e8b724828244c04a131e</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::ZDT2</name>
    <filename>structshark_1_1benchmarks_1_1_z_d_t2.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>ZDT2</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t2.html</anchorfile>
      <anchor>af18850f1c2cdfbbc356b159f109b8ccf</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t2.html</anchorfile>
      <anchor>a6c8edf541669420ac8863b13aa9a0c91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t2.html</anchorfile>
      <anchor>a54d10b6a40470783d222e1804360cf01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t2.html</anchorfile>
      <anchor>a4dd19370a57dd5d5d982c911a33c4d3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t2.html</anchorfile>
      <anchor>a7c6d56d1ff0b1e50bc4c4285cbe0bb47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t2.html</anchorfile>
      <anchor>a100b9743150d1dc27eec69c981073d45</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t2.html</anchorfile>
      <anchor>ad5986014a229ca617473aa69af2312bf</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::ZDT3</name>
    <filename>structshark_1_1benchmarks_1_1_z_d_t3.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>ZDT3</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t3.html</anchorfile>
      <anchor>ae58ccdb2470658fa4e680c5afffa9a9b</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t3.html</anchorfile>
      <anchor>abc71dce41bc67cf0e5dba555c0568016</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t3.html</anchorfile>
      <anchor>abd21ed221bfb56dbb533fde235428496</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t3.html</anchorfile>
      <anchor>a1991974f7eb05b4cb7c4b4ce370271a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t3.html</anchorfile>
      <anchor>a29ba3e223e291dc0f8455834d313619d</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t3.html</anchorfile>
      <anchor>a007b88aa038ff074902cda780965c19f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t3.html</anchorfile>
      <anchor>a534fe1a312c3ea99400c1aaf0eb45154</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::ZDT4</name>
    <filename>structshark_1_1benchmarks_1_1_z_d_t4.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>ZDT4</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t4.html</anchorfile>
      <anchor>a0fa995732f1bd312b5af46b699345517</anchor>
      <arglist>(std::size_t numVariables=1)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t4.html</anchorfile>
      <anchor>a3b958417187c537bac6e00bddd0247a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t4.html</anchorfile>
      <anchor>a3a7e60afd4627cd506a6093a33ce38b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t4.html</anchorfile>
      <anchor>a7b703e1f564caf681facbb3935cb0752</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t4.html</anchorfile>
      <anchor>a773be4cad1d7019e2ec18bcb51560f11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t4.html</anchorfile>
      <anchor>ad838c97f536e2865e41c9c1e93b3d39b</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t4.html</anchorfile>
      <anchor>ad3a074444b700140010cf35284afb06f</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shark::benchmarks::ZDT6</name>
    <filename>structshark_1_1benchmarks_1_1_z_d_t6.html</filename>
    <base>shark::AbstractObjectiveFunction</base>
    <member kind="function">
      <type></type>
      <name>ZDT6</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t6.html</anchorfile>
      <anchor>ae3094d3bb691d9fb02b44a71fca42405</anchor>
      <arglist>(std::size_t numVariables=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t6.html</anchorfile>
      <anchor>a2ae3b66cd6deeec6316fe511c2aa895f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfObjectives</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t6.html</anchorfile>
      <anchor>a25852559e81877fd9f6ee60d83aa5b24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t6.html</anchorfile>
      <anchor>aa6482a31d5c7c9dfce3f3a3939c448ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScalableDimensionality</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t6.html</anchorfile>
      <anchor>ad46df71f6d48e93a2618d8596c39d245</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfVariables</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t6.html</anchorfile>
      <anchor>a30584cda90fe58844c469b2c558af99d</anchor>
      <arglist>(std::size_t numberOfVariables)</arglist>
    </member>
    <member kind="function">
      <type>ResultType</type>
      <name>eval</name>
      <anchorfile>structshark_1_1benchmarks_1_1_z_d_t6.html</anchorfile>
      <anchor>ad309637e4588aeab20d0765ccc111752</anchor>
      <arglist>(const SearchPointType &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ZeroOneLoss</name>
    <filename>classshark_1_1_zero_one_loss.html</filename>
    <templarg>class LabelType</templarg>
    <templarg>class OutputType</templarg>
    <base>shark::AbstractLoss</base>
    <member kind="typedef">
      <type>base_type::BatchLabelType</type>
      <name>BatchLabelType</name>
      <anchorfile>classshark_1_1_zero_one_loss.html</anchorfile>
      <anchor>ab43603f1f7774b72b2178946e6485eeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_zero_one_loss.html</anchorfile>
      <anchor>adac2c5c0e4fd170d44d604e663ec30d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZeroOneLoss</name>
      <anchorfile>classshark_1_1_zero_one_loss.html</anchorfile>
      <anchor>a62edff532f2bea68a6a2313d4031dd76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_zero_one_loss.html</anchorfile>
      <anchor>ae78565cab68eb04269cf2cd1b4b7bca2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_zero_one_loss.html</anchorfile>
      <anchor>acba6670d53701d50eed0ecdbc1114175</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions) const</arglist>
    </member>
    <member kind="function">
      <type>virtual double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_zero_one_loss.html</anchorfile>
      <anchor>add4a2b4308ff290a10552824fdb33550</anchor>
      <arglist>(BatchLabelType const &amp;target, BatchOutputType const &amp;prediction) const=0</arglist>
    </member>
    <member kind="function">
      <type>virtual double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_zero_one_loss.html</anchorfile>
      <anchor>a26f69483e0f62462bbc45e2734f65a4b</anchor>
      <arglist>(ConstLabelReference target, ConstOutputReference prediction) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_zero_one_loss.html</anchorfile>
      <anchor>a0d53dd678d58b2cb3a213cdc829937da</anchor>
      <arglist>(Data&lt; LabelType &gt; const &amp;targets, Data&lt; OutputType &gt; const &amp;predictions) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shark::ZeroOneLoss&lt; unsigned int, blas::vector&lt; Float &gt; &gt;</name>
    <filename>classshark_1_1_zero_one_loss_3_01unsigned_01int_00_01blas_1_1vector_3_01_float_01_4_01_4.html</filename>
    <templarg>class Float</templarg>
    <base>AbstractLoss&lt; unsigned int, blas::vector&lt; Float &gt; &gt;</base>
    <member kind="typedef">
      <type>base_type::BatchLabelType</type>
      <name>BatchLabelType</name>
      <anchorfile>classshark_1_1_zero_one_loss_3_01unsigned_01int_00_01blas_1_1vector_3_01_float_01_4_01_4.html</anchorfile>
      <anchor>a420c0aeacacb743e68ba44e6f7ef6005</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::BatchOutputType</type>
      <name>BatchOutputType</name>
      <anchorfile>classshark_1_1_zero_one_loss_3_01unsigned_01int_00_01blas_1_1vector_3_01_float_01_4_01_4.html</anchorfile>
      <anchor>aa2436ce8cb86ce9f7d88622a452affdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZeroOneLoss</name>
      <anchorfile>classshark_1_1_zero_one_loss_3_01unsigned_01int_00_01blas_1_1vector_3_01_float_01_4_01_4.html</anchorfile>
      <anchor>a5deb4b62f0a3cc011c6297b9b40752a7</anchor>
      <arglist>(double threshold=0.0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classshark_1_1_zero_one_loss_3_01unsigned_01int_00_01blas_1_1vector_3_01_float_01_4_01_4.html</anchorfile>
      <anchor>a06650f85d667aacb16546f910b5e16b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_zero_one_loss_3_01unsigned_01int_00_01blas_1_1vector_3_01_float_01_4_01_4.html</anchorfile>
      <anchor>a392993dc623f198949955e4fdb5b9d2a</anchor>
      <arglist>(BatchLabelType const &amp;labels, BatchOutputType const &amp;predictions) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eval</name>
      <anchorfile>classshark_1_1_zero_one_loss_3_01unsigned_01int_00_01blas_1_1vector_3_01_float_01_4_01_4.html</anchorfile>
      <anchor>ad29ef56602b3431b411320d95434a0ac</anchor>
      <arglist>(Data&lt; unsigned int &gt; const &amp;targets, Data&lt; blas::vector&lt; Float &gt; &gt; const &amp;predictions, RealVector const &amp;weights) const</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>boost</name>
    <filename>namespaceboost.html</filename>
  </compound>
  <compound kind="namespace">
    <name>boost::serialization</name>
    <filename>namespaceboost_1_1serialization.html</filename>
  </compound>
  <compound kind="namespace">
    <name>example</name>
    <filename>namespaceexample.html</filename>
  </compound>
  <compound kind="namespace">
    <name>General</name>
    <filename>namespace_general.html</filename>
  </compound>
  <compound kind="namespace">
    <name>shark</name>
    <filename>namespaceshark.html</filename>
  </compound>
  <compound kind="namespace">
    <name>shark::benchmarks</name>
    <filename>namespaceshark_1_1benchmarks.html</filename>
  </compound>
  <compound kind="namespace">
    <name>shark::blas</name>
    <filename>namespaceshark_1_1blas.html</filename>
  </compound>
  <compound kind="namespace">
    <name>shark::image</name>
    <filename>namespaceshark_1_1image.html</filename>
  </compound>
  <compound kind="namespace">
    <name>shark::random</name>
    <filename>namespaceshark_1_1random.html</filename>
  </compound>
  <compound kind="namespace">
    <name>shark::statistics</name>
    <filename>namespaceshark_1_1statistics.html</filename>
  </compound>
  <compound kind="namespace">
    <name>shark::tags</name>
    <filename>namespaceshark_1_1tags.html</filename>
  </compound>
  <compound kind="namespace">
    <name>tag</name>
    <filename>namespacetag.html</filename>
  </compound>
  <compound kind="group">
    <name>multidirect</name>
    <title>Multi-objective Direct-Search optimizers</title>
    <filename>group__multidirect.html</filename>
    <class kind="class">shark::IndicatorBasedMOCMA</class>
    <class kind="class">shark::MOEAD</class>
    <class kind="class">shark::IndicatorBasedRealCodedNSGAII</class>
    <class kind="class">shark::RealCodedNSGAIII</class>
    <class kind="class">shark::RVEA</class>
    <class kind="class">shark::SMSEMOA</class>
    <class kind="class">shark::IndicatorBasedSteadyStateMOCMA</class>
  </compound>
  <compound kind="group">
    <name>optimizers</name>
    <title>Algorithms to find a local minimum of\ref objfunctions.</title>
    <filename>group__optimizers.html</filename>
    <class kind="class">shark::AbstractMultiObjectiveOptimizer</class>
    <class kind="class">shark::AbstractOptimizer</class>
    <class kind="class">shark::AbstractSingleObjectiveOptimizer</class>
    <subgroup>multidirect</subgroup>
    <subgroup>gradientopt</subgroup>
    <subgroup>singledirect</subgroup>
  </compound>
  <compound kind="group">
    <name>gradientopt</name>
    <title>Gradient-based Single objective optimizers</title>
    <filename>group__gradientopt.html</filename>
    <class kind="class">shark::AbstractLineSearchOptimizer</class>
    <class kind="class">shark::Adam</class>
    <class kind="class">shark::BFGS</class>
    <class kind="class">shark::CG</class>
    <class kind="class">shark::LBFGS</class>
    <class kind="class">shark::LineSearch</class>
    <class kind="class">shark::Rprop</class>
    <class kind="class">shark::SteepestDescent</class>
    <class kind="class">shark::TrustRegionNewton</class>
  </compound>
  <compound kind="group">
    <name>singledirect</name>
    <title>Single-objective Direct-Search optimizers</title>
    <filename>group__singledirect.html</filename>
    <class kind="class">shark::CMA</class>
    <class kind="class">shark::CMSA</class>
    <class kind="class">shark::CrossEntropyMethod</class>
    <class kind="class">shark::ElitistCMA</class>
    <class kind="class">shark::GridSearch</class>
    <class kind="class">shark::SimplexDownhill</class>
    <namespace>shark</namespace>
  </compound>
  <compound kind="group">
    <name>supervised_trainer</name>
    <title>Supervised Trainers</title>
    <filename>group__supervised__trainer.html</filename>
    <class kind="class">shark::AbstractSvmTrainer</class>
    <class kind="class">shark::AbstractLinearSvmTrainer</class>
    <class kind="class">shark::AbstractTrainer</class>
    <class kind="class">shark::AbstractWeightedTrainer</class>
    <class kind="class">shark::CSvmTrainer</class>
    <class kind="class">shark::EpsilonSvmTrainer</class>
    <class kind="class">shark::FisherLDA</class>
    <class kind="class">shark::KernelMeanClassifier</class>
    <class kind="class">shark::KernelSGDTrainer</class>
    <class kind="class">shark::LassoRegression</class>
    <class kind="class">shark::LDA</class>
    <class kind="class">shark::LinearRegression</class>
    <class kind="class">shark::LinearSAGTrainer</class>
    <class kind="class">shark::LogisticRegression</class>
    <class kind="class">shark::MissingFeatureSvmTrainer</class>
    <class kind="class">shark::OptimizationTrainer</class>
    <class kind="class">shark::Perceptron</class>
    <class kind="class">shark::RankingSvmTrainer</class>
    <class kind="class">shark::RegularizationNetworkTrainer</class>
    <class kind="class">shark::RFTrainer</class>
  </compound>
  <compound kind="group">
    <name>unsupervised_trainer</name>
    <title>Unsupervised Trainers</title>
    <filename>group__unsupervised__trainer.html</filename>
    <class kind="class">shark::AbstractUnsupervisedTrainer</class>
    <class kind="class">shark::AbstractWeightedUnsupervisedTrainer</class>
    <class kind="class">shark::NormalizeComponentsUnitInterval</class>
    <class kind="class">shark::NormalizeComponentsUnitVariance</class>
    <class kind="class">shark::NormalizeComponentsWhitening</class>
    <class kind="class">shark::NormalizeComponentsZCA</class>
    <class kind="class">shark::NormalizeKernelUnitVariance</class>
    <class kind="class">shark::OneClassSvmTrainer</class>
    <class kind="class">shark::PCA</class>
  </compound>
  <compound kind="group">
    <name>shark_globals</name>
    <title>shark_globals</title>
    <filename>group__shark__globals.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>shark::LabelPosition</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga2cd86794253e1e789534ab1c06f4387d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shark::FIRST_COLUMN</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gga2cd86794253e1e789534ab1c06f4387dad3d4fce6eabfd95f711238463baa5f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shark::LAST_COLUMN</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gga2cd86794253e1e789534ab1c06f4387da17c1671ddb560506fb466c696bd5ce95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::csvStringToData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gacff789463206c23dd0a0e5a6af745bac</anchor>
      <arglist>(Data&lt; FloatVector &gt; &amp;data, std::string const &amp;contents, char separator=&apos;,&apos;, char comment=&apos;#&apos;, std::size_t maximumBatchSize=Data&lt; RealVector &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::csvStringToData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga4a7eb581686b43303908046dcd0435b9</anchor>
      <arglist>(Data&lt; RealVector &gt; &amp;data, std::string const &amp;contents, char separator=&apos;,&apos;, char comment=&apos;#&apos;, std::size_t maximumBatchSize=Data&lt; RealVector &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::csvStringToData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga147071be94f8d3b197d676f4c532bef6</anchor>
      <arglist>(Data&lt; unsigned int &gt; &amp;data, std::string const &amp;contents, char separator=&apos;,&apos;, char comment=&apos;#&apos;, std::size_t maximumBatchSize=Data&lt; unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::csvStringToData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga900df8c733e4557710b90827c0ccaaec</anchor>
      <arglist>(Data&lt; int &gt; &amp;data, std::string const &amp;contents, char separator=&apos;,&apos;, char comment=&apos;#&apos;, std::size_t maximumBatchSize=Data&lt; int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::csvStringToData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga0e044d531aaaa8226f516b8edb9fda11</anchor>
      <arglist>(Data&lt; float &gt; &amp;data, std::string const &amp;contents, char separator=&apos;,&apos;, char comment=&apos;#&apos;, std::size_t maximumBatchSize=Data&lt; double &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::csvStringToData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga0473c554b1bf903150d28ace61de91c8</anchor>
      <arglist>(Data&lt; double &gt; &amp;data, std::string const &amp;contents, char separator=&apos;,&apos;, char comment=&apos;#&apos;, std::size_t maximumBatchSize=Data&lt; double &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::csvStringToData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga11deb1a0290f96fa66bb0522bb63c443</anchor>
      <arglist>(LabeledData&lt; RealVector, unsigned int &gt; &amp;dataset, std::string const &amp;contents, LabelPosition lp, char separator=&apos;,&apos;, char comment=&apos;#&apos;, std::size_t maximumBatchSize=LabeledData&lt; RealVector, unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::csvStringToData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gafbeee45c8999ce227f7faec8501e51ca</anchor>
      <arglist>(LabeledData&lt; FloatVector, unsigned int &gt; &amp;dataset, std::string const &amp;contents, LabelPosition lp, char separator=&apos;,&apos;, char comment=&apos;#&apos;, std::size_t maximumBatchSize=LabeledData&lt; RealVector, unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::csvStringToData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga11bc0eaba1cacf5523718a54bf07f6d1</anchor>
      <arglist>(LabeledData&lt; RealVector, RealVector &gt; &amp;dataset, std::string const &amp;contents, LabelPosition lp, std::size_t numberOfOutputs=1, char separator=&apos;,&apos;, char comment=&apos;#&apos;, std::size_t maximumBatchSize=LabeledData&lt; RealVector, RealVector &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::csvStringToData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac126f5ab5d7a84e856030aec84c0bfb7</anchor>
      <arglist>(LabeledData&lt; FloatVector, FloatVector &gt; &amp;dataset, std::string const &amp;contents, LabelPosition lp, std::size_t numberOfOutputs=1, char separator=&apos;,&apos;, char comment=&apos;#&apos;, std::size_t maximumBatchSize=LabeledData&lt; RealVector, RealVector &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::importCSV</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga97446d6c453723686391c8896ac27352</anchor>
      <arglist>(Data&lt; T &gt; &amp;data, std::string fn, char separator=&apos;,&apos;, char comment=&apos;#&apos;, std::size_t maximumBatchSize=Data&lt; T &gt;::DefaultBatchSize, std::size_t titleLines=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::importCSV</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga4d912e42d355b5bb83c25a6967795d74</anchor>
      <arglist>(LabeledData&lt; blas::vector&lt; T &gt;, unsigned int &gt; &amp;data, std::string fn, LabelPosition lp, char separator=&apos;,&apos;, char comment=&apos;#&apos;, std::size_t maximumBatchSize=LabeledData&lt; RealVector, unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::importCSV</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga6741f94a7db30dea2a26c79545774864</anchor>
      <arglist>(LabeledData&lt; blas::vector&lt; T &gt;, blas::vector&lt; T &gt; &gt; &amp;data, std::string fn, LabelPosition lp, std::size_t numberOfOutputs=1, char separator=&apos;,&apos;, char comment=&apos;#&apos;, std::size_t maximumBatchSize=LabeledData&lt; RealVector, RealVector &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::exportCSV</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga494a668d4b5ac3ba9d2eb9d1edb43cf7</anchor>
      <arglist>(Data&lt; Type &gt; const &amp;set, std::string fn, char separator=&apos;,&apos;, bool sci=true, unsigned int width=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::exportCSV</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga9cb6f95c63500e469094e89313924a7d</anchor>
      <arglist>(LabeledData&lt; InputType, LabelType &gt; const &amp;dataset, std::string fn, LabelPosition lp, char separator=&apos;,&apos;, bool sci=true, unsigned int width=0)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>shark::KernelMatrixNormalizationType</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac3f7280f12aa8328fa44d8c2dc742d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shark::NONE</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ggac3f7280f12aa8328fa44d8c2dc742d79a5cf00e9721f2b3cdb3904fab0c2c1cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shark::MULTIPLICATIVE_TRACE_ONE</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ggac3f7280f12aa8328fa44d8c2dc742d79a9ef972140a18c87c0ef9c754f2f0ff5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shark::MULTIPLICATIVE_TRACE_N</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ggac3f7280f12aa8328fa44d8c2dc742d79a8aecec64c0ef17a7bd88599257070c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shark::MULTIPLICATIVE_VARIANCE_ONE</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ggac3f7280f12aa8328fa44d8c2dc742d79a0b1ad2af1a79ea7733ac6f7682f01086</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shark::CENTER_ONLY</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ggac3f7280f12aa8328fa44d8c2dc742d79a92f03723af3f5b6f0f70c254cc2765e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shark::CENTER_AND_MULTIPLICATIVE_TRACE_ONE</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ggac3f7280f12aa8328fa44d8c2dc742d79aca238a2e1de488e2b409c134652ad6c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::exportKernelMatrix</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaff457dd5765f70c216e99daa8729f653</anchor>
      <arglist>(LabeledData&lt; InputType, LabelType &gt; const &amp;dataset, AbstractKernelFunction&lt; InputType &gt; &amp;kernel, std::ostream &amp;out, KernelMatrixNormalizationType normalizer=NONE, bool scientific=false, unsigned int fieldwidth=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::exportKernelMatrix</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga0021425aaa9e19089b6faf929db2e700</anchor>
      <arglist>(LabeledData&lt; InputType, LabelType &gt; const &amp;dataset, AbstractKernelFunction&lt; InputType &gt; &amp;kernel, std::string fn, KernelMatrixNormalizationType normalizer=NONE, bool sci=false, unsigned int width=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::export_kernel_matrix</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga51a89701cd32374eb131ee78385b5dd3</anchor>
      <arglist>(LabeledData&lt; InputType, LabelType &gt; const &amp;dataset, AbstractKernelFunction&lt; InputType &gt; &amp;kernel, std::ostream &amp;out, KernelMatrixNormalizationType normalizer=NONE, bool scientific=false, unsigned int fieldwidth=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::export_kernel_matrix</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga40c7429cd466d513c0602a02380b8596</anchor>
      <arglist>(LabeledData&lt; InputType, LabelType &gt; const &amp;dataset, AbstractKernelFunction&lt; InputType &gt; &amp;kernel, std::string fn, KernelMatrixNormalizationType normalizer=NONE, bool sci=false, unsigned int width=0)</arglist>
    </member>
    <member kind="function">
      <type>CVFolds&lt; LabeledData&lt; I, L &gt; &gt;</type>
      <name>shark::createCVIID</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac32dddc7b7c3eaa8779dc244c6142eef</anchor>
      <arglist>(LabeledData&lt; I, L &gt; &amp;set, std::size_t numberOfPartitions, std::size_t batchSize=Data&lt; I &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>CVFolds&lt; LabeledData&lt; I, L &gt; &gt;</type>
      <name>shark::createCVSameSize</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac5ab39c050dd915797e37fa421db33fd</anchor>
      <arglist>(LabeledData&lt; I, L &gt; &amp;set, std::size_t numberOfPartitions, std::size_t batchSize=LabeledData&lt; I, L &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>CVFolds&lt; LabeledData&lt; I, unsigned int &gt; &gt;</type>
      <name>shark::createCVSameSizeBalanced</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gabb5bec2fca9d1eaa2ea58c75d36d1195</anchor>
      <arglist>(LabeledData&lt; I, unsigned int &gt; &amp;set, std::size_t numberOfPartitions, std::size_t batchSize=Data&lt; I &gt;::DefaultBatchSize, RecreationIndices *cv_indices=NULL)</arglist>
    </member>
    <member kind="function">
      <type>CVFolds&lt; LabeledData&lt; I, L &gt; &gt;</type>
      <name>shark::createCVBatch</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaa79ee91055e415b81c7b6b14dd89c065</anchor>
      <arglist>(LabeledData&lt; I, L &gt; const &amp;set, std::size_t numberOfPartitions)</arglist>
    </member>
    <member kind="function">
      <type>CVFolds&lt; LabeledData&lt; I, L &gt; &gt;</type>
      <name>shark::createCVIndexed</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaab4c1c3153591bc8ae8130df6a84c65c</anchor>
      <arglist>(LabeledData&lt; I, L &gt; &amp;set, std::size_t numberOfPartitions, std::vector&lt; std::size_t &gt; indices, std::size_t batchSize=Data&lt; I &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>CVFolds&lt; LabeledData&lt; I, L &gt; &gt;</type>
      <name>shark::createCVFullyIndexed</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga44f464d4c5fd227a608980516f3aeaf7</anchor>
      <arglist>(LabeledData&lt; I, L &gt; &amp;set, std::size_t numberOfPartitions, RecreationIndices indices, std::size_t batchSize=Data&lt; I &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>shark::operator&lt;&lt;</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga9ddad6c2aa073b879ea4c4a2885b3e2f</anchor>
      <arglist>(std::ostream &amp;stream, const Data&lt; T &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>DataView&lt; DatasetType &gt;</type>
      <name>shark::subset</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga420a47af92d8da0f5e95a7d158521db9</anchor>
      <arglist>(DataView&lt; DatasetType &gt; const &amp;view, IndexRange const &amp;indizes)</arglist>
    </member>
    <member kind="function">
      <type>DataView&lt; DatasetType &gt;</type>
      <name>shark::randomSubset</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga6d5f76f9a5891a8675c3ee297d57ad48</anchor>
      <arglist>(DataView&lt; DatasetType &gt; const &amp;view, std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>DataView&lt; DatasetType &gt;::batch_type</type>
      <name>shark::subBatch</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga229ee860771047d3994953fdda9f5a6a</anchor>
      <arglist>(DataView&lt; DatasetType &gt; const &amp;view, IndexRange const &amp;indizes)</arglist>
    </member>
    <member kind="function">
      <type>DataView&lt; DatasetType &gt;::batch_type</type>
      <name>shark::randomSubBatch</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga43b37371406e040f057680d5e7182341</anchor>
      <arglist>(DataView&lt; DatasetType &gt; const &amp;view, std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>DataView&lt; DatasetType &gt;</type>
      <name>shark::toView</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga4adbf0bc9537c1829f1e1cd281de560b</anchor>
      <arglist>(DatasetType &amp;set)</arglist>
    </member>
    <member kind="function">
      <type>DataView&lt; T &gt;::dataset_type</type>
      <name>shark::toDataset</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga3c0660922e34389d005bb81e9bde0c18</anchor>
      <arglist>(DataView&lt; T &gt; const &amp;view, std::size_t batchSize=DataView&lt; T &gt;::dataset_type::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>shark::numberOfClasses</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga884afb6868800ff6f15e9a3dc7f1c73b</anchor>
      <arglist>(DataView&lt; DatasetType &gt; const &amp;view)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>shark::inputDimension</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga148ab5a691f06b225ccfc21d9e039cef</anchor>
      <arglist>(DataView&lt; DatasetType &gt; const &amp;view)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>shark::labelDimension</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga248204f65ae4b8c30604f5a609cb7bf6</anchor>
      <arglist>(DataView&lt; DatasetType &gt; const &amp;view)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>shark::dataDimension</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga5ef7f15d261cffb78c3b8e91765619a2</anchor>
      <arglist>(DataView&lt; DatasetType &gt; const &amp;view)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL std::tuple&lt; bool, std::string, std::string &gt;</type>
      <name>shark::splitUrl</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gabeefaf7ce8258b9865c39a8a749e36dd</anchor>
      <arglist>(std::string const &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL std::string</type>
      <name>shark::download</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga8e14205f164eb3b6b8991d5954447291</anchor>
      <arglist>(std::string const &amp;url, unsigned short port=80)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::downloadSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga00bde9b88f32fa942fc3033321cdf4ef</anchor>
      <arglist>(LabeledData&lt; InputType, LabelType &gt; &amp;dataset, std::string const &amp;url, unsigned short port=80, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::downloadCsvData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga74410b660e897f6184b7314d946e70a2</anchor>
      <arglist>(LabeledData&lt; InputType, unsigned int &gt; &amp;dataset, std::string const &amp;url, LabelPosition lp, char separator=&apos;,&apos;, char comment=&apos;#&apos;, unsigned short port=80, std::size_t maximumBatchSize=LabeledData&lt; RealVector, RealVector &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::downloadCsvData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga43612fd4046d734e10ba2bba4d915b71</anchor>
      <arglist>(LabeledData&lt; InputType, RealVector &gt; &amp;dataset, std::string const &amp;url, LabelPosition lp, std::size_t numberOfOutputs=1, char separator=&apos;,&apos;, char comment=&apos;#&apos;, unsigned short port=80, std::size_t maximumBatchSize=LabeledData&lt; RealVector, RealVector &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::import_libsvm</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga731a062302caf5ce4b4ec81b4c3f59d2</anchor>
      <arglist>(LabeledData&lt; RealVector, unsigned int &gt; &amp;dataset, std::istream &amp;stream, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::import_libsvm</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gab2c36154804a81a8f54c006aaa2664bc</anchor>
      <arglist>(LabeledData&lt; CompressedRealVector, unsigned int &gt; &amp;dataset, std::istream &amp;stream, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::import_libsvm</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaa3d3cfaed161610c8e8755a024984845</anchor>
      <arglist>(LabeledData&lt; RealVector, unsigned int &gt; &amp;dataset, std::string fn, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::import_libsvm</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga651710df8e1d17b6c59105ed578e5356</anchor>
      <arglist>(LabeledData&lt; CompressedRealVector, unsigned int &gt; &amp;dataset, std::string fn, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::export_libsvm</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga07611d849b565f4ad9ee0990d845b6af</anchor>
      <arglist>(LabeledData&lt; InputType, unsigned int &gt; &amp;dataset, const std::string &amp;fn, bool dense=false, bool oneMinusOne=true, bool sortLabels=false, bool append=false)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::importSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga05146914cce29f558409be3d941da4ea</anchor>
      <arglist>(LabeledData&lt; RealVector, unsigned int &gt; &amp;dataset, std::istream &amp;stream, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::importSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gae9a2dd13db420519622d34edcec14375</anchor>
      <arglist>(LabeledData&lt; FloatVector, unsigned int &gt; &amp;dataset, std::istream &amp;stream, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::importSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaf8b5574d070babf7dedeff829500fdcd</anchor>
      <arglist>(LabeledData&lt; RealVector, RealVector &gt; &amp;dataset, std::istream &amp;stream, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, RealVector &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::importSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga085086c4d2768986ed5001540fc658ff</anchor>
      <arglist>(LabeledData&lt; FloatVector, FloatVector &gt; &amp;dataset, std::istream &amp;stream, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, RealVector &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::importSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga68f2c3c8feb991f8fdeabf16dedc9b2d</anchor>
      <arglist>(LabeledData&lt; CompressedRealVector, unsigned int &gt; &amp;dataset, std::istream &amp;stream, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::importSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac2bdbbdf898cc1fe944bbf09eafc8ed9</anchor>
      <arglist>(LabeledData&lt; CompressedFloatVector, unsigned int &gt; &amp;dataset, std::istream &amp;stream, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::importSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga8ea19a0180b9e818e5dedffdf7d2ccb9</anchor>
      <arglist>(LabeledData&lt; CompressedRealVector, RealVector &gt; &amp;dataset, std::istream &amp;stream, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, RealVector &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::importSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaeb47d90032d64c58461ccd559358fb63</anchor>
      <arglist>(LabeledData&lt; CompressedFloatVector, FloatVector &gt; &amp;dataset, std::istream &amp;stream, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, RealVector &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::importSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaa81118322b7850d186f5d1b97d7fdc94</anchor>
      <arglist>(LabeledData&lt; RealVector, unsigned int &gt; &amp;dataset, std::string fn, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::importSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga5ade7ecf4a3b31b2a3e6327e73aadbc4</anchor>
      <arglist>(LabeledData&lt; FloatVector, unsigned int &gt; &amp;dataset, std::string fn, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::importSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga526ddc551c9c8bd7be29069f5dcae1eb</anchor>
      <arglist>(LabeledData&lt; RealVector, RealVector &gt; &amp;dataset, std::string fn, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, RealVector &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::importSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga6a4b8407e1cb2a2f69a06cd972adbb0d</anchor>
      <arglist>(LabeledData&lt; FloatVector, FloatVector &gt; &amp;dataset, std::string fn, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, RealVector &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::importSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga1e9320f66abd768d990f6da62a8dae7c</anchor>
      <arglist>(LabeledData&lt; CompressedRealVector, unsigned int &gt; &amp;dataset, std::string fn, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::importSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gada502a40a887a4aa125f4e289e6a1ffe</anchor>
      <arglist>(LabeledData&lt; CompressedFloatVector, unsigned int &gt; &amp;dataset, std::string fn, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::importSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga66c1cc2162ecd3f639190c8cbba6274d</anchor>
      <arglist>(LabeledData&lt; CompressedRealVector, RealVector &gt; &amp;dataset, std::string fn, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, RealVector &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL void</type>
      <name>shark::importSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga6442f395a7bca6ef03952c7f475899ea</anchor>
      <arglist>(LabeledData&lt; CompressedFloatVector, FloatVector &gt; &amp;dataset, std::string fn, unsigned int highestIndex=0, std::size_t batchSize=LabeledData&lt; RealVector, RealVector &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::exportSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga682120386f2b7999fcb3853cd2948bf5</anchor>
      <arglist>(LabeledData&lt; InputType, unsigned int &gt; const &amp;dataset, std::ostream &amp;stream, bool oneMinusOne=true, bool sortLabels=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::exportSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gade4a41a8c8a1a968625f87e3aa61de13</anchor>
      <arglist>(LabeledData&lt; InputType, unsigned int &gt; const &amp;dataset, const std::string &amp;fn, bool oneMinusOne=true, bool sortLabels=false, bool append=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::exportSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga8321f618f7827cdcd5d4628dbbc2e4fe</anchor>
      <arglist>(LabeledData&lt; InputType, RealVector &gt; const &amp;dataset, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::exportSparseData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga391baa55061815c4f37ae778f585dd7b</anchor>
      <arglist>(LabeledData&lt; InputType, RealVector &gt; const &amp;dataset, const std::string &amp;fn, bool append=false)</arglist>
    </member>
    <member kind="function">
      <type>X::value_type</type>
      <name>shark::blas::createHouseholderReflection</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga44d754a05d75cb6c40c0c292f3e89ab8</anchor>
      <arglist>(vector_expression&lt; X, cpu_tag &gt; const &amp;x, vector_expression&lt; R, cpu_tag &gt; &amp;reflection)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::blas::applyHouseholderOnTheRight</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gabead541306577f124c02ac43c10100a7</anchor>
      <arglist>(matrix_expression&lt; Mat, Device &gt; &amp;matrix, vector_expression&lt; R, Device &gt; const &amp;reflection, T beta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::blas::applyHouseholderOnTheLeft</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaf437ca980035fd6fb152bcfa0cd34d82</anchor>
      <arglist>(matrix_expression&lt; Mat, Device &gt; &amp;matrix, vector_expression&lt; R, Device &gt; const &amp;reflection, T const &amp;beta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::blas::applyHouseholderOnTheLeft</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga964e703a6f0f014785ea68ce03cd7ad2</anchor>
      <arglist>(matrix_expression&lt; Mat, Device &gt; &amp;&amp;matrix, vector_expression&lt; R, Device &gt; const &amp;reflection, T const &amp;beta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::blas::randomRotationMatrix</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaca87daf2818038a5ad7f7b89f0d60d3b</anchor>
      <arglist>(random::rng_type &amp;rng, matrix_container&lt; MatrixT, cpu_tag &gt; &amp;matrixC)</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix</type>
      <name>shark::blas::randomRotationMatrix</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaf8329c98af0ef6bed47d41ea50552885</anchor>
      <arglist>(random::rng_type &amp;rng, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::initRandomNormal</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaa595fd92ec7d8eebcffd070131b18560</anchor>
      <arglist>(AbstractModel&lt; InputType, OutputType, ParameterVectorType &gt; &amp;model, double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::initRandomUniform</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaa2a8823f1241e854ba858d79fd3e37a2</anchor>
      <arglist>(AbstractModel&lt; InputType, OutputType, ParameterVectorType &gt; &amp;model, double lower, double upper)</arglist>
    </member>
    <namespace>shark</namespace>
    <member kind="typedef" protection="protected">
      <type>detail::SharedContainer&lt; Type &gt;</type>
      <name>shark::Data::Container</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga9ef593d49b903835ca9f5f717a701154</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>batch_type &amp;</type>
      <name>shark::Data::batch_reference</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga79217da1dd034aa18bc553f483e9449c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>batch_type const  &amp;</type>
      <name>shark::Data::const_batch_reference</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gab8037000e57c8d73273e1323ec2efe72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; element_type &gt;::reference</type>
      <name>shark::Data::element_reference</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga976b21a33c3947dde673463e2aa19597</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Batch&lt; element_type &gt;::const_reference</type>
      <name>shark::Data::const_element_reference</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga9c2ebc84cb3ca390c09b6d4e32d5e7f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>shark::Data::IndexSet</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga3765fd3c920db97545a11dca09b75224</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; detail::DataElementIterator&lt; Data&lt; Type &gt; &gt; &gt;</type>
      <name>shark::Data::element_range</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga19638bd1cc1a7c7c5698a476b36b9753</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; detail::DataElementIterator&lt; Data&lt; Type &gt; const  &gt; &gt;</type>
      <name>shark::Data::const_element_range</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gacf6e101b20eb431616afae009484307d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::BatchRange&lt; Data&lt; Type &gt; &gt;</type>
      <name>shark::Data::batch_range</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga13c4a238cadf7bca226dee7688241a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::BatchRange&lt; Data&lt; Type &gt; const  &gt;</type>
      <name>shark::Data::const_batch_range</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga4fd89aed7a568dc704a56c1f1e6271df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>element_type</type>
      <name>shark::UnlabeledData::InputType</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaf9233782ab54374d89784a0a8272b29f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::SharedContainer&lt; InputT &gt;</type>
      <name>shark::UnlabeledData::InputContainer</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga9ac116ed8ec0edc98bb10da4735476d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InputT</type>
      <name>shark::LabeledData::InputType</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga95ca0435602c7446d1e5120d07f970af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabelT</type>
      <name>shark::LabeledData::LabelType</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gafce8ad49b878be9a9a00d43c2f0e7855</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnlabeledData&lt; InputT &gt;</type>
      <name>shark::LabeledData::InputContainer</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga625c6a82bf244c493a35c90b029f8c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Data&lt; LabelT &gt;</type>
      <name>shark::LabeledData::LabelContainer</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaf481fd43ec8fb355cd2cc7f8076b3962</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InputContainer::IndexSet</type>
      <name>shark::LabeledData::IndexSet</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaee99a1f7070bf91bd40cd660fc9411b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InputLabelBatch&lt; typename Batch&lt; InputType &gt;::type &amp;, typename Batch&lt; LabelType &gt;::type &amp; &gt;</type>
      <name>shark::LabeledData::batch_reference</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga6dcbd080f9f9ab3fa3e1e90ba7ca9dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InputLabelBatch&lt; typename Batch&lt; InputType &gt;::type const  &amp;, typename Batch&lt; LabelType &gt;::type const  &amp; &gt;</type>
      <name>shark::LabeledData::const_batch_reference</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga4068b98a58ae69560e458afc8f57c511</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>batch_reference::reference</type>
      <name>shark::LabeledData::element_reference</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga5c44f3de22b4fa1d1f28a86fafcf96b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_batch_reference::const_reference</type>
      <name>shark::LabeledData::const_element_reference</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga04ea4c6c5368461a8bafa49001695b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; detail::DataElementIterator&lt; LabeledData&lt; InputType, LabelType &gt; &gt; &gt;</type>
      <name>shark::LabeledData::element_range</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gab4e8fae144bffa51788924d868cace1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; detail::DataElementIterator&lt; LabeledData&lt; InputType, LabelType &gt; const  &gt; &gt;</type>
      <name>shark::LabeledData::const_element_range</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga768dbd90d9f89fa968cd4c2c279a68eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::BatchRange&lt; LabeledData&lt; InputType, LabelType &gt; &gt;</type>
      <name>shark::LabeledData::batch_range</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gab3dadfd210c18bfe97b897d25eb49ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::BatchRange&lt; LabeledData&lt; InputType, LabelType &gt; const  &gt;</type>
      <name>shark::LabeledData::const_batch_range</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gae5270d17d2c684dca942c8b23f0b083f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shark::maxExpInput</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga243e2255f50ad695bf9d2b1bf46d5b92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shark::minExpInput</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga3803cedc2acd6e2bcd5a5bc53765d5e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; std::is_arithmetic&lt; T &gt;, T &gt;::type</type>
      <name>shark::sqr</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gae1f82613484173e9fe1a07960dabff63</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shark::cube</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga7bcf4b76ebc11e508c922d7aa05c729b</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; std::is_arithmetic&lt; T &gt;, T &gt;::type</type>
      <name>shark::sigmoid</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga28f3c1d61cf1c070d4687d03bc5d99e9</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shark::safeExp</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gae47c137a0eb0ef64df529df43c456d15</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shark::safeLog</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gafa0dd39814ad67a0cbba4b0d0e5308b2</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; std::is_arithmetic&lt; T &gt;, T &gt;::type</type>
      <name>shark::softPlus</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac93b0b1252780b58f096ce0eb6065273</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>shark::softPlus</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga663a0f23602a6a81bfad2694785868a1</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shark::copySign</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaea90fc4ad82597d2324042c4990b4207</anchor>
      <arglist>(T x, T y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shark::Data::BOOST_STATIC_CONSTANT</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga425774be1ecd7d42c890d68fe58c3aa1</anchor>
      <arglist>(std::size_t, DefaultBatchSize=256)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shark::Data::operator==</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaddb33ca1abda79975c6b458b1cecf25e</anchor>
      <arglist>(const Data&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shark::Data::operator!=</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga9c01641bb46faca7c6ee8fca1069cec9</anchor>
      <arglist>(const Data&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const_element_range</type>
      <name>shark::Data::elements</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gad9b0233e3adc882ed94f418f80767b09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>element_range</type>
      <name>shark::Data::elements</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga4d53c5d59826b9e611a19f31fcc0029d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_batch_range</type>
      <name>shark::Data::batches</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga4edf9849713708253a4d1f2d31e6187b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>batch_range</type>
      <name>shark::Data::batches</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga5cc5be820f0ff26a290778c23892cf47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>shark::Data::numberOfBatches</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gabd82edf467b9b82f4b0a1e70fd695311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>shark::Data::numberOfElements</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga814e8b0028cc90dd2af69805e8f8a04d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape const &amp;</type>
      <name>shark::Data::shape</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gabdfa24d4e424c86cf39851c143b2dd37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>shark::Data::shape</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga241d5b9008bba26301ddcd314d3df06b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shark::Data::empty</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga372d43fb769e6ccffdb699e5e2abe5b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>element_reference</type>
      <name>shark::Data::element</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga0ea72a74a21d5ff59772516b83c4a58b</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_element_reference</type>
      <name>shark::Data::element</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac093b3c74d84f89898ea5c8aeb6a81a8</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>batch_reference</type>
      <name>shark::Data::batch</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga73034ee5639176b0d45e1059859d0f0a</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_batch_reference</type>
      <name>shark::Data::batch</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga7222ee2998a5032cd2b07c86032e7663</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shark::Data::Data</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaecdfa51025bbadcfb6db99f292df82ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shark::Data::Data</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga08ec5cfa49cf4ac1a5ce0ca021eb0e29</anchor>
      <arglist>(std::size_t numBatches)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shark::Data::Data</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaddfe0e46341e78aa2c2c894b54ddc806</anchor>
      <arglist>(std::size_t size, element_type const &amp;element, std::size_t batchSize=DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::Data::read</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gade09075aa5a3e014a4204d5589f0012c</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::Data::write</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga85030a0dabab1040989d82ae78dd98be</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shark::Data::makeIndependent</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga35fb8d4c0cbc2a8bef9ebd974e0cf0fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::Data::splitBatch</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaf9900fbc117dd6259136a3dd2056c11e</anchor>
      <arglist>(std::size_t batch, std::size_t elementIndex)</arglist>
    </member>
    <member kind="function">
      <type>Data</type>
      <name>shark::Data::splice</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaabc1f57dc805faf96d59ab1ff6d4a171</anchor>
      <arglist>(std::size_t batch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::Data::append</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga55cb071b82f9cfd984a855eddb9bf51e</anchor>
      <arglist>(Data const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::Data::push_back</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gadbf9ee4b9fcc8d6ae46467b3fd7721ad</anchor>
      <arglist>(const_batch_reference batch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::Data::repartition</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga43280de21c8ba42f381a555cd8f367fe</anchor>
      <arglist>(Range const &amp;batchSizes)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>shark::Data::getPartitioning</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga2ee51d83d9a5db03a3a9a1b0607ae696</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::Data::reorderElements</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga42c8e836dbb5860d4044d8b19732f794</anchor>
      <arglist>(Range const &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::Data::indexedSubset</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaa2d2689f5da9dbd4eac362d3c03ebcaf</anchor>
      <arglist>(IndexSet const &amp;indices, Data &amp;subset, Data &amp;complement) const</arglist>
    </member>
    <member kind="function">
      <type>Data</type>
      <name>shark::Data::indexedSubset</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga6bc854de0b085583688f1d089fa608b6</anchor>
      <arglist>(IndexSet const &amp;indices) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shark::UnlabeledData::UnlabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga8c0c65e3733192e01b3be129abd04dad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shark::UnlabeledData::UnlabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac53e3ceb409f163b0d19cdcc24a9f0a7</anchor>
      <arglist>(Data&lt; InputT &gt; const &amp;points)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shark::UnlabeledData::UnlabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga6572934f70878dae97a39d6f8dec2f71</anchor>
      <arglist>(std::size_t size, element_type const &amp;element, std::size_t batchSize=base_type::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shark::UnlabeledData::UnlabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac7b43c4cc1e365744a0e9312d0fbccf5</anchor>
      <arglist>(std::size_t numBatches)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shark::UnlabeledData::UnlabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga34fe063dcc415b410a763d841983a379</anchor>
      <arglist>(UnlabeledData const &amp;container, std::vector&lt; std::size_t &gt; batchSizes)</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData</type>
      <name>shark::UnlabeledData::operator=</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga26e45cc01c8ff9b3e6e0d3fcba2e4718</anchor>
      <arglist>(Data&lt; InputT &gt; const &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData &amp;</type>
      <name>shark::UnlabeledData::inputs</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaa539b482e46b278300d34502c579c51a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData const &amp;</type>
      <name>shark::UnlabeledData::inputs</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac6ae0f437a6be0f2ec994f7c47021642</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData</type>
      <name>shark::UnlabeledData::splice</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga26c40e65414da413dbb3ef6403b76049</anchor>
      <arglist>(std::size_t batch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::UnlabeledData::shuffle</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga67bdcaf03984f3f958b83b5a4fafe77e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_element_range</type>
      <name>shark::LabeledData::elements</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga63e2615845814fee2e8b5773a9d4048f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>element_range</type>
      <name>shark::LabeledData::elements</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga0ab86bfc3c2251f6c4990ddd277c3569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_batch_range</type>
      <name>shark::LabeledData::batches</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga6c3b7d09e870412534ef27988b950fc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>batch_range</type>
      <name>shark::LabeledData::batches</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaf5d88e084735a9b685c79a73c133ee7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>shark::LabeledData::numberOfBatches</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaca4b1e6083184385dba76a21b4c1d42b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>shark::LabeledData::numberOfElements</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga5333445992cd6b14392cd80a1ab5403c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shark::LabeledData::empty</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga30ea533b248897b6d97bc1d62293e362</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InputContainer const &amp;</type>
      <name>shark::LabeledData::inputs</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga6f74e657c7e0c8a32b2456fb328bd653</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InputContainer &amp;</type>
      <name>shark::LabeledData::inputs</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga07aca32d61711242a04d299db7be73a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LabelContainer const &amp;</type>
      <name>shark::LabeledData::labels</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga6328a5aa2570c01a5ac5f25076071663</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LabelContainer &amp;</type>
      <name>shark::LabeledData::labels</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gafecc4ffc759f9535a1ffbabfaa6e6c11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shark::LabeledData::LabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gacb49015294f7ca2d8d79e3cd90814468</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shark::LabeledData::LabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gab30206d1bdfee9c8676048979a6abc8d</anchor>
      <arglist>(std::size_t numBatches)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shark::LabeledData::LabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gab1c3ece164521531ad9d35f236740370</anchor>
      <arglist>(std::size_t size, element_type const &amp;element, std::size_t batchSize=DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shark::LabeledData::LabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga8bd9251209d0aa390d1da4d6e839861e</anchor>
      <arglist>(Data&lt; InputType &gt; const &amp;inputs, Data&lt; LabelType &gt; const &amp;labels)</arglist>
    </member>
    <member kind="function">
      <type>element_reference</type>
      <name>shark::LabeledData::element</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaec57b5f22b3e8d2d67ad4b621f30fd54</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_element_reference</type>
      <name>shark::LabeledData::element</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga958caad3a5b350e5687df89bf9833587</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>batch_reference</type>
      <name>shark::LabeledData::batch</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga192f5eced10acf38f3ae723a3c400d98</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_batch_reference</type>
      <name>shark::LabeledData::batch</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga575c51a098b17178c4443c6ffe98d8db</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>Shape const &amp;</type>
      <name>shark::LabeledData::inputShape</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga134d41e34c69c494346367a570bf4ff8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>shark::LabeledData::inputShape</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga3eace53afd7b57c7ba1b1619a43a1f97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Shape const &amp;</type>
      <name>shark::LabeledData::labelShape</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga7f3308a970a6f4fe96aebf23755a6430</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>shark::LabeledData::labelShape</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga71c45aa6968c8e9ea6ca43ab13f4b9a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::LabeledData::read</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga846df24c10a85b0454cf06cabe55dcc2</anchor>
      <arglist>(InArchive &amp;archive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::LabeledData::write</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gad2c0f1e5f794eb3c7e1c9d644ac6d0c1</anchor>
      <arglist>(OutArchive &amp;archive) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shark::LabeledData::makeIndependent</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga5a4a7922424072317ec868221e19e075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::LabeledData::splitBatch</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac30b58de795e18e98901cd96b6b22d45</anchor>
      <arglist>(std::size_t batch, std::size_t elementIndex)</arglist>
    </member>
    <member kind="function">
      <type>LabeledData</type>
      <name>shark::LabeledData::splice</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaf0ea94e3e28b6df4e12fcbe8040293ac</anchor>
      <arglist>(std::size_t batch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::LabeledData::append</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga3c9be5eff818d2c5eb10b35f7b47ee14</anchor>
      <arglist>(LabeledData const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::LabeledData::push_back</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga5b3eb1f239a148b1f9b004b12150fddd</anchor>
      <arglist>(typename Batch&lt; InputType &gt;::type const &amp;inputs, typename Batch&lt; LabelType &gt;::type const &amp;labels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::LabeledData::push_back</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga7bed012a832b567129949a7844525f3a</anchor>
      <arglist>(const_batch_reference batch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::LabeledData::repartition</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga298a81625c3bcd482c3b68daf815c70b</anchor>
      <arglist>(Range const &amp;batchSizes)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>shark::LabeledData::getPartitioning</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga2ef8f53cd23e5eb804b9f9dda6b25c31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::LabeledData::reorderElements</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gae98f8421736e774da09ea3f15d985cfe</anchor>
      <arglist>(Range const &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::LabeledData::shuffle</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga96ea65352abe5e2c0787e4154a48972f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LabeledData</type>
      <name>shark::LabeledData::indexedSubset</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gae0d1826d38c41637eaaf99b3813ad133</anchor>
      <arglist>(IndexSet const &amp;indices) const</arglist>
    </member>
    <member kind="function">
      <type>Data&lt; typename Range::value_type &gt;</type>
      <name>shark::createDataFromRange</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga1a1a4f4249f709e6169a601a9a857fa8</anchor>
      <arglist>(Range const &amp;inputs, std::size_t maximumBatchSize=0)</arglist>
    </member>
    <member kind="function">
      <type>UnlabeledData&lt; typename boost::range_value&lt; Range &gt;::type &gt;</type>
      <name>shark::createUnlabeledDataFromRange</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga28f4e36576738062f68ba0ca3e0033be</anchor>
      <arglist>(Range const &amp;inputs, std::size_t maximumBatchSize=0)</arglist>
    </member>
    <member kind="function">
      <type>LabeledData&lt; typename boost::range_value&lt; Range1 &gt;::type, typename boost::range_value&lt; Range2 &gt;::type &gt;</type>
      <name>shark::createLabeledDataFromRange</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga409b50a287df842bd49e7434a8bbf69e</anchor>
      <arglist>(Range1 const &amp;inputs, Range2 const &amp;labels, std::size_t maximumBatchSize=0)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>shark::operator&lt;&lt;</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga0de27de56c5144c24c37cb49f0b5ecd1</anchor>
      <arglist>(std::ostream &amp;stream, const LabeledData&lt; T, U &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>shark::numberOfClasses</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga1fee3b5830ae11a78109e8c0265c6569</anchor>
      <arglist>(Data&lt; unsigned int &gt; const &amp;labels)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>shark::classSizes</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga89490b7ed6f9285ab91cae348c7437b8</anchor>
      <arglist>(Data&lt; unsigned int &gt; const &amp;labels)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>shark::dataDimension</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga6231b46b09731352a3cac40709a9625f</anchor>
      <arglist>(Data&lt; InputType &gt; const &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>shark::inputDimension</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gae537f0e90beb970397cd7bb9250984e2</anchor>
      <arglist>(LabeledData&lt; InputType, LabelType &gt; const &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>shark::labelDimension</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga3006553139477e356ee75cd85c190d7c</anchor>
      <arglist>(LabeledData&lt; InputType, LabelType &gt; const &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>shark::numberOfClasses</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gae0a473ce60b9c72bdfad94bef57c1b47</anchor>
      <arglist>(LabeledData&lt; InputType, unsigned int &gt; const &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>shark::classSizes</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gab974eaca15aaa59ea9106612905ce2f5</anchor>
      <arglist>(LabeledData&lt; InputType, LabelType &gt; const &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>boost::lazy_disable_if&lt; CanBeCalled&lt; Functor, typenameData&lt; T &gt;::batch_type &gt;, TransformedData&lt; Functor, T &gt; &gt;::type</type>
      <name>shark::transform</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gab87e0d38b9fbf74d9a97ee02e8ab273b</anchor>
      <arglist>(Data&lt; T &gt; const &amp;data, Functor f)</arglist>
    </member>
    <member kind="function">
      <type>boost::lazy_enable_if&lt; CanBeCalled&lt; Functor, typenameData&lt; T &gt;::batch_type &gt;, TransformedData&lt; Functor, T &gt; &gt;::type</type>
      <name>shark::transform</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gad97d7b9b78b05c23c26660304a4430fb</anchor>
      <arglist>(Data&lt; T &gt; const &amp;data, Functor const &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>LabeledData&lt; typename detail::TransformedDataElement&lt; Functor, I &gt;::type, L &gt;</type>
      <name>shark::transformInputs</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaf650c7559860ceb0d6b5e3ef3a1be1f3</anchor>
      <arglist>(LabeledData&lt; I, L &gt; const &amp;data, Functor const &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>LabeledData&lt; I, typename detail::TransformedDataElement&lt; Functor, L &gt;::type &gt;</type>
      <name>shark::transformLabels</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gad1ee84c65aeab9456e9c873007ea7459</anchor>
      <arglist>(LabeledData&lt; I, L &gt; const &amp;data, Functor const &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>Data&lt; blas::vector&lt; T &gt; &gt;</type>
      <name>shark::selectFeatures</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gabaa9bfec84a1f47b9d93f05d1bbf193a</anchor>
      <arglist>(Data&lt; blas::vector&lt; T &gt; &gt; const &amp;data, FeatureSet const &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>LabeledData&lt; RealVector, T &gt;</type>
      <name>shark::selectInputFeatures</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga1fd8f0945e389884a162871d750857f2</anchor>
      <arglist>(LabeledData&lt; RealVector, T &gt; const &amp;data, FeatureSet const &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>DatasetT</type>
      <name>shark::splitAtElement</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaa6e44d5e4f847777153927436e61752f</anchor>
      <arglist>(DatasetT &amp;data, std::size_t elementIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::repartitionByClass</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga9d96d1a2053608a9da101841d7a4feb5</anchor>
      <arglist>(LabeledData&lt; I, unsigned int &gt; &amp;data, std::size_t batchSize=LabeledData&lt; I, unsigned int &gt;::DefaultBatchSize)</arglist>
    </member>
    <member kind="function">
      <type>LabeledData&lt; I, unsigned int &gt;</type>
      <name>shark::binarySubProblem</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac9f0302f06c1f7365042a754a92a28ee</anchor>
      <arglist>(LabeledData&lt; I, unsigned int &gt;const &amp;data, unsigned int zeroClass, unsigned int oneClass)</arglist>
    </member>
    <member kind="function">
      <type>LabeledData&lt; I, unsigned int &gt;</type>
      <name>shark::oneVersusRestProblem</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gac1a150d7458195ce9212917b4956a4b7</anchor>
      <arglist>(LabeledData&lt; I, unsigned int &gt;const &amp;data, unsigned int oneClass)</arglist>
    </member>
    <member kind="function">
      <type>RowType</type>
      <name>shark::getColumn</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga2b2c3bd0c72ef444cbf8de7f96a4b589</anchor>
      <arglist>(Data&lt; RowType &gt; const &amp;data, std::size_t columnID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::setColumn</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga556f3c658db711cb630cc736b9665ec0</anchor>
      <arglist>(Data&lt; RowType &gt; &amp;data, std::size_t columnID, RowType newColumn)</arglist>
    </member>
    <member kind="function">
      <type>Data&lt; blas::vector&lt; Type, blas::gpu_tag &gt; &gt;</type>
      <name>shark::toGPU</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gafd3b31345c566b4bbaf5f5c6398eb23c</anchor>
      <arglist>(Data&lt; blas::vector&lt; T, blas::cpu_tag &gt; &gt; const &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Data&lt; blas::vector&lt; Type, blas::gpu_tag &gt; &gt;</type>
      <name>shark::toGPU</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gadd98c8990a51f5c5d1625cdf06874ccc</anchor>
      <arglist>(Data&lt; unsigned int &gt; const &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>LabeledData&lt; blas::vector&lt; Type, blas::gpu_tag &gt;, blas::vector&lt; Type, blas::gpu_tag &gt; &gt;</type>
      <name>shark::toGPU</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga03c6faca0987d05d7a952dd21fc3d9aa</anchor>
      <arglist>(LabeledData&lt; I, L &gt; const &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::importPGM</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga45ff5a792e6e1552e25bafc527a49825</anchor>
      <arglist>(std::string const &amp;fileName, T &amp;data, std::size_t &amp;sx, std::size_t &amp;sy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::exportPGM</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga3dd3d34b531f41052cad2eb70198a092</anchor>
      <arglist>(std::string const &amp;fileName, T const &amp;data, std::size_t sx, std::size_t sy, bool normalize=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::exportFiltersToPGMGrid</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gae049ff21921b0cae7f75669c1a150a09</anchor>
      <arglist>(std::string const &amp;basename, RealMatrix const &amp;filters, std::size_t width, std::size_t height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::exportFiltersToPGMGrid</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaf2bd14cfe0ae426e1dba04703f89a691</anchor>
      <arglist>(std::string const &amp;basename, Data&lt; RealVector &gt; const &amp;filters, std::size_t width, std::size_t height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::importPGMSet</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gab96fa7c3a2939a73db2108bb6c41686a</anchor>
      <arglist>(std::string const &amp;p, Data&lt; T &gt; &amp;set)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>shark::SQRT_2_PI</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga49b759f4712477bf89276a6c944fec47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Container</type>
      <name>shark::Data::m_data</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga2296f2d35aff4d00d07a5d6c99015197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Shape</type>
      <name>shark::Data::m_shape</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga232e64c2421cd25794c915c399a7cfd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::size_t</type>
      <name>shark::LabeledData::DefaultBatchSize</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gad0796fae6f819e8ca309dea4247621be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InputContainer</type>
      <name>shark::LabeledData::m_data</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga209379fc66f7caed4c18928e854dcf84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LabelContainer</type>
      <name>shark::LabeledData::m_label</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaa5002076abc056a907733e0dfb6a4710</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>shark::Data::LabeledData</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaa882479ecf9824c056c73aa0a444b879</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>shark::Data::swap</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>ga54bdb86caca27a90ce28a8043fe4bced</anchor>
      <arglist>(Data &amp;a, Data &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>shark::LabeledData::swap</name>
      <anchorfile>group__shark__globals.html</anchorfile>
      <anchor>gaa3cac8411f8423f5de504e86e4ef8291</anchor>
      <arglist>(LabeledData &amp;a, LabeledData &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>models</name>
    <title>Models</title>
    <filename>group__models.html</filename>
    <class kind="class">shark::AbstractModel</class>
    <class kind="class">shark::Classifier</class>
    <class kind="class">shark::CMACMap</class>
    <class kind="class">shark::ConcatenatedModel</class>
    <class kind="class">shark::Conv2DModel</class>
    <class kind="class">shark::DropoutLayer</class>
    <class kind="class">shark::Ensemble</class>
    <class kind="class">shark::KernelExpansion</class>
    <class kind="struct">shark::KernelClassifier</class>
    <class kind="class">shark::MissingFeaturesKernelExpansion</class>
    <class kind="class">shark::LinearModel</class>
    <class kind="class">shark::LinearClassifier</class>
    <class kind="class">shark::NearestNeighborModel</class>
    <class kind="class">shark::NeuronLayer</class>
    <class kind="class">shark::Normalizer</class>
    <class kind="class">shark::OneVersusOneClassifier</class>
    <class kind="class">shark::PoolingLayer</class>
    <class kind="class">shark::RBFLayer</class>
    <class kind="class">shark::ResizeLayer</class>
    <class kind="class">shark::CARTree</class>
    <class kind="class">shark::RFClassifier</class>
    <subgroup>clustering</subgroup>
    <subgroup>kernels</subgroup>
    <subgroup>activations</subgroup>
    <subgroup>space_trees</subgroup>
  </compound>
  <compound kind="group">
    <name>clustering</name>
    <title>Clustering Algorithms</title>
    <filename>group__clustering.html</filename>
    <class kind="class">shark::AbstractClustering</class>
    <class kind="class">shark::Centroids</class>
    <class kind="class">shark::ClusteringModel</class>
    <class kind="class">shark::HardClusteringModel</class>
    <class kind="class">shark::HierarchicalClustering</class>
    <class kind="class">shark::SoftClusteringModel</class>
    <member kind="function">
      <type>SHARK_EXPORT_SYMBOL std::size_t</type>
      <name>shark::kMeans</name>
      <anchorfile>group__clustering.html</anchorfile>
      <anchor>ga18f3e34980a5e92ad240649988ac314c</anchor>
      <arglist>(Data&lt; RealVector &gt; const &amp;data, std::size_t k, Centroids &amp;centroids, std::size_t maxIterations=0)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>kernels</name>
    <title>Kernels</title>
    <filename>group__kernels.html</filename>
    <class kind="class">shark::AbstractKernelFunction</class>
    <class kind="class">shark::AbstractMetric</class>
    <class kind="class">shark::ARDKernelUnconstrained</class>
    <class kind="class">shark::DiscreteKernel</class>
    <class kind="class">shark::GaussianRbfKernel</class>
    <class kind="class">shark::LinearKernel</class>
    <class kind="class">shark::MklKernel</class>
    <class kind="class">shark::ModelKernel</class>
    <class kind="class">shark::MonomialKernel</class>
    <class kind="struct">shark::MultiTaskSample</class>
    <class kind="class">shark::GaussianTaskKernel</class>
    <class kind="class">shark::NormalizedKernel</class>
    <class kind="class">shark::PointSetKernel</class>
    <class kind="class">shark::PolynomialKernel</class>
    <class kind="class">shark::ProductKernel</class>
    <class kind="class">shark::ScaledKernel</class>
    <class kind="class">shark::WeightedSumKernel</class>
    <subgroup>kerneloptimization</subgroup>
    <member kind="function">
      <type>double</type>
      <name>shark::evalSkipMissingFeatures</name>
      <anchorfile>group__kernels.html</anchorfile>
      <anchor>ga686904ecf2fd8e7d8c1d6799c403afb9</anchor>
      <arglist>(const AbstractKernelFunction&lt; InputType &gt; &amp;kernelFunction, const InputTypeT1 &amp;inputA, const InputTypeT2 &amp;inputB)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>shark::evalSkipMissingFeatures</name>
      <anchorfile>group__kernels.html</anchorfile>
      <anchor>ga42e81553c9f2aab48ba4a8a3ae37fe6c</anchor>
      <arglist>(const AbstractKernelFunction&lt; InputType &gt; &amp;kernelFunction, const InputTypeT1 &amp;inputA, const InputTypeT2 &amp;inputB, InputTypeT3 const &amp;missingness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::calculateRegularizedKernelMatrix</name>
      <anchorfile>group__kernels.html</anchorfile>
      <anchor>ga3eaca71bfc1467b79c9341dcfcad25c1</anchor>
      <arglist>(AbstractKernelFunction&lt; InputType &gt;const &amp;kernel, Data&lt; InputType &gt; const &amp;dataset, blas::matrix_expression&lt; M, Device &gt; &amp;matrix, double regularizer=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shark::calculateMixedKernelMatrix</name>
      <anchorfile>group__kernels.html</anchorfile>
      <anchor>ga3fafbf415f6fec4d166ade39dccbc01a</anchor>
      <arglist>(AbstractKernelFunction&lt; InputType &gt;const &amp;kernel, Data&lt; InputType &gt; const &amp;dataset1, Data&lt; InputType &gt; const &amp;dataset2, blas::matrix_expression&lt; M, Device &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix</type>
      <name>shark::calculateRegularizedKernelMatrix</name>
      <anchorfile>group__kernels.html</anchorfile>
      <anchor>gabfe57330fd12701e94f030ff1e042ae7</anchor>
      <arglist>(AbstractKernelFunction&lt; InputType &gt;const &amp;kernel, Data&lt; InputType &gt; const &amp;dataset, double regularizer=0)</arglist>
    </member>
    <member kind="function">
      <type>RealMatrix</type>
      <name>shark::calculateMixedKernelMatrix</name>
      <anchorfile>group__kernels.html</anchorfile>
      <anchor>ga547ea94d882f809b7a33c63cdda4dd37</anchor>
      <arglist>(AbstractKernelFunction&lt; InputType &gt;const &amp;kernel, Data&lt; InputType &gt; const &amp;dataset1, Data&lt; InputType &gt; const &amp;dataset2)</arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>shark::calculateKernelMatrixParameterDerivative</name>
      <anchorfile>group__kernels.html</anchorfile>
      <anchor>gafb6b639ff5daa090b08b13e97e78a7bc</anchor>
      <arglist>(AbstractKernelFunction&lt; InputType &gt; const &amp;kernel, Data&lt; InputType &gt; const &amp;dataset, WeightMatrix const &amp;weights)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>activations</name>
    <title>Neuron activation functions</title>
    <filename>group__activations.html</filename>
    <class kind="struct">shark::TanhNeuron</class>
    <class kind="struct">shark::LogisticNeuron</class>
    <class kind="struct">shark::FastSigmoidNeuron</class>
    <class kind="struct">shark::LinearNeuron</class>
    <class kind="struct">shark::RectifierNeuron</class>
    <class kind="struct">shark::NormalizerNeuron</class>
    <class kind="struct">shark::SoftmaxNeuron</class>
  </compound>
  <compound kind="group">
    <name>space_trees</name>
    <title>Space Partitioning Trees</title>
    <filename>group__space__trees.html</filename>
    <class kind="class">shark::TreeConstruction</class>
    <class kind="class">shark::BinaryTree</class>
    <class kind="class">shark::KDTree</class>
    <class kind="class">shark::KHCTree</class>
    <class kind="class">shark::LCTree</class>
  </compound>
  <compound kind="group">
    <name>constraint_handling</name>
    <title>Constraint Handling</title>
    <filename>group__constraint__handling.html</filename>
    <class kind="class">shark::AbstractConstraintHandler</class>
    <class kind="class">shark::BoxConstraintHandler</class>
  </compound>
  <compound kind="group">
    <name>costfunctions</name>
    <title>Cost functions</title>
    <filename>group__costfunctions.html</filename>
    <class kind="class">shark::AbstractCost</class>
    <class kind="class">shark::NegativeAUC</class>
    <class kind="class">shark::NegativeWilcoxonMannWhitneyStatistic</class>
  </compound>
  <compound kind="group">
    <name>objfunctions</name>
    <title>Objective functions</title>
    <filename>group__objfunctions.html</filename>
    <class kind="class">shark::AbstractObjectiveFunction</class>
    <class kind="class">shark::CombinedObjectiveFunction</class>
    <class kind="class">shark::CrossValidationError</class>
    <class kind="class">shark::ErrorFunction</class>
    <class kind="class">shark::EvaluationArchive</class>
    <class kind="class">shark::LooError</class>
    <class kind="class">shark::NegativeLogLikelihood</class>
    <class kind="class">shark::OneNormRegularizer</class>
    <class kind="class">shark::TwoNormRegularizer</class>
    <class kind="class">shark::VariationalAutoencoderError</class>
    <subgroup>constraint_handling</subgroup>
    <subgroup>benchmarks</subgroup>
    <subgroup>kerneloptimization</subgroup>
  </compound>
  <compound kind="group">
    <name>benchmarks</name>
    <title>Benchmark functions</title>
    <filename>group__benchmarks.html</filename>
    <class kind="struct">shark::benchmarks::Ackley</class>
    <class kind="struct">shark::benchmarks::Cigar</class>
    <class kind="class">shark::benchmarks::CigarDiscus</class>
    <class kind="struct">shark::benchmarks::CIGTAB1</class>
    <class kind="struct">shark::benchmarks::CIGTAB2</class>
    <class kind="struct">shark::benchmarks::ConstrainedSphere</class>
    <class kind="struct">shark::benchmarks::Discus</class>
    <class kind="struct">shark::benchmarks::DTLZ1</class>
    <class kind="struct">shark::benchmarks::DTLZ2</class>
    <class kind="struct">shark::benchmarks::DTLZ3</class>
    <class kind="struct">shark::benchmarks::DTLZ4</class>
    <class kind="struct">shark::benchmarks::DTLZ5</class>
    <class kind="struct">shark::benchmarks::DTLZ6</class>
    <class kind="struct">shark::benchmarks::DTLZ7</class>
    <class kind="struct">shark::benchmarks::ELLI1</class>
    <class kind="struct">shark::benchmarks::ELLI2</class>
    <class kind="struct">shark::benchmarks::Ellipsoid</class>
    <class kind="struct">shark::benchmarks::Fonseca</class>
    <class kind="struct">shark::benchmarks::GSP</class>
    <class kind="struct">shark::benchmarks::Himmelblau</class>
    <class kind="struct">shark::benchmarks::IHR1</class>
    <class kind="struct">shark::benchmarks::IHR2</class>
    <class kind="struct">shark::benchmarks::IHR3</class>
    <class kind="struct">shark::benchmarks::IHR4</class>
    <class kind="struct">shark::benchmarks::IHR6</class>
    <class kind="struct">shark::benchmarks::LZ1</class>
    <class kind="struct">shark::benchmarks::LZ2</class>
    <class kind="struct">shark::benchmarks::LZ3</class>
    <class kind="struct">shark::benchmarks::LZ4</class>
    <class kind="struct">shark::benchmarks::LZ5</class>
    <class kind="struct">shark::benchmarks::LZ6</class>
    <class kind="struct">shark::benchmarks::LZ7</class>
    <class kind="struct">shark::benchmarks::LZ8</class>
    <class kind="struct">shark::benchmarks::LZ9</class>
    <class kind="class">shark::benchmarks::MarkovPole</class>
    <class kind="class">shark::benchmarks::MultiObjectiveBenchmark</class>
    <class kind="class">shark::benchmarks::NonMarkovPole</class>
    <class kind="struct">shark::benchmarks::Rosenbrock</class>
    <class kind="struct">shark::benchmarks::RotatedObjectiveFunction</class>
    <class kind="struct">shark::benchmarks::Schwefel</class>
    <class kind="struct">shark::benchmarks::Sphere</class>
    <class kind="struct">shark::benchmarks::ZDT1</class>
    <class kind="struct">shark::benchmarks::ZDT2</class>
    <class kind="struct">shark::benchmarks::ZDT3</class>
    <class kind="struct">shark::benchmarks::ZDT4</class>
    <class kind="struct">shark::benchmarks::ZDT6</class>
    <namespace>shark</namespace>
  </compound>
  <compound kind="group">
    <name>kerneloptimization</name>
    <title>Kernel Optimization</title>
    <filename>group__kerneloptimization.html</filename>
    <class kind="class">shark::KernelTargetAlignment</class>
    <class kind="class">shark::LooErrorCSvm</class>
    <class kind="class">shark::NegativeGaussianProcessEvidence</class>
    <class kind="class">shark::RadiusMarginQuotient</class>
    <class kind="class">shark::SvmLogisticInterpretation</class>
  </compound>
  <compound kind="group">
    <name>lossfunctions</name>
    <title>Loss Functions</title>
    <filename>group__lossfunctions.html</filename>
    <class kind="class">shark::AbstractLoss</class>
    <class kind="class">shark::CrossEntropy</class>
    <class kind="class">shark::DiscreteLoss</class>
    <class kind="class">shark::EpsilonHingeLoss</class>
    <class kind="class">shark::HingeLoss</class>
    <class kind="class">shark::HuberLoss</class>
    <class kind="class">shark::SquaredEpsilonHingeLoss</class>
    <class kind="class">shark::SquaredHingeLoss</class>
    <class kind="class">shark::SquaredLoss</class>
    <class kind="class">shark::ZeroOneLoss</class>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Shark Machine Learning Library Ver. 4.0.0.</title>
    <filename>index.html</filename>
  </compound>
</tagfile>
